===========
Modify Data
===========

.. default-domain:: mongodb

MongoDB provides the :method:`db.collection.update()` method to update
documents of a single collection and the
:method:`db.collection.remove()` method to remove documents from a
single collection.

In MongoDB, write operations are atomic on the level of a single
document. If a single update operation modifies multiple documents of a
collection or if a single remove operation removes multiple documents
from a collection, the operation can interleave with other write
operations on that collection.

Prerequisite
------------

The procedures on this page modify the ``orders`` collection in the
``test`` database.

.. include:: /includes/steps/getting-started-query-prereq.rst

Update Existing Documents
-------------------------

By default, the :method:`db.collection.update()` method updates a
single matching document, even if you specify an update condition that
matches multiple documents in the collection.

The :method:`db.collection.update()` method has the form of:

.. code-block:: javascript

   db.collection.update(
      <update conditions>,
      <update document>,
      <options document>
   )

To specify an update condition, use the same structure and
:manual:`query operators </reference/operator/query>` as for query
conditions. See :doc:`/query` for an introduction to query conditions.

.. include:: /includes/note-id-values-generated.rst

Change a Field Value
~~~~~~~~~~~~~~~~~~~~

To change a field value, MongoDB provides :method:`update operators
</reference/operator/update>`, such as :update:`$set` to replace a
value and :update:`$inc` to increment existing numeric value.

Although the following procedures modify existing field values, some
update operators, such as :update:`$set`, :update:`$inc`, and
:update:`$mul`, will create the field if the field does not exist.
Refer to individual :method:`update operator
</reference/operator/update>` documentation to determine the behavior
when the field does not exist.

You cannot update the ``_id`` field.

.. include:: /includes/steps/getting-started-update.rst

.. _getting-started-replace-a-document:

Update Multiple Fields/Replace a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Update Multiple Fields/Modify Document Structure
````````````````````````````````````````````````

Some :method:`update operators </reference/operator/update>` can accept
multiple operands. 

Some update operators modify the structure of the documents. For
instance, operators like :update:`$set`, :update:`$inc`, and
:update:`$mul` will create the field in the matching document if the
field does not exist, whereas :update:`$rename` and :update:`$unset`
renames a field or removes a field respectively.

.. include:: /includes/steps/getting-started-update-multiple-fields.rst

Replace a Document
``````````````````

To replace a matching document wholesale except for the ``_id`` field,
use the replacement document as the update document for the
:method:`~db.collection.update()` method. You cannot update the ``_id``
field.

The update operation replaces only a single document. You cannot
specify the ``multi`` option.

.. include:: /includes/steps/getting-started-update-replace.rst

Upsert
------

By default, if the update condition matches no document, then the
update operation does not modify any document. In cases where you want
to insert a document if no matching document is found, you can specify
an ``upsert`` option to the :method:`~db.collection.update()` method.

The ``upsert`` option specifies that if the method finds matching
documents, update accordingly. *However*, if the method does not find
any matching documents, the update method adds the document to the
collection. 

For brevity, in the following procedure, an ``update`` operation with
the ``upsert`` option is sometimes referred to as an ``upsert``, and
the document added through such operation is known as the ``upserted``
document.

Upsert when Replacing a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/getting-started-upsert-replacement-document.rst

Upsert when Updating Fields with Update Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/getting-started-upsert-update-operators.rst

Remove Documents
----------------

Remove Documents from a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, the :method:`db.collection.remove()` method removes all
documents that match the remove condition. You can specify a
``justOne`` option to remove only one matching documents even when
multiple documents match the remove condition.

To specify the remove condition, use the same structure and
:manual:`query operators </reference/operator/query>` as for query
conditions. See :doc:`/query` for an introduction to query conditions.

.. include:: /includes/steps/getting-started-remove.rst

Drop Collection
~~~~~~~~~~~~~~~~

The remove all operation only removes the documents from the
collection. The collection itself, as well as any indexes for the
collection, remain. To remove all documents from a collection, it may
be more efficient to drop the entire collection, including the indexes,
and then recreate the collection and rebuild the indexes.

.. include:: /includes/steps/getting-started-drop.rst
