==============
Create Indexes
==============

.. default-domain:: mongodb

Overview
--------

MongoDB provides several different index types to support different
kinds of queries and data sets.

The Primer *only* address scalar indexes, which are the most common
indexes. Scalar indexes store all indexed items in order by value and
support exact matches and efficient range queries. For a complete
discussion of scalar index and other index types, see :manual:`Index
Types Overview </core/index-types>`.

By default, MongoDB automatically creates an index on the ``_id`` field
upon the creation of the ``collection``.

Create Indexes
--------------

To create an index, use the :method:`~db.collection.ensureIndex()`
method on the collection.

By default, all indexing operations block until the MongoDB finishes
building the index.

Create Single Field Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create an index on a field, pass to the
:method:`~db.collection.ensureIndex()` method an index specification
document that contains the field to index and the type.

To create an index that stores the index entries in ascending order,
specify ``1`` for the type. To create an index that stores the entries
in descending order, specify ``-1`` for the type. Because MongoDB can
traverse the index in either order, for a single field index, ascending
and descending indexes are interchangeable.
  
.. include:: /includes/steps/getting-started-index-single-field.rst

See :method:`~db.collection.ensureIndex()` for more information and
the :manual:`Create an Index </tutorial/create-an-index>` tutorial for
additional examples.

Create Compound Indexes
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB also supports indexes that contain multiple fields. These are
:ref:`compound indexes <index-type-compound>`, and you can use these
indexes to support more complex queries or to increase the selectivity
of an index.

To create a compound index, pass to the
:method:`~db.collection.ensureIndex()` method an index specification
document that contains the fields to index and the associated sort
order for each field. To store the field in ascending order in the
index, specify ``1`` for the type. To store the field in descending
order, specify ``-1`` for the type. Each field in the index can have
its own order.

The order in which the field appears in the index specification as well
as the sort order of the field matter for compound indexes. For
compound indexes, the index entries are the combinations of the indexed
fields, sorted first by the field that appears first in the index
specification, and then by the subsequent fields in their respective
sort order.

.. include:: /includes/steps/getting-started-index-compound.rst

See :method:`~db.collection.ensureIndex()` for more information and
the :manual:`Create Compound Indexes
</tutorial/create-a-compound-index>` tutorial for additional examples.

Create Unique Indexes
~~~~~~~~~~~~~~~~~~~~~

MongoDB's index support a *unique constraint*, which ensures that every
entry in the index is unique. You can specify the unique constraint for
single field indexes and compound indexes.

To create a unique index, pass an options specifications document to
the :method:`~db.collection.ensureIndex()` method as the second
parameter. In the options document, specify ``unique: true``.

.. include:: /includes/steps/getting-started-index-unique.rst

By default every collection has a unique index on the ``_id`` field.

See :method:`~db.collection.ensureIndex()` for more information and
the :manual:`Create a Unique Index </tutorial/create-a-unique-index>`
tutorial for additional examples.
