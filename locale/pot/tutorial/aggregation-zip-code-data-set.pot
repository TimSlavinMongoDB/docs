# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# eecea1db752940ee9ea055c7efad5818
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
# 41ad71119eb64e4794295c0679858ef2
msgid "The examples in this document use the ``zipcode`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# 068f0518278f4309bab5a2b668fe7d84
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
# 8db757c9ed2b4b7a963ce8d7716a1bed
msgid "Each document in the ``zipcode`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
# 3a9316cde5304c858d75399bc88d5b47
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
# 8e296912bc8b41d0ad2fb10d7df4acff
msgid "The ``city`` field holds the city."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:34
# 6c4ae7fb8fb742b59a081dbfc812506f
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# 30ba7eb6bf6840ab82e14af409f56b84
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# a751cba886dd44739b7a52765055f7ba
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
# 9c943c00ff904a99869113408de0d83a
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell. :method:`aggregate() <db.collection.aggregate()>` provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:48
# cc4b1fb0114d4f49b45a2be38333728c
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:50
# 1ac0f7e0b3004f368cf5f84dcaaa008f
msgid "To return all states with a population greater than 10 million, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:60
# a8362a493f6d417f8af61d53eec88d19
msgid "Aggregations operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` connects a number of :ref:`pipeline <aggregation-pipeline>` operators, which define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:67
#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
# ab93b6f4e77b43549793fc44250b07c4
# a1549a5a8a314d6f907e8285928c0363
msgid "In this example, the pipeline passes all documents in the ``zipcodes`` collection through the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:70
# 75b6bb9b4414461c9aef7475e35d2e3a
msgid "the :pipeline:`$group` operator collects all documents and creates documents for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:73
# 026511ccfbdb4528bab82ddd92d5eec6
msgid "These new per-state documents have one field in addition the ``_id`` field: ``totalPop`` which is a generated field using the :group:`$sum` operation to calculate the total value of all ``pop`` fields in the source documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:78
# 1c724f94940a4dc2bb77243291f2e5f4
msgid "After the :pipeline:`$group` operation the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:88
# 63686a1d2f8b4a448e89c9459af2f90c
msgid "the :pipeline:`$match` operation filters these documents so that the only documents that remain are those where the value of ``totalPop`` is greater than or equal to 10 million."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:92
# 0a05151523d94303956b7f998f62702b
msgid "The :pipeline:`$match` operation does not alter the documents, which have the same format as the documents output by :pipeline:`$group`."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:96
# b86328bc99c442e883e1144ce2cfe2ba
msgid "The equivalent :term:`SQL` for this operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:106
# 7ead83f914844de8ae71b581b414930e
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
# b9603530d6a8455081b8eae2a0aabf30
msgid "To return the average populations for cities in each state, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:120
# 03002e8ec5564c7a8ecb761cd65e11c5
msgid "Aggregations operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>`  connects a number of :ref:`pipeline <aggregation-pipeline>` operators that define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:130
# 589a6586d5a84b85821b80524696d3d6
msgid "the :pipeline:`$group` operator collects all documents and creates new documents for every combination of the ``city`` and ``state`` fields in the source document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:134
# b062a22e92344a90802d132df3f879d7
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:147
# 3d22062b247d4bd6b5e12e15ac86e2d6
msgid "the second :pipeline:`$group` operator collects documents by the ``state`` field and use the :group:`$avg` expression to compute a value for the ``avgCityPop`` field."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:151
# 7e83bf1da86748a392eab8774b3943f1
msgid "The final output of this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:168
# 0cef1d57f9654c80ad42aefa10144049
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
# 813b3e310929414cb1eafb276fac6013
msgid "To return the smallest and largest cities by population for each state, use the following aggregation operation:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:195
# b507788661c542cfb50c1212e7f5598f
msgid "Aggregation operations using the :method:`aggregate() <db.collection.aggregate()>` helper process all documents in the ``zipcodes`` collection. :method:`aggregate() <db.collection.aggregate()>` combines a number of :ref:`pipeline <aggregation-pipeline>` operators that define the aggregation process."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:202
# fe2e35d8b54044fd815a180dee7a9e7e
msgid "All documents from the ``zipcodes`` collection pass into the pipeline, which consists of the following steps:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:205
# c7fe30fbcea94b228e40b095e452100c
msgid "the :pipeline:`$group` operator collects all documents and creates new documents for every combination of the ``city`` and ``state`` fields in the source documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:209
# 4970b8fe3e0943d5b12516cdda8957b0
msgid "By specifying the value of ``_id`` as a sub-document that contains both fields, the operation preserves the ``state`` field for use later in the pipeline. The documents produced by this stage of the pipeline have a second field, ``pop``, which uses the :group:`$sum` operator to provide the total of the ``pop`` fields in the source document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:216
# c9197833324a4a68b558a7fc0ef5beb4
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:228
# 806931a12e664cefb1fe9f75aa80a09a
msgid ":pipeline:`$sort` operator orders the documents in the pipeline based on the vale of the ``pop`` field from largest to smallest. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:232
# 9802a1d6ed3d46148887e3a017a96b7d
msgid "the second :pipeline:`$group` operator collects the documents in the pipeline by the ``state`` field, which is a field inside the nested ``_id`` document."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:236
# 402a2b1c202f48e58952a8d8d7bf79da
msgid "Within each per-state document this :pipeline:`$group` operator specifies four fields: Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestcity`` and ``biggestpop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestcity`` and ``smallestpop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:245
# 6188bb0584dd499081ec77c90b8dc6dc
msgid "The documents, at this stage in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:257
# 233ea3a88dc6445380a957388124fb33
msgid "The final operation is :pipeline:`$project`, which renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` sub-documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:262
# 3f719de0e8004460b400e95764dd013d
msgid "The output of this aggregation operation is:"
msgstr ""

