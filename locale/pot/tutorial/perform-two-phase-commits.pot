# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/perform-two-phase-commits.txt:3
# 57f62ef3c2814a47a7f181bd0e834933
msgid "Perform Two Phase Commits"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:8
# d814238373fc4d80b048f0e5ac638324
msgid "Synopsis"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:10
# d14209834e574843bfd65c9fe88b810e
msgid "This document provides a pattern for doing multi-document updates or \"transactions\" using a two-phase commit approach for writing data to multiple documents. Additionally, you can extend this process to provide a :ref:`rollback <2-phase-commits-rollback>` like functionality."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:17
# 2020e67762b342e69355589318cf9ea9
msgid "Background"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:19
# 1ffea5896f704e1bb785661de80d9d74
msgid "Operations on a single :term:`document` are always atomic with MongoDB databases; however, operations that involve multiple documents, which are often referred to as \"transactions,\" are not atomic. Since documents can be fairly complex and contain multiple \"nested\" documents, single-document atomicity provides necessary support for many practical use cases."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:26
# a024153631134b10875f32a3757a5b94
msgid "Thus, without precautions, success or failure of the database operation cannot be \"all or nothing,\" and without support for multi-document transactions it's possible for an operation to succeed for some operations and fail with others. When executing a transaction composed of several sequential operations the following issues arise:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:32
# 490fde546f0143c9b23eb44764ec798e
msgid "Atomicity: if one operation fails, the previous operation within the transaction must \"rollback\" to the previous state (i.e. the \"nothing,\" in \"all or nothing.\")"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:36
# f0b6c48557ff40bca28aa4b23ba8fdd2
msgid "Isolation: operations that run concurrently with the transaction operation set must \"see\" a consistent view of the data throughout the transaction process."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:40
# faa3f7e21a614299ac3817f45297c237
msgid "Consistency: if a major failure (i.e. network, hardware) interrupts the transaction, the database must be able to recover a consistent state."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:44
# 5bbc508809c345e793c4789081abf566
msgid "Despite the power of single-document atomic operations, there are cases that require multi-document transactions. For these situations, you can use a two-phase commit, to provide support for these kinds of multi-document updates."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:49
# 0a17096ef2134596a481f1ce8a9fbd15
msgid "Because documents can represent both pending data and states, you can use a two-phase commit to ensure that data is consistent, and that in the case of an error, the state that preceded the transaction is :ref:`recoverable <2-phase-commits-rollback>`."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:56
# 8491516d359c4e4d84db3c48244395c2
msgid "Because only single-document operations are atomic with MongoDB, two-phase commits can only offer transaction-*like* semantics. It's possible for applications to return intermediate data at intermediate points during the two-phase commit or rollback."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:62
# 287f9bd5abd04ba29c4d8c6e34af8aa2
msgid "Pattern"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:65
# 1b9ff3aa640443e785eb73f038f95d84
msgid "Overview"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:67
# 7b6cf3deb10a4e9da00466e8ed404543
msgid "The most common example of transaction is to transfer funds from account A to B in a reliable way, and this pattern uses this operation as an example. In a relational database system, this operation would encapsulate subtracting funds from the source (``A``) account and adding them to the destination (``B``) within a single atomic transaction. For MongoDB, you can use a two-phase commit in these situations to achieve a compatible response."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:75
# bc4729d7fc77428caea60967ec5e6a6f
msgid "All of the examples in this document use the :program:`mongo` shell to interact with the database, and assume that you have two collections: First, a collection named ``accounts`` that will store data about accounts with one account per document, and a collection named ``transactions`` which will store the transactions themselves."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:81
# 2d1e1422827446c380e861359a4ef8f1
msgid "Begin by creating two accounts named ``A`` and ``B``, with the following command:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:89
#: ../source/tutorial/perform-two-phase-commits.txt:123
# 88329d43a0b04d5baebfe00f9c202efb
# 7a57b3968d55491c9ebbb27b75113c76
msgid "To verify that these operations succeeded, use :method:`~db.collection.find()`:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:95
# 9edcfb21299649a1a2c0ca3241d8f3af
msgid ":program:`mongo` will return two :term:`documents <document>` that resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:104
# 26299a9068194d16ba614d46231292d9
msgid "Transaction Description"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:109
# 8201735dac09419280458dba53cdd452
msgid "Set Transaction State to Initial"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:111
# 51d11508612840b9be0c4f3d5dd07ff4
msgid "Create the ``transaction`` collection by inserting the following document. The transaction document holds the ``source`` and ``destination``, which refer to the ``name`` fields of the ``accounts`` collection, as well as the ``value`` field that represents the amount of data change to the ``balance`` field. Finally, the ``state`` field reflects the current state of the transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:129
# 3ac2777deefc4c818c7e7396a3bb490e
msgid "This will return a document similar to the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:138
# d83743956a064f00a941d298ac9a6d03
msgid "Switch Transaction State to Pending"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:140
# 728a4a976fe5494aba210989bb792f94
msgid "Before modifying either records in the ``accounts`` collection, set the transaction state to ``pending`` from ``initial``."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:143
# 19cec0f23ccb4fed81ae24f8604dce7f
msgid "Set the local variable ``t`` in your shell session, to the transaction document using :method:`~db.collection.findOne()`:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:150
# 901e42afe54e4906974c0cf0a96e97df
msgid "After assigning this variable ``t``, the shell will return the value of ``t``, you will see the following output:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:163
# 947c09de7ad24ae090d4bd5d411be8c1
msgid "Use :method:`~db.collection.update()` to change the value of ``state`` to ``pending``:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:171
# 4acc326255fe4973aba26abbbef200da
msgid "The :method:`~db.collection.find()` operation will return the contents of the ``transactions`` collection, which should resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:182
# 446433d361e44ba291338ac674cdc525
msgid "Apply Transaction to Both Accounts"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:184
# 371722951cde4d05a2c75dc0c81637aa
msgid "Continue by applying the transaction to both accounts. The :method:`~db.collection.update()` query will prevent you from applying the transaction *if* the transaction is *not* already marked as pending. Use the following :method:`~db.collection.update()` operation:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:196
#: ../source/tutorial/perform-two-phase-commits.txt:241
# e9764c753dd8447ab7945597b2e7f816
# 0473bea9b6d24188b0f599613ccbfc03
msgid "The :method:`~db.collection.find()` operation will return the contents of the ``accounts`` collection, which should now resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:208
# 89095284217a436bbedeceb14c7e6a4e
msgid "Set Transaction State to Committed"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:210
# d266636d4bdd4720821924f5bb79b45f
msgid "Use the following :method:`~db.collection.update()` operation to set the transaction's state to ``committed``:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:218
#: ../source/tutorial/perform-two-phase-commits.txt:263
# 94302225849845e7a89543d3a1935603
# 9779964e48b944b49c931b67d6fdd787
msgid "The :method:`~db.collection.find()` operation will return the contents of the ``transactions`` collection, which should now resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:229
# c9dcb56b939949118aecc00477605b56
msgid "Remove Pending Transaction"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:231
# 0c9abdcc1eb24ce2952967bc52f1b357
msgid "Use the following :method:`~db.collection.update()` operation to set remove the pending transaction from the :term:`documents <document>` in the ``accounts`` collection:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:253
# df74dc0e65c24a73a5a1b5a143d54dfb
msgid "Set Transaction State to Done"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:255
# 2547e0371d6540ed8e03863c5ef67a5d
msgid "Complete the transaction by setting the ``state`` of the transaction :term:`document` to ``done``:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:274
# 24aacf66afb147c282cb54fb4f1a490c
msgid "Recovering from Failure Scenarios"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:276
# abb99c61f45a48019685225749e7ecdc
msgid "The most important part of the transaction procedure is not, the prototypical example above, but rather the possibility for recovering from the various failure scenarios when transactions do not complete as intended. This section will provide an overview of possible failures and provide methods to recover from these kinds of events."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:282
# cf63dd7b57bf4165b211e90f1fd3f850
msgid "There are two classes of failures:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:284
# 4e668c13956848dea7b9b9dfa0b6f7e9
msgid "all failures that occur after the first step (i.e. :ref:`setting the transaction set to initial <2-phase-commits-step-1>`) but before the third step (i.e. :ref:`applying the transaction to both accounts <2-phase-commits-step-3>`.)"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:289
# 30f07291c37e4c3ca95172e371c6b6f2
msgid "To recover, applications should get a list of transactions in the ``pending`` state and resume from the second step (i.e. :ref:`switching the transaction state to pending <2-phase-commits-step-2>`.)"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:294
# fb84b2dc5b9e437192d15500603182d6
msgid "all failures that occur after the third step (i.e. :ref:`applying the transaction to both accounts <2-phase-commits-step-3>`) but before the fifth step (i.e. :ref:`setting the transaction state to done <2-phase-commits-step-5>`.)"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:299
# 5272c6ad5ac14da6aafd0b9e4024fb51
msgid "To recover, application should get a list of transactions in the ``committed`` state and resume from the fourth step (i.e. :ref:`remove the pending transaction <2-phase-commits-step-5>`.)"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:304
# f2a8588659ad422585c3f9023ba5bacf
msgid "Thus, the application will always be able to resume the transaction and eventually arrive at a consistent state. Run the following recovery operations every time the application starts to catch any unfinished transactions. You may also wish run the recovery operation at regular intervals to ensure that your data remains in a consistent state."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:310
# ecfe5ac76bdf4e4e8531e231fa470cb9
msgid "The time required to reach a consistent state depends, on how long the application needs to recover each transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:316
# 54d01b6aba08414db4c391338ca71627
msgid "Rollback"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:318
# 546199bb968c4c8d8581a4a2ebabaa33
msgid "In some cases you may need to \"rollback\" or undo a transaction when the application needs to \"cancel\" the transaction, or because it can never recover as in cases where one of the accounts doesn't exist, or stops existing during the transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:323
# 3f98a01ae48e4d0fb4760816e1a1b90a
msgid "There are two possible rollback operations:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:325
# d34a0dd0e01f472da18f160f3d9bece6
msgid "After you :ref:`apply the transaction <2-phase-commits-step-3>` (i.e. the third step), you have fully committed the transaction and you should not roll back the transaction. Instead, create a new transaction and switch the values in the source and destination fields."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:331
# 01533b7e689f4b9283bdf77a653e5066
msgid "After you :ref:`create the transaction <2-phase-commits-step-1>` (i.e. the first step), but before you :ref:`apply the transaction <2-phase-commits-step-3>` (i.e the third step), use the following process:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:339
# 5f3c6a89125d44b5a34255690d3e5d06
msgid "Set Transaction State to Canceling"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:341
# beae8a1921da41eaaeeba3f9236c1621
msgid "Begin by setting the transaction's state to ``canceling`` using the following :method:`~db.collection.update()` operation:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:351
# 7bf78a431f7746428561685a03418b01
msgid "Undo the Transaction"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:353
# 7a6ab5c283fb4c86900f9c7f2c08fefd
msgid "Use the following sequence of operations to undo the transaction operation from both accounts:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:362
# 852effcaff7346fa9828d61859f3d93b
msgid "The :method:`~db.collection.find()` operation will return the contents of the ``accounts`` collection, which should resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:374
# ac4b155000bc41e9b5f9f66790aa1e5e
msgid "Set Transaction State to Canceled"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:376
# f06589ae7e5f499aa778895138eda237
msgid "Finally, use the following :method:`~db.collection.update()` operation to set the transaction's state to ``canceled``:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:386
# d96f46cea36b4351a7ba023e99ddc7f4
msgid "Multiple Applications"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:388
# 4b2a2b34e4b94ddfa515ee3b79d0e774
msgid "Transactions exist, in part, so that several applications can create and run operations concurrently without causing data inconsistency or conflicts. As a result, it is crucial that only one 1 application can handle a given transaction at any point in time."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:393
# 4b016aefe3cc4122a5f040862fd5e7a6
msgid "Consider the following example, with a single transaction (i.e. ``T1``) and two applications (i.e. ``A1`` and ``A2``). If both applications begin processing the transaction which is still in the ``initial`` state (i.e. :ref:`step 1 <2-phase-commits-step-1>`), then:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:398
# 0aae50c6e40e47f5bf79e64f16efb1fc
msgid "``A1`` can apply the entire whole transaction before ``A2`` starts."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:400
# 7cc6c1b4f3fe4855a4d871be6ab97346
msgid "``A2`` will then apply ``T1`` for the second time, because the transaction does not appear as pending in the ``accounts`` documents."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:404
# 866fe121980943fdaffbd48d9cec3ba1
msgid "To handle multiple applications, create a marker in the transaction document itself to identify the application that is handling the transaction. Use :method:`~db.collection.findAndModify()` method to modify the transaction:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:415
# 4a9540650f1d49129adc575491cf9d14
msgid "When you modify and reassign the local shell variable ``t``, the :program:`mongo` shell will return the ``t`` object, which should resemble the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:430
# 68274f483075427ca07f2cd487439fda
msgid "Amend the transaction operations to ensure that only applications that match the identifier in the value of the ``application`` field before applying the transaction."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:434
# 667b4b2b4aee4a33bef928822acb1430
msgid "If the application ``A1`` fails during transaction execution, you can use the :ref:`recovery procedures <2-phase-commits-recovery>`, but applications should ensure that they \"owns\" the transaction before applying the transaction. For example to resume pending jobs, use a query that resembles the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:444
# 301128eda8654a1eaff7b6e3aa482529
msgid "This will (or may) return a document from the ``transactions`` document that resembles the following:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:454
# bb7056cb26e24045ba8fd5cf7cbe538f
msgid "Using Two-Phase Commits in Production Applications"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:456
# 2e873a6367b348f0a6537f2b283d0736
msgid "The example transaction above is intentionally simple. For example, it assumes that:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:459
# 1a3864b8bf01464484f6338c7435f35c
msgid "it is always possible roll back operations on an account."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:461
# ea41930b262e49fc9d3ae4edac60d932
msgid "account balances can hold negative values."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:463
# 811678b1175649709d6d5dddbc9e7e4e
msgid "Production implementations would likely be more complex. Typically accounts need information about current balance, pending credits, pending debits. Then:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:467
# f34635b1eaad4e59bd0212f2cb3cf09e
msgid "when your application :ref:`switches the transaction state to pending <2-phase-commits-step-2>` (i.e. step 2) it would also make sure that the account has sufficient funds for the transaction. During this update operation, the application would also modify the values of the credits and debits as well as adding the transaction as pending."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:474
# a99269e23d7641568544d0cfb24e87d2
msgid "when your application :ref:`removes the pending transaction <2-phase-commits-step-4>` (i.e. step 4) the application would apply the transaction on balance, modify the credits and debits as well as removing the transaction from the ``pending`` field., all in one update."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:479
# ab0b186aff5547c6abe3ce529febae0c
msgid "Because all of the changes in the above two operations occur within a single :method:`~db.collection.update()` operation, these changes are all atomic."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:483
# 45e111f9884445e295afbb52f794dfca
msgid "Additionally, for most important transactions, ensure that:"
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:485
# 8237329bad2e48f4ab01481acd618a2f
msgid "the database interface (i.e. client library or :term:`driver`) has a reasonable :term:`write concern` configured to ensure that operations return a response on the success or failure of a write operation."
msgstr ""

#: ../source/tutorial/perform-two-phase-commits.txt:490
# b3b0d95e1e1443a3971feb71ce9bab96
msgid "your :program:`mongod` instance has :term:`journaling <journal>` enabled to ensure that your data is always in a recoverable state, in the event of an unclean :program:`mongod` shutdown."
msgstr ""

