# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
# aafcd938cdad48ec94942e40d0cc082a
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
# 984b99126b9c4466b670a1e88579711d
msgid "To model hierarchical or nested data relationships, you can use references to implement tree-like structures. The following *Tree* pattern examples model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
# 3e5252c3d5ba4081a933993e864e48a8
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
# e9f727c0e59745f59d77e429835a6706
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
# 8506ed25a72543eb9fa684d46fc69f0e
msgid "The *Child References* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
# 4a61645298aa413e8cee6c894f55d65d
# 97983357b0174cbbbf4a3a2749090d8a
# 97983357b0174cbbbf4a3a2749090d8a
# 97983357b0174cbbbf4a3a2749090d8a
# 97983357b0174cbbbf4a3a2749090d8a
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
# 61bd28a1ac004dc59da66a220bcd2229
msgid "The following example models the tree using *Child References*, storing the reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
# ab4b179706714c80b7f8557ed7586eed
msgid "The query to retrieve the immediate children of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
# 292dd07cb01643de83bc7ab2e7725865
msgid "You can create an index on the field ``children`` to enable fast search by the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
# 4fc7b7d71d5547cda4b79133ea04413c
msgid "You can query for a node in the ``children`` field to find its parent node as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
# f979176beb6749408d479587b69cdf52
msgid "The *Child References* pattern provides a suitable solution to tree storage as long as no operations on subtrees are necessary. This pattern may also provide a suitable solution for storing graphs where a node may have multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
# b1a1033464b241729c21ac2d7c92bcdf
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
# 3c65b072b77446fc885d76deb83b7490
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
# e6146ea1acaf414f9e1b97380d9c6555
msgid "The *Parent References* pattern stores each tree node in a document; in addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
# 9e61dc1428a741d6814835bca67af709
msgid "The following example models the tree using *Parent References*, storing the reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
# f78b5d3654114d76a5205b5bbc40be6e
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
# 691ace6822fd4b008d0bb669bb3ed2be
msgid "You can create an index on the field ``parent`` to enable fast search by the parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
# e5505fd3c3894efba0ecac878d3a86d7
msgid "You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
# 7cd8f23e238746d59c52f5e77c69c159
msgid "The *Parent Links* pattern provides a simple solution to tree storage but requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
# 5138830890f842ab96d25916d2e428c2
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
# 0115d961045d449cb2c18239af1aab98
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
# ab3ebc4c2b784d358991678f528aaf83
msgid "The *Array of Ancestors* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
# 16230872f1aa4ec2b630428606081ec9
msgid "The following example models the tree using *Array of Ancestors*. In addition to the ``ancestors`` field, these documents also store the reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
# dd631a7dd44c458a832b18b4cbd47130
msgid "The query to retrieve the ancestors or path of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
# 0b76424bd96847a19483c4249512582f
msgid "You can create an index on the field ``ancestors`` to enable fast search by the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
# 8a4a436e2b534198b339c21bb8bd089c
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
# c6289ef714d64f459397d96b989af8a1
msgid "The *Array of Ancestors* pattern provides a fast and efficient solution to find the descendants and the ancestors of a node by creating an index on the elements of the ancestors field. This makes *Array of Ancestors* a good choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
# a79c03a83e8b40e9b686b07abb7a798c
msgid "The *Array of Ancestors* pattern is slightly slower than the :doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
# 2e54dea7b3f542ff9ce14826c0b35657
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
# 905fbfe096c64be884312e5e377fa2e4
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
# 10110ea7cf134e1b9ca59262349b98e2
msgid "The *Materialized Paths* pattern stores each tree node in a document; in addition to the tree node, document stores as a string the id(s) of the node's ancestors or path. Although the *Materialized Paths* pattern requires additional steps of working with strings and regular expressions, the pattern also provides more flexibility in working with the path, such as finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
# a18e814f5aee4047b602caa220ef559c
msgid "The following example models the tree using *Materialized Paths*, storing the path in the field ``path``; the path string uses the comma ``,`` as a delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
# 7306955242b04c01bd982f067cda0c4f
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
# 708b2e190691459795eecdcbbab27a1d
msgid "You can use regular expressions on the ``path`` field to find the descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
# c5d8f7de454d466e9f437dffa4196673
msgid "You can also retrieve the descendants of ``Books`` where the ``Books`` is also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
# 95a371d6403a43988288673527ab9d8e
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
# 76ae194e00ac46d8a304e501e3062c3c
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
# e804090b99bc42698b086643cea90943
msgid "For queries of the ``Books`` sub-tree (e.g. ``/^,Books,/``) an index on the ``path`` field improves the query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
# c8a932674aaf43f5ae96f53954954279
msgid "For queries of the ``Programming`` sub-tree (e.g. ``/,Programming,/``), or similar queries of sub-tress, where the node might be in the middle of the indexed string, the query must inspect the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
# 3da975148b0c4b45966e7bd1d42f61c8
msgid "For these queries an index *may* provide some performance improvement *if* the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
# 2120a5cc3639471c9f5ee0cafe2f5d85
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
# e309373c1445458caabf51b07fbfd67d
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
# de5ce4b32ce24cd8888db38468e6aad8
msgid "The *Nested Sets* pattern identifies each node in the tree as stops in a round-trip traversal of the tree. The application visits each node in the tree twice; first during the initial trip, and second during the return trip. The *Nested Sets* pattern stores each tree node in a document; in addition to the tree node, document stores the id of node's parent, the node's initial stop in the ``left`` field, and its return stop in the ``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
# 6607550e1f9149e6b47426c6bf85f8de
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
# f732a4263b0a4e6cbe779e54fba6e582
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
# 07a1b5a70cfb456bb1a7a000faafc747
msgid "The *Nested Sets* pattern provides a fast and efficient solution for finding subtrees but is inefficient for modifying the tree structure. As such, this pattern is best for static trees that do not change."
msgstr ""

