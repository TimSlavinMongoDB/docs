# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:3
# 185ad301920948688decc9206d4af2c5
msgid "Back Up and Restore with MongoDB Tools"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:7
# 8e2644ee58414d6bb3b0d0940d1459ad
msgid "This document describes the process for writing the entire contents of your MongoDB instance to a file in a binary format. If disk-level snapshots are not available, this approach provides the best option for full system database backups. If your system has disk level snapshot capabilities, consider the backup methods described in :doc:`/tutorial/backup-and-restore-with-filesystem-snapshots`."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:14
# a6a5b0f69ea94962b893be18fc5b5c55
msgid ":doc:`/core/backups`, :doc:`/reference/program/mongodump`, and :doc:`/reference/program/mongorestore`."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:21
# fb9b263fb271425faeb4cc1a0f472937
msgid "Backup a Database with ``mongodump``"
msgstr ""

#: ../source/includes/fact-mongodump-local-database.rst:1
# 1324a83f93974923a60a68794cd3ba62
msgid ":program:`mongodump` does *not* dump the content of the ``local`` database."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:26
# 3139fab2653a498e9dce7f1895694973
msgid "Basic ``mongodump`` Operations"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:28
# 6ab45978e85f42b89d7a688eb005c0ef
msgid "The :program:`mongodump` utility can back up data by either:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:30
# 639462c437c548dcbebd2d827a705407
msgid "connecting to a running :program:`mongod` or :program:`mongos` instance, or"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:33
# 1bee6d021c164521ad57f4d9371c8042
msgid "accessing data files without an active instance."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:35
# 5f117200956b48009a94a9bf907a7da8
msgid "The utility can create a backup for an entire server, database or collection, or can use a query to backup just part of a collection."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:38
# 9d0b5163def545efa9c5ba6a2914f9d4
msgid "When you run :program:`mongodump` without any arguments, the command connects to the MongoDB instance on the local system (e.g. ``127.0.0.1`` or ``localhost``) on port ``27017`` and creates a database backup named ``dump/`` in the current directory."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:43
# 4cea88b131eb471ea1c42185eec38506
msgid "To backup data from a :program:`mongod` or :program:`mongos` instance running on the same machine and on the default port of ``27017`` use the following command:"
msgstr ""

#: ../source/includes/warning-mongodump-compatibility-2.2.rst:3
# 3b1db4df4e7649a8aada77bccc85b6cf
msgid "The data format used by :program:`mongodump` from version 2.2 or later is *incompatible* with earlier versions of :program:`mongod`. Do not use recent versions of :program:`mongodump` to back up older data stores."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:53
# 8b59f6500cd948159841ce2938da7a66
msgid "To limit the amount of data included in the database dump, you can specify :option:`--db <mongodump --db>` and :option:`--collection <mongodump --collection>` as options to the :program:`mongodump` command. For example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:66
# 2855eb5815054812ab3ef133df31ce69
msgid ":program:`mongodump` will write :term:`BSON` files that hold a copy of data accessible via the :program:`mongod` listening on port ``27017`` of the ``mongodb.example.net`` host."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:74
# 8fa4bd209b274a47830fc2cbec88b61c
msgid "This command creates a dump of the collection named ``collection`` from the database ``test`` in a :file:`dump/` subdirectory of the current working directory."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:79
# 0e8b40a5ac714e0c95277dfb8e81bf5a
msgid "Point in Time Operation Using Oplogs"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:81
# 14036074bf8d41a3b9db6978b71c64fe
msgid "Use the :option:`--oplog <mongodump --oplog>` option with :program:`mongodump` to collect the :term:`oplog` entries to build a point-in-time snapshot of a database within a replica set. With :option:`--oplog <mongodump --oplog>`, :program:`mongodump` copies all the data from the source database as well as all of the :term:`oplog` entries from the beginning of the backup procedure to until the backup procedure completes. This backup procedure, in conjunction with :option:`mongorestore --oplogReplay <mongorestore --oplogReplay>`, allows you to restore a backup that reflects the specific moment in time that corresponds to when :program:`mongodump` completed creating the dump file."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:93
# be9900a9ed1c44e0a71d9cee75131366
msgid "Create Backups Without a Running ``mongod`` Instance"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:95
# 72abd9a5d9184882afbcea1ea63db501
msgid "If your MongoDB instance is not running, you can use the :option:`--dbpath <mongodump --dbpath>` option to specify the location to your MongoDB instance's database files. :program:`mongodump` reads from the data files directly with this operation. This locks the data directory to prevent conflicting writes. The :program:`mongod` process must *not* be running or attached to these data files when you run :program:`mongodump` in this configuration. Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:0
#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:0
# a0fcb5c9e9584a568cd434c55fdbdebd
# e307d73739cd4251ad822c1f219bc73b
msgid "Example"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:106
# 01a5aa59ed3147c7b5f821204bb784b6
msgid "Given a MongoDB instance that contains the ``customers``, ``products``, and ``suppliers`` databases, the following :program:`mongodump` operation backs up the databases using the :option:`--dbpath <mongodump --dbpath>` option, which specifies the location of the database files on the host:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:116
# 987bf6af8f834c31b988bcee7b071b0a
msgid "The :option:`--out <mongodump --out>` option allows you to specify the directory where :program:`mongodump` will save the backup. :program:`mongodump` creates a separate backup directory for each of the backed up databases: :file:`dataout/customers`, :file:`dataout/products`, and :file:`dataout/suppliers`."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:123
# 982dd30244894abd881eff4b272b7dc5
msgid "Create Backups from Non-Local ``mongod`` Instances"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:125
# aced0e3ecb9345d1972538ab235113a4
msgid "The :option:`--host <mongodump --host>` and :option:`--port <mongodump --port>` options for :program:`mongodump` allow you to connect to and backup from a remote host. Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:134
# 9d0a96468b6344a292cfe49b356bbc3d
msgid "On any :program:`mongodump` command you may, as above, specify username and password credentials to specify database authentication."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:140
# 32bd9364876e4405b8fd365bfde7aedc
msgid "Restore a Database with ``mongorestore``"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:142
# 28829ef24ac649a88e837ea4ebe4d198
msgid "The :program:`mongorestore` utility restores a binary backup created by :program:`mongodump`. By default, :program:`mongorestore` looks for a database backup in the :file:`dump/` directory."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:146
# c5aebe0cbb5f42cb8daa5582b34d3607
msgid "The :program:`mongorestore` utility can restore data either by:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:148
# 5a29deb4779c4992af9398d90438f783
msgid "connecting to a running :program:`mongod` or :program:`mongos` directly, or"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:151
# afe297a64ad7431ea9d9d1e507dc1b0d
msgid "writing to a set of MongoDB data files without use of a running :program:`mongod`."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:154
# 7740f007b26541afb8952ed22a13961e
msgid ":program:`mongorestore` can restore either an entire database backup or a subset of the backup."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:157
# c32f0a8c3d9a4e488451028cd4ed87e4
msgid "To use :program:`mongorestore` to connect to an active :program:`mongod` or :program:`mongos`, use a command with the following prototype form:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:164
# 25b7b18a4240450a9ffca19991121089
msgid "To use :program:`mongorestore` to write to data files without using a running :program:`mongod`, use a command with the following prototype form:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:172
#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:271
# 57d7472fa08f4e269407f9f7f7e86811
# b75fc37e12f243d08c4cb2c7ad679e1b
msgid "Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:178
# 1ca86b890bda4865a3413fa174555ca6
msgid "Here, :program:`mongorestore` imports the database backup in the :file:`dump-2012-10-25` directory to the :program:`mongod` instance running on the localhost interface."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:185
# 9d90cfc3d786436c9fd1f99f95330e48
msgid "Restore Point in Time Oplog Backup"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:187
# 0be5180f72654f76819b991c8564f7fc
msgid "If you created your database dump using the :option:`--oplog <mongodump --oplog>` option to ensure a point-in-time snapshot, call :program:`mongorestore` with the :option:`--oplogReplay <mongorestore --oplogReplay>` option, as in the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:197
# 50cbf79499b84f138f3f53290901eead
msgid "You may also consider using the :option:`mongorestore --objcheck` option to check the integrity of objects while inserting them into the database, or you may consider the :option:`mongorestore --drop` option to drop each collection from the database before restoring from backups."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:206
# 52dff9d2d9954a02aa721eac090da272
msgid "Restore a Subset of data from a Binary Database Dump"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:208
# eb584a345a9543868a083146b8845d52
msgid ":program:`mongorestore` also includes the ability to a filter to all input before inserting it into the new database. Consider the following example:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:216
# 351f2cf0e6d546eeab326ca2aeddaac9
msgid "Here, :program:`mongorestore` only adds documents to the database from the dump located in the :file:`dump/` folder *if* the documents have a field name ``field`` that holds a value of ``1``. Enclose the filter in single quotes (e.g. ``'``) to prevent the filter from interacting with your shell environment."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:225
# ea7263a10935490da8137acdb5c6a127
msgid "Restore Without a Running ``mongod``"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:227
# d9d7450755d24eadaa8f15f8f2e06bd5
msgid ":program:`mongorestore` can write data to MongoDB data files without needing to connect to a :program:`mongod` directly."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:232
# 14fe13627da3425f9ec2187c9a71d702
msgid "Given a set of backed up databases in the ``/data/backup/`` directory:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:234
# 67fe367c1a4c4692bef1c7aab04650e0
msgid ":file:`/data/backup/customers`,"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:235
# 3a88102de2c5423ea09204b311d037e1
msgid ":file:`/data/backup/products`, and"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:236
# c9d395df0ddb45cabae29acf6bfef607
msgid ":file:`/data/backup/suppliers`"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:238
# f387155fe3f249ea89725d9eb560c70e
msgid "The following :program:`mongorestore` command restores the ``products`` database. The command uses the :option:`--dbpath <mongorestore --dbpath>` option to specify the path to the MongoDB data files:"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:247
# abd26eb901f748109665db82842bcf93
msgid "The :program:`mongorestore` imports the database backup in the :file:`/data/backup/products` directory to the :program:`mongod` instance that runs on the localhost interface. The :program:`mongorestore` operation imports the backup even if the :program:`mongod` is not running."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:253
# f4c0c2fb03004bae986b65e018842b0f
msgid "The :option:`--journal <mongorestore --journal>` option ensures that :program:`mongorestore` records all operation in the durability :term:`journal`. The journal prevents data file corruption if anything (e.g. power failure, disk failure, etc.) interrupts the restore operation."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:259
# cfdc6c15c10e4724afbe48a768aced5c
msgid ":doc:`/reference/program/mongodump` and :doc:`/reference/program/mongorestore`."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:263
# d7a802eb7b3c40358909c4be50b22c99
msgid "Restore Backups to Non-Local ``mongod`` Instances"
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:265
# e77fc554b1c640daa758e141db1caaa8
msgid "By default, :program:`mongorestore` connects to a MongoDB instance running on the localhost interface (e.g. ``127.0.0.1``) and on the default port (``27017``). If you want to restore to a different host or port, use the :option:`--host <mongorestore --host>` and :option:`--port <mongorestore --port>` options."
msgstr ""

#: ../source/tutorial/backup-and-restore-with-binary-database-dumps.txt:277
# d092f5f1f9eb4e6fa1bd221ce39e773f
msgid "As above, you may specify username and password connections if your :program:`mongod` requires authentication."
msgstr ""

