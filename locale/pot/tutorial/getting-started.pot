# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/getting-started.txt:3
# 772207ef11bf4c15bba2c1b2af0b848e
msgid "Getting Started with MongoDB"
msgstr ""

#: ../source/tutorial/getting-started.txt:0
# 866d8620388b4ed58cd506ed7887af99
msgid "This tutorial addresses the following aspects of MongoDB use:"
msgstr ""

#: ../source/tutorial/getting-started.txt:13
# cf10b04b9d9f4128a3b2cedb4e1bfe70
msgid "This tutorial provides an introduction to basic database operations using the :program:`mongo` shell. :program:`mongo` is a part of the standard MongoDB distribution and provides a full JavaScript environment with a complete access to the JavaScript language and all standard functions as well as a full database interface for MongoDB. See the :api:`mongo JavaScript API <js>` documentation and the :program:`mongo` shell :doc:`JavaScript Method Reference </reference/method>`."
msgstr ""

#: ../source/tutorial/getting-started.txt:21
# 6e141521d2714a8f8ad71dbaf5ac345e
msgid "The tutorial assumes that you're running MongoDB on a Linux or OS X operating system and that you have a running database server; MongoDB does support Windows and provides a Windows distribution with identical operation. For instructions on installing MongoDB and starting the database server, see the appropriate :doc:`installation </installation>` document."
msgstr ""

#: ../source/tutorial/getting-started.txt:29
# d2e978dbcffc4307afffd57fbd8a11cb
msgid "Connect to a Database"
msgstr ""

#: ../source/tutorial/getting-started.txt:31
# f936e397092c4e4e8574042d5670ec0f
msgid "In this section, you connect to the database server, which runs as :program:`mongod`, and begin using the :program:`mongo` shell to select a logical database within the database instance and access the help text in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/getting-started.txt:37
# d377323b5812461a874bb38d97cd9b29
msgid "Connect to a :program:`mongod`"
msgstr ""

#: ../source/tutorial/getting-started.txt:39
# 8e1a59e97fbd4b7b8c27df95c74073af
msgid "From a system prompt, start :program:`mongo` by issuing the :program:`mongo` command, as follows:"
msgstr ""

#: ../source/tutorial/getting-started.txt:46
# cecfd7701b5c4e27833828229f7b02a1
msgid "By default, :program:`mongo` looks for a database server listening on port ``27017`` on the ``localhost`` interface. To connect to a server on a different port or interface, use the :option:`--port <mongo --port>` and :option:`--host <mongo --host>` options."
msgstr ""

#: ../source/tutorial/getting-started.txt:53
# de917fd00be646f9bfb5ec758e208cda
msgid "Select a Database"
msgstr ""

#: ../source/tutorial/getting-started.txt:55
# 1bf39d6eabe84a3eb69b79e28d39d09e
msgid "After starting the :program:`mongo` shell your session will use the ``test`` database by default. At any time, issue the following operation at the :program:`mongo` to report the name of the current database:"
msgstr ""

#: ../source/tutorial/getting-started.txt:63
# 2ec59d86f95d419ba33f41dcdf053c1d
msgid "From the :program:`mongo` shell, display the list of databases, with the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:70
# 4e3df95979184be0998430809c8887ec
msgid "Switch to a new database named ``mydb``, with the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:77
# d759fd06db5746c3b5500185c095801b
msgid "Confirm that your session has the ``mydb`` database as context, by checking the value of the ``db`` object, which returns the name of the current database, as follows:"
msgstr ""

#: ../source/tutorial/getting-started.txt:85
# 51b8ed99c6e5426094ab7dae1141e233
msgid "At this point, if you issue the ``show dbs`` operation again, it will not include the ``mydb`` database. MongoDB will not permanently create a database until you insert data into that database. The :ref:`getting-started-create-documents` section describes the process for inserting data."
msgstr ""

#: ../source/tutorial/getting-started.txt:91
# 9e4714cc6e56404399876b4dac494dab
msgid "``show databases`` also returns a list of databases."
msgstr ""

#: ../source/tutorial/getting-started.txt:95
# 5bdc23edc6a3429295645f265b0ac767
msgid "Display ``mongo`` Help"
msgstr ""

#: ../source/tutorial/getting-started.txt:97
# 8b40f92a8e184b49a788e32434af4b10
msgid "At any point, you can access help for the :program:`mongo` shell using the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:104
# baac020cffb640c39bc73b75186c540e
msgid "Furthermore, you can append the ``.help()`` method to some JavaScript methods, any cursor object, as well as the ``db`` and ``db.collection`` objects to return additional help information."
msgstr ""

#: ../source/tutorial/getting-started.txt:111
# 9ffd467be7b24581a429a944181a9762
msgid "Create a Collection and Insert Documents"
msgstr ""

#: ../source/tutorial/getting-started.txt:113
# ad8ca22dc37b4e12988ac9553c564704
msgid "In this section, you insert documents into a new :term:`collection` named ``testData`` within the new :term:`database` named ``mydb``."
msgstr ""

#: ../source/tutorial/getting-started.txt:117
# cc7d842e55da40d8a824364825f0117b
msgid "MongoDB will create a collection implicitly upon its first use. You do not need to create a collection before inserting data. Furthermore, because MongoDB uses :ref:`dynamic schemas <faq-schema-free>`, you also need not specify the structure of your documents before inserting them into the collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:123
# 257f7b59e80746eda4b21baa498bddd4
msgid "From the :program:`mongo` shell, confirm you are in the ``mydb`` database by issuing the following:"
msgstr ""

#: ../source/tutorial/getting-started.txt:130
# 43fb2c05cf7c48e0bf15cdf854f452ed
msgid "If :program:`mongo` does not return ``mydb`` for the previous operation, set the context to the ``mydb`` database, with the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:138
# b2e04abb597b4a029172269e7f232c20
msgid "Create two documents named ``j`` and ``k`` by using the following sequence of JavaScript operations:"
msgstr ""

#: ../source/tutorial/getting-started.txt:146
# f19691c133b847ceb6b441364e5740f1
msgid "Insert the ``j`` and ``k`` documents into the ``testData`` collection with the following sequence of operations:"
msgstr ""

#: ../source/tutorial/getting-started.txt:154
# 0a6c83674c4849069ff939545ada00c9
msgid "When you insert the first document, the :program:`mongod` will create both the ``mydb`` database and the ``testData`` collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:157
# 869cbcdc9c1f4d38bb52869a0985c949
msgid "Confirm that the ``testData`` collection exists. Issue the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:164
# c48569d293c840be8673aa3836b7ecf8
msgid "The :program:`mongo` shell will return the list of the collections in the current (i.e. ``mydb``) database. At this point, the only collection is ``testData``. All :program:`mongod` databases also have a :data:`system.indexes <<database>.system.indexes>` collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:169
# 0d47b121c2f041f0b1453c986c9d92fc
msgid "Confirm that the documents exist in the ``testData`` collection by issuing a query on the collection using the :method:`~db.collection.find()` method:"
msgstr ""

#: ../source/tutorial/getting-started.txt:177
# 38de18a06e304a24a42e20bc67c21605
msgid "This operation returns the following results. The :doc:`ObjectId </reference/object-id>` values will be unique:"
msgstr ""

#: ../source/tutorial/getting-started.txt:185
# 3924d2184deb4051b8d5c03891b9d8ba
msgid "All MongoDB documents must have an ``_id`` field with a unique value.  These operations do not explicitly specify a value for the ``_id`` field, so :program:`mongo` creates a unique :doc:`ObjectId </reference/object-id>` value for the field before inserting it into the collection."
msgstr ""

#: ../source/tutorial/getting-started.txt:192
# dfbc14c90233422095c33aebe85d2b8a
msgid "Insert Documents using a For Loop or a JavaScript Function"
msgstr ""

#: ../source/tutorial/getting-started.txt:194
# 9320cba07cdf408b8e9d0e28f2244231
msgid "To perform the remaining procedures in this tutorial, first add more documents to your database using one or both of the procedures described in :doc:`/tutorial/generate-test-data`."
msgstr ""

#: ../source/tutorial/getting-started.txt:199
# db3cc61e095e4208b8f2dd68c1e4cdf5
msgid "Working with the Cursor"
msgstr ""

#: ../source/tutorial/getting-started.txt:201
# fe288e055bb34acab90ea10b57cd3877
msgid "When you query a :term:`collection`, MongoDB returns a \"cursor\" object that contains the results of the query. The :program:`mongo` shell then iterates over the cursor to display the results. Rather than returning all results at once, the shell iterates over the cursor 20 times to display the first 20 results and then waits for a request to iterate over the remaining results. In the shell, use enter ``it`` to iterate over the next set of results."
msgstr ""

#: ../source/tutorial/getting-started.txt:209
# 428dc76093964f3ca55ca459e6c6ff1a
msgid "The procedures in this section show other ways to work with a cursor. For comprehensive documentation on cursors, see :ref:`crud-read-cursor`."
msgstr ""

#: ../source/tutorial/getting-started.txt:214
# 88daab3087004e9ca0f3b0a24f5b6895
msgid "Iterate over the Cursor with a Loop"
msgstr ""

#: ../source/tutorial/getting-started.txt:216
# e7a9a72076a34100bbfe21b9d4929092
msgid "Before using this procedure, make sure to add at least 25 documents to a collection using one of the procedures in :doc:`/tutorial/generate-test-data`. You can name your database and collections anything you choose, but this procedure will assume the database named ``test`` and a collection named ``testData``."
msgstr ""

#: ../source/tutorial/getting-started.txt:222
# f1dfdb7150164191a093cd8eea1b103d
msgid "In the MongoDB JavaScript shell, query the ``testData`` collection and assign the resulting cursor object to the ``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:229
# f30efdd8e63a4516a4be616dd8a7df95
msgid "Print the full result set by using a ``while`` loop to iterate over the ``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:236
# e748c83d82914662a361c20c116068b5
msgid "The ``hasNext()`` function returns true if the cursor has documents. The ``next()`` method returns the next document. The ``printjson()`` method renders the document in a JSON-like format."
msgstr ""

#: ../source/tutorial/getting-started.txt:240
# e99374fdc6834cf3abb52c63c4e57cca
msgid "The operation displays 20 documents. For example, if the documents have a single field named ``x``, the operation displays the field as well as each document's ``ObjectId``:"
msgstr ""

#: ../source/tutorial/getting-started.txt:268
# 9da732df6b55432b92943e8eb0ff2c20
msgid "Use Array Operations with the Cursor"
msgstr ""

#: ../source/tutorial/getting-started.txt:270
# 2d056e4b39604441bf44f2806c0cf679
msgid "The following procedure lets you manipulate a cursor object as if it were an array:"
msgstr ""

#: ../source/tutorial/getting-started.txt:273
# 4f891d683c724c7495f2b2834106c974
msgid "In the :program:`mongo` shell, query the ``testData`` collection and assign the resulting cursor object to the ``c`` variable:"
msgstr ""

#: ../source/tutorial/getting-started.txt:280
# 528ede85ea904ecdb2d624401ba2cf8d
msgid "To find the document at the array index ``4``, use the following operation:"
msgstr ""

#: ../source/tutorial/getting-started.txt:287
# dc69e50e5e3b4f258c1b01ede6d95371
msgid "MongoDB returns the following:"
msgstr ""

#: ../source/tutorial/getting-started.txt:293
# e0dd20d65dc04bd7b7a09e3d99f3863c
msgid "When you access documents in a cursor using the array index notation, :program:`mongo` first calls the ``cursor.toArray()`` method and loads into RAM all documents returned by the cursor. The index is then applied to the resulting array. This operation iterates the cursor completely and exhausts the cursor."
msgstr ""

#: ../source/tutorial/getting-started.txt:299
# 05310b02a8714961aeb051e8744dc772
msgid "For very large result sets, :program:`mongo` may run out of available memory."
msgstr ""

#: ../source/tutorial/getting-started.txt:302
# 43a83853dded4fe39fde4236d2665573
msgid "For more information on the cursor, see :ref:`crud-read-cursor`."
msgstr ""

#: ../source/tutorial/getting-started.txt:305
# c234c547db8e494d83744835853f80ad
msgid "Query for Specific Documents"
msgstr ""

#: ../source/tutorial/getting-started.txt:307
# d467d3e52ebf4c22881e6ee1008491cc
msgid "MongoDB has a rich query system that allows you to select and filter the documents in a collection along specific fields and values. See :ref:`read-operations-query-document` and :doc:`/core/read-operations` for a full account of queries in MongoDB."
msgstr ""

#: ../source/tutorial/getting-started.txt:312
# 525d24b951084fcbac65a08f148f78c1
msgid "In this procedure, you query for specific documents in the ``testData`` :term:`collection` by passing a \"query document\" as a parameter to the :method:`~db.collection.find()` method. A query document specifies the criteria the query must match to return a document."
msgstr ""

#: ../source/tutorial/getting-started.txt:317
# 65ef48c57c714f08ba3054fbc61480fc
msgid "In the :program:`mongo` shell, query for all documents where the ``x`` field has a value of ``18`` by passing the ``{ x : 18 }`` query document as a parameter to the :method:`~db.collection.find()` method:"
msgstr ""

#: ../source/tutorial/getting-started.txt:325
# b30d2a49a0ea42578c41b214dada77d3
msgid "MongoDB returns one document that fits this criteria:"
msgstr ""

#: ../source/tutorial/getting-started.txt:332
# 7a535670b6c4456297067b4a0c2359fb
msgid "Return a Single Document from a Collection"
msgstr ""

#: ../source/tutorial/getting-started.txt:334
# 5949ed4ef85b4cb385db0780a956e4b9
msgid "With the :method:`~db.collection.findOne()` method you can return a single *document* from a MongoDB collection. The :method:`~db.collection.findOne()` method takes the same parameters as :method:`~db.collection.find()`, but returns a document rather than a cursor."
msgstr ""

#: ../source/tutorial/getting-started.txt:339
# 7e6b1c6d48fb46809cdd6f51057b79cc
msgid "To retrieve one document from the ``testData`` collection, issue the following command:"
msgstr ""

#: ../source/tutorial/getting-started.txt:346
# ef87bdae64d74574a6ff9c47af8a65ab
msgid "For more information on querying for documents, see the :ref:`read-operations-query-document` and :doc:`/core/read-operations` documentation."
msgstr ""

#: ../source/tutorial/getting-started.txt:350
# 149c35f2a49849a4aab011f8044f57c2
msgid "Limit the Number of Documents in the Result Set"
msgstr ""

#: ../source/tutorial/getting-started.txt:352
# c3dcd6dd7edd4df2a4d68c777c343784
msgid "To increase performance, you can constrain the size of the result by limiting the amount of data your application must receive over the network."
msgstr ""

#: ../source/tutorial/getting-started.txt:356
# 2e21441134704b7882dacba118613901
msgid "To specify the maximum number of documents in the result set, call the :method:`~cursor.limit()` method on a cursor, as in the following command:"
msgstr ""

#: ../source/tutorial/getting-started.txt:364
# 0353df156a9345ba906d9a07372750bb
msgid "MongoDB will return the following result, with different :doc:`ObjectId </reference/object-id>` values:"
msgstr ""

#: ../source/tutorial/getting-started.txt:376
# 1ca927a48daa468d8a02bce63410232c
msgid "Next Steps with MongoDB"
msgstr ""

#: ../source/tutorial/getting-started.txt:378
# 8d9fa8e604b744f4b90249a2d810e03a
msgid "For more information on manipulating the documents in a database as you continue to learn MongoDB, consider the following resources:"
msgstr ""

#: ../source/tutorial/getting-started.txt:381
# 3e3f682dc1364748a14d8b014080f020
msgid ":doc:`/crud`"
msgstr ""

#: ../source/tutorial/getting-started.txt:382
# 5fdc36cf8dbd41bd889ba094143b7867
msgid ":doc:`/reference/sql-comparison`"
msgstr ""

#: ../source/tutorial/getting-started.txt:383
# 9fd8e618b1d7461e82b08406095bae7c
msgid ":doc:`/applications/drivers`"
msgstr ""

