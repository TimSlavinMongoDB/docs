# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
# 75d52cea7fe148bd8da5a0bf66a696bb
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:0
# 2c42085c7a8a4e91a59aed17aad3ae38
msgid "Frequently Asked Questions:"
msgstr ""

#: ../source/faq/storage.txt:11
# 9053397b7a9e43c38e8223541957307d
msgid "This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:14
# 58eef34e9d684a2ab934133e3c917c61
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/storage.txt:21
# 725e8701348140cfa119427c19f3b456
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:23
# 921987e0f00e4ce09dde671be6b1ed91
msgid "A memory-mapped file is a file with data that the operating system places in memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the file to a region of virtual memory. Memory-mapped files are the critical piece of the storage engine in MongoDB. By using memory mapped files MongoDB can treat the contents of its data files as if they were in memory. This provides MongoDB with an extremely fast and simple method for accessing and manipulating data."
msgstr ""

#: ../source/faq/storage.txt:32
# 227e806148274008bed04217d16e4184
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:34
# 1cf4f94d36c44077826ccc54a6de188d
msgid "Memory mapping assigns files to a block of virtual memory with a direct byte-for-byte correlation. Once mapped, the relationship between file and memory allows MongoDB to interact with the data in the file as if it were memory."
msgstr ""

#: ../source/faq/storage.txt:40
# 8a52e7af51a142ca9496a3e3ae1d1009
msgid "How does MongoDB work with memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:42
# 59e4d1d1649e4baf8811464f05547e64
msgid "MongoDB uses memory mapped files for managing and interacting with all data. MongoDB memory maps data files to memory as it accesses documents. Data that isn't accessed is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:49
# 375b881664a34600b53391ad6456ab22
msgid "What are page faults?"
msgstr ""

#: ../source/faq/storage.txt:51
# 6b5f0cebcb354159b5096096eaf1276d
msgid "Page faults will occur if you're attempting to access part of a memory-mapped file that *isn't* in memory."
msgstr ""

#: ../source/faq/storage.txt:54
# 66a5c95772f14ea887bb6895ba6e48cb
msgid "If there is free memory, then the operating system can find the page on disk and load it to memory directly. However, if there is no free memory, the operating system must:"
msgstr ""

#: ../source/faq/storage.txt:58
# 19a8d90031404e27bb76170c995bee2b
msgid "find a page in memory that is stale or no longer needed, and write the page to disk."
msgstr ""

#: ../source/faq/storage.txt:61
# f9363af537ba45a987332dbe57309a04
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:63
# 59634ac510dc4a859cc923b887e1d2cd
msgid "This process, particularly on an active system can take a long time, particularly in comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:68
# 9b069b01b3124b618f474f19c97fe728
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:70
# d67c175ebfab418ca0ce20f1702de03f
msgid ":term:`Page faults <page fault>` occur when MongoDB needs access to data that isn't currently in active memory. A \"hard\" page fault refers to situations when MongoDB must access a disk to access the data. A \"soft\" page fault, by contrast, merely moves memory pages from one list to another, such as from an operating system file cache. In production, MongoDB will rarely encounter soft page faults."
msgstr ""

#: ../source/faq/storage.txt:80
# a51bbd71e9174332bf3cd7de63575148
msgid "What tools can I use to investigate storage use in MongoDB?"
msgstr ""

#: ../source/faq/storage.txt:82
# e4a627a8298e4e2eb881dd9e1bc47bd3
msgid "The :method:`db.stats()` method in the :program:`mongo` shell, returns the current state of the \"active\" database. The :doc:`dbStats command </reference/command/dbStats>` document describes the fields in the :method:`db.stats()` output."
msgstr ""

#: ../source/faq/storage.txt:90
# 9a5d462769fe4a5695e265baecf5a79e
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:92
# ddc5b38a0cf44a25a655fb941f97407e
msgid "Working set represents the total body of data that the application uses in the course of normal operation. Often this is a subset of the total data size, but the specific size of the working set depends on actual moment-to-moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:97
# 411d5b7778014805b992c5b53687da32
msgid "If you run a query that requires MongoDB to scan every document in a collection, the working set will expand to include every document. Depending on physical memory size, this may cause documents in the working set to \"page out,\" or to be removed from physical memory by the operating system. The next time MongoDB needs to access these documents, MongoDB may incur a hard page fault."
msgstr ""

#: ../source/faq/storage.txt:104
# b2014c2c37174ebba15ebd713af8f7b3
msgid "If you run a query that requires MongoDB to scan every :term:`document` in a collection, the working set includes every active document in memory."
msgstr ""

#: ../source/faq/storage.txt:108
# 6069906c57174c42af7289b306872594
msgid "For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:114
# 25ac21d87e80432687c04acbd12fab9a
msgid "Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:116
# 019fc910ba4a49dcb10babee19d48d57
msgid "The data files in your data directory, which is the :file:`/data/db` directory in default configurations, might be larger than the data set inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:120
# f8ad380df3e442d3938f7a2b40930806
msgid "Preallocated data files."
msgstr ""

#: ../source/faq/storage.txt:122
# fe7dd991ae4c4c69bb0278096655ccdf
msgid "In the data directory, MongoDB preallocates data files to a particular size, in part to prevent file system fragmentation. MongoDB names the first data file ``<databasename>.0``, the next ``<databasename>.1``, etc. The first file :program:`mongod` allocates is 64 megabytes, the next 128 megabytes, and so on, up to 2 gigabytes, at which point all subsequent files are 2 gigabytes. The data files include files with allocated space but that hold no data. :program:`mongod` may allocate a 1 gigabyte data file that may be 90% empty. For most larger databases, unused allocated space is small compared to the database."
msgstr ""

#: ../source/faq/storage.txt:133
# 807a1b1a4f124ffc8829c258c9aef0fe
msgid "On Unix-like systems, :program:`mongod` preallocates an additional data file and initializes the disk space to ``0``.  Preallocating data files in the background prevents significant delays when a new database file is next allocated."
msgstr ""

#: ../source/faq/storage.txt:138
# ed2d21f577ec4e829d47b4f10237341f
msgid "You can disable preallocation with the :setting:`noprealloc` run time option. However :setting:`noprealloc` is **not** intended for use in production environments: only use :setting:`noprealloc` for testing and with small data sets where you frequently drop databases."
msgstr ""

#: ../source/faq/storage.txt:143
# d918b38b00f04f5791eeb14f13ac8176
msgid "On Linux systems you can use ``hdparm`` to get an idea of how costly allocation might be:"
msgstr ""

#: ../source/faq/storage.txt:150
# 7e3fddf8e22847abb60fa0dd8fbbac8a
msgid "The :term:`oplog`."
msgstr ""

#: ../source/faq/storage.txt:152
# a56e841c19e04c428ad177405e919c17
msgid "If this :program:`mongod` is a member of a replica set, the data directory includes the :term:`oplog.rs <oplog>` file, which is a preallocated :term:`capped collection` in the ``local`` database. The default allocation is approximately 5% of disk space on 64-bit installations, see :ref:`Oplog Sizing <replica-set-oplog-sizing>` for more information. In most cases, you should not need to resize the oplog. However, if you do, see :doc:`/tutorial/change-oplog-size`."
msgstr ""

#: ../source/faq/storage.txt:161
# a4254bcd4e1e4321a9aab3af621e625f
msgid "The :term:`journal`."
msgstr ""

#: ../source/faq/storage.txt:163
# 3f6a918c1a684fd6bdc4f0e547163d97
msgid "The data directory contains the journal files, which store write operations on disk prior to MongoDB applying them to databases. See :doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:167
# edc800f07cd543d3891d48f1952e7ba7
msgid "Empty records."
msgstr ""

#: ../source/faq/storage.txt:169
# 76e11e1fbbcd4f5e90576c6e82c30fb8
msgid "MongoDB maintains lists of empty records in data files when deleting documents and collections. MongoDB can reuse this space, but will never return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:173
# b6d998928b5a4f0ea8c9de0d199843bc
msgid "To de-fragment allocated storage, use :dbcommand:`compact`, which de-fragments allocated space. By de-fragmenting storage, MongoDB can effectively use the allocated space. :dbcommand:`compact` requires up to 2 gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if you are critically low on disk space."
msgstr ""

#: ../source/faq/storage.txt:179
# 561f2353b191458aad676ebd4bd8c7c3
msgid ":dbcommand:`compact` only removes fragmentation from MongoDB data files and does not return any disk space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:183
# d22cdd2d328b48f6b8bb0dbd1c709418
msgid "To reclaim deleted space, use :dbcommand:`repairDatabase`, which rebuilds the database which de-fragments the storage and may release space to the operating system. :dbcommand:`repairDatabase` requires up to 2 gigabytes of extra disk space to run. Do not use :dbcommand:`repairDatabase` if you are critically low on disk space."
msgstr ""

#: ../source/faq/storage.txt:190
# 8d17e8938aab4868a47f7d89db26d1a7
msgid ":dbcommand:`repairDatabase` requires enough free disk space to hold both the old and new database files while the repair is running. Be aware that :dbcommand:`repairDatabase` will block all other operations and may take a long time to complete."
msgstr ""

#: ../source/faq/storage.txt:196
# fda9495655864f698d6a77927c0746bc
msgid "bHow can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:198
# 046121addad642eb99e91791f0ea6e5f
msgid "To view the size of a collection and other information, use the :method:`db.collection.stats()` method from the :program:`mongo` shell. The following example issues :method:`db.collection.stats()` for the ``orders`` collection:"
msgstr ""

#: ../source/faq/storage.txt:207
# 68b102a931d54dc18b3a1f3c9547fa12
msgid "To view specific measures of size, use these methods:"
msgstr ""

#: ../source/faq/storage.txt:209
# 5de69eba837e4ed1aba5e59922f738fc
msgid ":method:`db.collection.dataSize()`: data size in bytes for the collection."
msgstr ""

#: ../source/faq/storage.txt:210
# bc9ab3c1e8a84d71ab1b6ab2322f9267
msgid ":method:`db.collection.storageSize()`: allocation size in bytes, including unused space."
msgstr ""

#: ../source/faq/storage.txt:211
# 8280d4dd1d3149a39c2a68aae01428dc
msgid ":method:`db.collection.totalSize()`: the data size plus the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:212
# 2acdde50b4044653bf6d35a94d59f401
msgid ":method:`db.collection.totalIndexSize()`: the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:214
# 25c6ceddfaf04c82a746cf0b6b6544f4
msgid "Also, the following scripts print the statistics for each database and collection:"
msgstr ""

#: ../source/faq/storage.txt:226
# 2116ab9e21b2490e9f23bd3a7b5e8cda
msgid "How can I check the size of indexes?"
msgstr ""

#: ../source/faq/storage.txt:228
# 68452bd73abb4372a8e29017721afa3a
msgid "To view the size of the data allocated for an index, use one of the following procedures in the :program:`mongo` shell:"
msgstr ""

#: ../source/faq/storage.txt:231
# 079dc68127eb41ad96a5dc2d730fac9b
msgid "Use the :method:`db.collection.stats()` method using the index namespace. To retrieve a list of namespaces, issue the following command:"
msgstr ""

#: ../source/faq/storage.txt:239
# db2ddf72976a4e07a2db252c3e45c6af
msgid "Check the value of :data:`~collStats.indexSizes` in the output of the :method:`db.collection.stats()` command."
msgstr ""

#: ../source/faq/storage.txt:248
# 00b4246c7a464fd68ab1a499981f5773
msgid "The command returns a list similar to the following:"
msgstr ""

#: ../source/faq/storage.txt:256
# 4f1b9f9b919449feb9707f003043b158
msgid "View the size of the data allocated for the ``orders.$_id_`` index with the following sequence of operations:"
msgstr ""

#: ../source/faq/storage.txt:265
# bf8f47ecfe764aadad52208177a777b8
msgid "How do I know when the server runs out of disk space?"
msgstr ""

#: ../source/faq/storage.txt:267
# 41f92e2cfe5c4cc6b88f0e6cf564f9fd
msgid "If your server runs out of disk space for data files, you will see something like this in the log:"
msgstr ""

#: ../source/faq/storage.txt:279
# 8a83dedd799644fe9758c0613a4a3c02
msgid "The server remains in this state forever, blocking all writes including deletes. However, reads still work. To delete some data and compact, using the :dbcommand:`compact` command, you must restart the server first."
msgstr ""

#: ../source/faq/storage.txt:284
# cb222faa80e34a74ae9496f5728a2190
msgid "If your server runs out of disk space for journal files, the server process will exit. By default, :program:`mongod` creates journal files in a sub-directory of :setting:`dbpath` named ``journal``. You may elect to put the journal files on another storage device using a filesystem mount or a symlink."
msgstr ""

#: ../source/faq/storage.txt:292
# 6afda85f5a484b7f86ec1a5961ab7f24
msgid "If you place the journal files on a separate storage device you will not be able to use a file system snapshot tool to capture a valid snapshot of your data files and journal files."
msgstr ""

