# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
# 3f4d82d0401849a7a83a2a58ead37855
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:0
# 253e923d79674e15a3e003c2dce22369
msgid "Frequently Asked Questions:"
msgstr ""

#: ../source/faq/concurrency.txt:14
# 963e2f64a811495585097aba832982d9
msgid "MongoDB allows multiple clients to read and write a single corpus of data using a locking system to ensure that all clients receive the same view of the data *and* to prevent multiple applications from modifying the exact same pieces of data at the same time. Locks help guarantee that all writes to a single document occur either in full or not at all."
msgstr ""

#: ../source/faq/concurrency.txt:21
# 2954bbfdc5f348af9463f1a040da8971
msgid "`Presentation on Concurrency and Internals in 2.2 <http://www.mongodb.com/presentations/concurrency-internals-mongodb-2-2>`_"
msgstr ""

#: ../source/faq/concurrency.txt:26
# 1c08df00c93f4cbc8bfe12c95193fc14
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:28
# 4723d78bbaa74128a5755544e27e2ac4
msgid "MongoDB uses a readers-writer [#multi-reader-lock-names]_ lock that allows concurrent reads access to a database but gives exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:32
# af4d83084d0a4131a8f73220b3913157
msgid "When a read lock exists, many read operations may use this lock. However, when a write lock exists, a single write operation holds the lock exclusively, and no other read *or* write operations may share the lock."
msgstr ""

#: ../source/faq/concurrency.txt:36
# 4066db99bf7f40f791f67a0d9616acf3
msgid "Locks are \"writer greedy,\" which means writes have preference over reads. When both a read and write are waiting for a lock, MongoDB grants the lock to the write."
msgstr ""

#: ../source/faq/concurrency.txt:40
# f57b1f897313446f9bf159445a6bbc8e
msgid "You may be familiar with a \"readers-writer\" lock as \"multi-reader\" or \"shared exclusive\" lock. See the Wikipedia page on `Readers-Writer Locks <http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for more information."
msgstr ""

#: ../source/faq/concurrency.txt:47
# 6873cde15aef44f8af5eadb76734b191
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:51
# 5756cb7f6e76422c916dad3560d78a30
msgid "Beginning with version 2.2, MongoDB implements locks on a per-database basis for most read and write operations. Some global operations, typically short lived operations involving multiple databases, still require a global \"instance\" wide lock. Before 2.2, there is only one \"global\" lock per :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:57
# 99842106ca0746d38e07cbb0c8bd308b
msgid "For example, if you have six databases and one takes a write lock, the other five are still available for read and write."
msgstr ""

#: ../source/faq/concurrency.txt:61
# fbeb53e997e441108db5772d3df2d61b
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:63
# 8c701973f744442680eeae2bbcef2971
msgid "For reporting on lock utilization information on locks, use any of the following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:66
#: ../source/faq/concurrency.txt:162
# 82314b1661984879980fc4ed0907bb2e
# ac72f574343d40598e7a3167ce0d646b
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:67
# 2841e92929fd49c885d873353743141f
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:68
# 81b56ff6cf4d408181726e51dc329157
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:69
# 92f35857d3d5467084eb0ec1458aa41e
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:70
# 8f61de241dd4416b9d9fbbb0a148aa4b
msgid "the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_"
msgstr ""

#: ../source/faq/concurrency.txt:72
# 40b61f3a5b8e48f683315631932e2ebc
msgid "Specifically, the :data:`~serverStatus.locks` document in the :doc:`output of serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field in the :doc:`current operation reporting </reference/method/db.currentOp>` provides insight into the type of locks and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:78
# bd1ed95092b34edaafc115bc113b8e13
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:83
# e77b7012ac2b44ee89409330ef59ac99
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:85
# 395571c31a3c43cfa73e35dd292cf703
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:87
# aa362cc49b9b4d3889f3fd2d0cd21acb
msgid "Long running read and write operations, such as queries, updates, and deletes, yield under many conditions. In MongoDB 2.0, operations yielded based on time slices and the number of operations waiting for the actively held lock. After 2.2, more adaptive algorithms allow operations to yield based on predicted disk access (i.e. page faults)."
msgstr ""

#: ../source/faq/concurrency.txt:93
# a46ebd7aa39449a8aaabffaacea357d7
msgid "Read and write operations will yield their locks if the :program:`mongod` receives a :term:`page fault` *or* fetches data that is unlikely to be in memory. Yielding allows other operations that only need to access documents that are already in memory to complete while :program:`mongod` loads documents into memory."
msgstr ""

#: ../source/faq/concurrency.txt:100
# 335c693b2afc4b09a30da6fbd66c2547
msgid "Additionally, write operations that affect multiple documents (i.e. :method:`~db.collection.update()` with the ``multi`` parameter) will yield periodically to allow read operations during these long write operations. Similarly, long running read locks will yield periodically to ensure that write operations have the opportunity to complete."
msgstr ""

#: ../source/faq/concurrency.txt:107
# e642fb4d12a2497e9b1a9106862409d8
msgid "The use of yielding expanded greatly in MongoDB 2.2. Including the \"yield for page fault.\" MongoDB tracks the contents of memory and predicts whether data is available before performing a read. If MongoDB predicts that the data is not in memory a read operation yields its lock while MongoDB loads the data to memory. Once data is available in memory, the read will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:119
# 766862b691c54861bad10e8d0e02c0c4
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:123
# c0e248b066ae47289ff3a110f3a2a52b
msgid "The following table lists common database operations and the types of locks they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
# 3b28c61681f64705a28582bd1a30a19c
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
# 8c019984fed2462c9d806fde1023cbb2
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
# 4ec514d7984045fbaba73de057961ccf
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:55
# 5ac4b3f7265e42caa79e29396ed5597f
# ae116b5951ab46b3994d9ba664d423b9
# fb0089cb5f3a4bd38bfd16403c8099f8
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
# 83597258f9d84bd0b24e36b04ef05924
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
# 2cf39538a3b84970bfea186c03525aba
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
# f895702ebb13472e97b4ca0c6499cb08
# 5bb53c5706ef4f5e8d02b5d326508847
# 2bd3aabafd3d4a42a0305aa86408905a
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
# ded50bc20047467ebc96157329091a16
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
# 8cccda0bd40e4960ae55703ec058cf8e
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
# 6fbcb87513d14551b5213e28fc97581d
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
# fb5423862385452fa0c44e1e43e05d04
msgid "Read lock and write lock, unless operations are specified as non-atomic. Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
# 291f8ce0e44047fc8e2456155821b8e9
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
# d40dab2fd57943c585fa56e42f89bcc1
msgid "Building an index in the foreground, which is the default, locks the database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
# d9cc52e6d31e48f8a32eeac1c813f3c2
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:42
# 5ea094a495d0450c8f333b9c4876656c
msgid "Write lock. :method:`db.eval()` blocks all other JavaScript processes."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:46
# 86d2b96d7ac9485593d72ceda2511cb6
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:48
# f519022c2d4b4584a1b519d9b111094c
msgid "Write lock. If used with the ``nolock`` lock option, the :dbcommand:`eval` option does not take a write lock and cannot write data to the database."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:53
# 4d294c07dc19428f94948bea611b79c2
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:132
# 8624b21199094980baa688e7cf55b321
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:134
# 434887a0450b400cabf3f65f4e56e361
msgid "Certain administrative commands can exclusively lock the database for extended periods of time. In some deployments, for large databases, you may consider taking the :program:`mongod` instance offline so that clients are not affected. For example, if a :program:`mongod` is part of a :term:`replica set`, take the :program:`mongod` offline and let other members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:141
# b7f24e4d5e004a898d93f5c778b213c0
msgid "The following administrative operations require an exclusive (i.e. write) lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:144
# 4f8f687292854c2dbc3cc99a2660ce6e
msgid ":method:`db.collection.ensureIndex()`, when issued *without* setting ``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:146
# 97d75a7f71074057bc99aca956a63fcc
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:147
# eb60e9676eab467b8118e0557b652ba0
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:148
# a7fd9341be534b2e9190b6ccd67c5fc0
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:149
# 51cc3b27cd9b49949be25a5310bec9c6
msgid ":method:`db.createCollection()`, when creating a very large (i.e. many gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:151
# 4634ef727230420388582db579b80538
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:152
# 47bee7211ead465abc54d33215c485fa
msgid ":method:`db.copyDatabase()`. This operation may lock all databases. See :ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:155
# d55b0a01dbf2448eb5f4c14489a2a5ea
msgid "The following administrative commands lock the database but only hold the lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:158
# c8d3fd835cd14f8d9fd4472e0744c7db
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:159
# 75c0fe21a9cd43a8a5eb990761d506cc
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:160
# b78fb686d920459bac30d6a6a4c8adb4
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:161
# 8dd97b5717af4204abc28a6323a9a09c
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:163
# 602906b8374742d8a35ea2ba2bd96d38
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:164
# 8de56f60031e40d1a3d3fd97b37fc4fb
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:169
# 8168e3177edd473cb64bf344e802172b
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:171
# 13b11c1bd43742b49bf5f32674fe46ca
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:173
# 70b9625ae0cc4681b0dfb9f92d46c9d1
msgid ":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance at once."
msgstr ""

#: ../source/faq/concurrency.txt:176
# e2c0f9c43a3741ef8698cb860eb7425d
msgid ":term:`Journaling <journal>`, which is an internal operation, locks all databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:180
# 9e58923c79ff476aaae5401105dce424
msgid ":doc:`User authentication </core/authentication>` locks the ``admin`` database as well as the database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:183
# 8ba8c91d0e174b18a22ec42659c6a2ef
msgid "All writes to a replica set's :term:`primary` lock both the database receiving the writes and then the ``local`` database for a short time. The lock for the ``local`` database allows the :program:`mongod` to write to the primary's :term:`oplog` and accounts for a small portion of the total time of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:190
# f545bb5412334205810efa128f086c3f
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:192
# 0b50b0cc307945e7861167b2297e1a47
msgid ":term:`Sharding <sharding>` improves concurrency by distributing collections over multiple :program:`mongod` instances, allowing shard servers (i.e. :program:`mongos` processes) to perform any number of operations concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/faq/concurrency.txt:198
# 1fc41233fd624e49977fde7ed357b29f
msgid "Each :program:`mongod` instance is independent of the others in the shard cluster and uses the MongoDB :ref:`readers-writer lock <faq-concurrency-locking>`. The operations on one :program:`mongod` instance do not block the operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:206
# 817ca571707e45329bdd6266203469bc
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:208
# 34cdca1660a248a0bd19de9655ab1406
msgid "In :term:`replication`, when MongoDB writes to a collection on the :term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which is a special collection in the ``local`` database.  Therefore, MongoDB must lock both the collection's database and the ``local`` database. The :program:`mongod` must lock both databases at the same time to keep the database consistent and ensure that write operations, even with replication, are \"all-or-nothing\" operations."
msgstr ""

#: ../source/faq/concurrency.txt:217
# 3e403d23f79343b893b9d0647b7b3b1e
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:219
# 7fc39cb8dd95478c934dc5dcbbc9bc4d
msgid "In :term:`replication`, MongoDB does not apply writes serially to :term:`secondaries <secondary>`. Secondaries collect oplog entries in batches and then apply those batches in parallel. Secondaries do not allow reads while applying the write operations, and apply write operations in the order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:225
# 4cf18d89c8ad43a68a8432fefd7d3470
msgid "MongoDB can apply several writes in parallel on replica set secondaries, in two phases:"
msgstr ""

#: ../source/faq/concurrency.txt:228
# 3ab438ac0ac149bbb0a898b00d263946
msgid "During the first *prefer* phase, under a read lock, the :program:`mongod` ensures that all documents affected by the operations are in memory. During this phase, other clients may execute queries against this member."
msgstr ""

#: ../source/faq/concurrency.txt:233
# 51941f04fe274ce792f43ea450d63689
msgid "A thread pool using write locks applies all write operations in the batch as part of a coordinated write phase."
msgstr ""

#: ../source/faq/concurrency.txt:237
# aec6970749cc4b5ea188d240ee2dee91
msgid "What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""

#: ../source/faq/concurrency.txt:239
# 18d4aaba32a64e8aad6f245478206c79
msgid "The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations to run at the same time. Prior to 2.4, a single :program:`mongod` could only run a *single* JavaScript operation at once."
msgstr ""

