# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
# 088c9152c3484c06bbc73cc37f4c6743
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:0
# 783e5c4bebd242668a48587d8baef9a3
msgid "Frequently Asked Questions:"
msgstr ""

#: ../source/faq/sharding.txt:11
# 4bd84bd117e64a57978b8d2ca0cb5213
msgid "This document answers common questions about horizontal scaling using MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:14
# cdf9ecbbd46643359c4bb66473e4a5fe
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:19
# db69d4275c184c85842e3b196e7f20c9
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:21
# 8300c5f7484547fbac75981d661985f9
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:23
# 845fd459bd87496fb0c793c24e94b2f9
msgid "If your data set fits on a single server, you should begin with an unsharded deployment."
msgstr ""

#: ../source/faq/sharding.txt:26
# ba2c4e0bb0994d2ea1f514f20d42bd9a
msgid "Converting an unsharded database to a :term:`sharded cluster` is easy and seamless, so there is *little advantage* in configuring sharding while your data set is small."
msgstr ""

#: ../source/faq/sharding.txt:30
# ac0ee37d9dab48168e621b4fc7c53e3d
msgid "Still, all production deployments should use :term:`replica sets <replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:34
# 9430f2f69f96437b8e2ffb95487a9f42
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:36
# 3c012cd5b2ab4272a7b128ee3e5f8f42
msgid "To use replication with sharding, deploy each :term:`shard` as a :term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:42
# 78569caafcf043fcac0f71bf04201cc7
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:44
# af8a5bc84c1649f2888debadbc2e45ce
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:46
# ff55ef7d0fbc4d22b575e0102a2707a8
msgid "There is no automatic support in MongoDB for changing a shard key after sharding a collection. This reality underscores the importance of choosing a good :ref:`shard key <shard-key>`. If you *must* change a shard key after sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:51
# f3cc06898b5d4d5b834c53af441e6b2b
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:53
# bfd9ef445fde4481a4570176127a23ad
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:55
# f31cec3ec8e2401c8e636940ec2258d1
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:57
# 295dc11808564a89bba9cc8fffef6395
msgid ":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:60
# 4b6c978f69754ac29544d1930e656692
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:62
# fbdd53e85b984049ab774ec2ae3c254e
msgid "See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the :ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:68
# 9930aaae69d045379a23dcc6e2fcaec0
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:70
# f8bc9803df984cdf89b036bab10bc434
msgid "In the current implementation, all databases in a :term:`sharded cluster` have a \"primary :term:`shard`.\" All unsharded collection within that database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:75
# 9b8f6f34744049fea37ebbf1ac366d6b
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:77
# 666c1f6588804cdb9c95fd9bbec424df
msgid "Sharding must be specifically enabled on a collection. After enabling sharding on the collection, MongoDB will assign various ranges of collection data to the different shards in the cluster. The cluster automatically corrects imbalances between shards by migrating ranges of data from one shard to another."
msgstr ""

#: ../source/faq/sharding.txt:84
# c3118ad26be04804a40204b0ee154e1f
msgid "What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:86
# ce2de33a9fcf4c96bb595e9197dbe7f5
msgid "The :program:`mongos` routes the operation to the \"old\" shard, where it will succeed immediately. Then the :term:`shard` :program:`mongod` instances will replicate the modification to the \"new\" shard before the :term:`sharded cluster` updates that chunk's \"ownership,\" which effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:93
# eab770a37ecf4d1eb872ea660a48dad7
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:95
# 478e278642714284b3833b0eeb5d3a99
msgid "If a :term:`shard` is inaccessible or unavailable, queries will return with an error."
msgstr ""

#: ../source/faq/sharding.txt:98
# 4475256a8c7f4279bf187709d7b62d81
msgid "However, a client may set the ``partial`` query bit, which will then return results from all available shards, regardless of whether a given shard is unavailable."
msgstr ""

#: ../source/faq/sharding.txt:102
# d4139519f9a1406a9f850a4f65fb26e9
msgid "If a shard is responding slowly, :program:`mongos` will merely wait for the shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:106
# 462a81583ae04b69aba1d32791478921
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:110
# 2293d552ba204ad58e6a8220c7d5f0d7
msgid "The exact method for distributing queries to :term:`shards <shard>` in a :term:`cluster <sharded cluster>` depends on the nature of the query and the configuration of the sharded cluster. Consider a sharded collection, using the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` attributes:"
msgstr ""

#: ../source/faq/sharding.txt:116
# 49f2f08f7ce140759823c9ccd82057ca
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:119
# e9ec20357dd342329253539d60d0b8d2
msgid ":program:`mongos` determines which shard or shards contains the relevant data, based on the cluster metadata, and directs a query to the required shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:124
# 5e106b8b083c4b9db0851e5cec4ef23e
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:126
# 88855da7d2ee48aab4d71c2ad0e9361f
msgid ":program:`mongos` can make a straightforward translation of this operation into a number of queries against the relevant shards, ordered by ``user_id``. When the sorted queries return from all shards, the :program:`mongos` merges the sorted results and returns the complete result to the client."
msgstr ""

#: ../source/faq/sharding.txt:132
# 0727bf927ada4c1f9585098ec1211f7d
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:134
# 25082a175f714e88aecd4704bbe41b9e
msgid "These queries must run on all shards: :program:`mongos` must parallelize the query over the shards and perform a merge-sort on the ``email`` of the documents found."
msgstr ""

#: ../source/faq/sharding.txt:139
# 5b757ba9e8d34a81b33dd84eae3236ef
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:141
# 2918bb5b10144929911e2cfc2637bd88
msgid "If you call the :method:`cursor.sort()` method on a query in a sharded environment, the :program:`mongod` for each shard will sort its results, and the :program:`mongos` merges each shard's results before returning them to the client."
msgstr ""

#: ../source/faq/sharding.txt:147
# 1ab4a9bbb6eb4908b61f216e6ffb8960
msgid "How does MongoDB ensure unique ``_id`` field values when using a shard key *other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:149
# e5f55d7b60af4697a4cd76403e038d0f
msgid "If you do not use ``_id`` as the shard key, then your application/client layer must be responsible for keeping the ``_id`` field unique. It is problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:154
# 2dadd87385224f668e34a833e288b2f9
msgid "If you're not sharding your collection by the ``_id`` field, then you should be sure to store a globally unique identifier in that field. The default :doc:`BSON ObjectID </reference/object-id>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:160
# 794e4eba7aab45469c9455829fbc429d
msgid "I've enabled sharding and added a second shard, but all the data is still on one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:162
# 12bcb8fcf6bd4e91ae680a4636a5a5ff
msgid "First, ensure that you've declared a :term:`shard key` for your collection. Until you have configured the shard key, MongoDB will not create :term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:166
# 897c16bfc1744733bc796564242f83cd
msgid "Next, keep in mind that the default chunk size is 64 MB. As a result, in most situations, the collection needs to have at least 64 MB of data before a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:170
# 77a39c2ace95432abe7a3f06569a2722
msgid "Additionally, the system which balances chunks among the servers attempts to avoid superfluous migrations. Depending on the number of shards, your shard key, and the amount of data, systems often require at least 10 chunks of data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:175
# bc588b624d4a415e9ebf4dc90f6bc6e0
msgid "You can run :method:`db.printShardingStatus()` to see all the chunks present in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:179
# 95585ad8afdf4780a3b6cb832a9b38c4
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:181
# 0f1a0b83e34446c8a302017d278719f4
msgid "Yes. :program:`mongod` creates these files as backups during normal :term:`shard` balancing operations."
msgstr ""

#: ../source/faq/sharding.txt:184
# 3547186d1e224460a844c58cd7966b01
msgid "Once these migrations are complete, you may delete these files."
msgstr ""

#: ../source/faq/sharding.txt:187
# 349c5556aca44ffe8574e82e7c238b83
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:189
# 8dd688a8b3d74714b226ffab75a16600
msgid "Each client maintains a connection to a :program:`mongos` instance. Each :program:`mongos` instance maintains a pool of connections to the members of a replica set supporting the sharded cluster.  Clients use connections between :program:`mongos` and :program:`mongod` instances one at a time. Requests are not multiplexed or pipelined. When client requests complete, the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:197
# ca00f7b3291c45759f7dd4543b939dcf
msgid "See the :ref:`System Resource Utilization <system-resource-utilization>` section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:202
# 7f372b8e043d4546b8f3d865c0c54850
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:204
# 4bdf3717653f480ab31f702fa27f58fd
msgid ":program:`mongos` uses a set of connection pools to communicate with each :term:`shard`.  These pools do not shrink when the number of clients decreases."
msgstr ""

#: ../source/faq/sharding.txt:208
# 3baf2089288246fcb89eedf29843736a
msgid "This can lead to an unused :program:`mongos` with a large number of open connections. If the :program:`mongos` is no longer in use, it is safe to restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:213
# de2aaa2b06a3453e829fdee96bf02ff7
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:215
# 4452d7748d8b4f2e8ffc68dc23c807f9
msgid "Connect to the :program:`mongos` with the :program:`mongo` shell, and run the following command:"
msgstr ""

#: ../source/faq/sharding.txt:225
# 9e620181777a48c99e1096aeaf597ea6
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:227
# 0cefb2b600854f039de8eb26968f2df0
msgid "The writeback listener is a process that opens a long poll to relay writes back from a :program:`mongod` or :program:`mongos` after migrations to make sure they have not gone to the wrong server.  The writeback listener sends writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:233
# bdba73658919472dab4ff8b9f69189c7
msgid "These messages are a key part of the sharding infrastructure and should not cause concern."
msgstr ""

#: ../source/faq/sharding.txt:237
# 878b744d344743d292725ec3c2368bc3
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:239
# d9b6943b3ccf4438be3b89c720b6a146
msgid "Failed migrations require no administrative intervention. Chunk migrations always preserve a consistent state. If a migration fails to complete for some reason, the :term:`cluster` retries the operation. When the migration completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:246
# a45c5f4227154f8ab6f33820bff2c720
msgid "What is the process for moving, renaming, or changing the number of config servers?"
msgstr ""

#: ../source/faq/sharding.txt:248
# 2673e078748747d18ba99c5f16ec3761
msgid "See :doc:`/administration/sharded-clusters` for information on migrating and replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:252
# 7f68397e8e7a47efa7c4fcbc070ab911
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:254
# 4c81e814346c44b883668c9c13ce8247
msgid ":program:`mongos` instances maintain a cache of the :term:`config database` that holds the metadata for the :term:`sharded cluster`. This metadata includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:259
# f4f593fe56774d9ebfc803e1f10252ec
msgid ":program:`mongos` updates its cache lazily by issuing a request to a shard and discovering that its metadata is out of date.  There is no way to control this behavior from the client, but you can run the :dbcommand:`flushRouterConfig` command against any :program:`mongos` to force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:266
# 48e2e28411d346e2bceb6907d00a07f3
msgid "Is it possible to quickly update ``mongos`` servers after updating a replica set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:268
# 18d255583cd545f5b1db868f476ec5b4
msgid "The :program:`mongos` instances will detect these changes without intervention over time. However, if you want to force the :program:`mongos` to reload its configuration, run the :dbcommand:`flushRouterConfig` command against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:275
# 7e119427d58542f1b23c3381d100fe3b
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:277
# bfe2dc26a3f040f495f9eef10b384774
msgid "The :setting:`maxConns` option limits the number of connections accepted by :program:`mongos`."
msgstr ""

#: ../source/faq/sharding.txt:280
# 55a3091e831144828e9996d4c36f9a8a
msgid "If your client driver or application creates a large number of connections but allows them to time out rather than closing them explicitly, then it might make sense to limit the number of connections at the :program:`mongos` layer."
msgstr ""

#: ../source/faq/sharding.txt:285
# 9a168443feb647c9821e485c276c1909
msgid "Set :setting:`maxConns` to a value slightly higher than the maximum number of connections that the client creates, or the maximum size of the connection pool. This setting prevents the :program:`mongos` from causing connection spikes on the individual :term:`shards <shard>`. Spikes like these may disrupt the operation and memory allocation of the :term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:293
# 35f488278a5c4c48a3f108946ed179de
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:295
# 785f862fb8884e6ea88dadd0cff69f9e
msgid "If the query does not include the :term:`shard key`, the :program:`mongos` must send the query to all shards as a \"scatter/gather\" operation. Each shard will, in turn, use *either* the shard key index or another more efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:300
# 7765960e1e03420385c1ba2261f42c43
msgid "If the query includes multiple sub-expressions that reference the fields indexed by the shard key *and* the secondary index, the :program:`mongos` can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently. See `this presentation <http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for more information."
msgstr ""

#: ../source/faq/sharding.txt:308
# f0d1ef19037948b9bcf416c3bbe768a2
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:310
# 069d5c003ebd4f4a8d58a1032097e610
msgid ":term:`Shard keys <shard key>` can be random. Random keys ensure optimal distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:313
# 8a0f6c59b89244a182d3c466f90cf362
msgid ":term:`Sharded clusters <sharded cluster>`, attempt to route queries to *specific* shards when queries include the shard key as a parameter, because these directed queries are more efficient. In many cases, random keys can make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:322
# 127c9ba4e312473fa26bca9709e10db1
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:324
# 82582fb5ddb04fbe8b181a2ecc95f96c
msgid "Yes. There is no requirement that documents be evenly distributed by the shard key."
msgstr ""

#: ../source/faq/sharding.txt:327
# 069e1174945a4aa0ab09190a54e7a41f
msgid "However, documents that have the same shard key *must* reside in the same *chunk* and therefore on the same server. If your sharded data set has too many documents with the exact same shard key you will not be able to distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:335
# 242e17e0a9b842669b397fb9dfddf3a5
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:337
# 40c2916f0c8349f886b980e4f983c4ec
msgid "You can use any field for the shard key. The ``_id`` field is a common shard key."
msgstr ""

#: ../source/faq/sharding.txt:340
# 99dcdc7fa2ee4fc99ac15cd7fdceb695
msgid "Be aware that ``ObjectId()`` values, which are the default value of the ``_id`` field, increment as a timestamp. As a result, when used as a shard key, all new documents inserted into the collection will initially belong to the same chunk on a single shard. Although the system will eventually divide this chunk and migrate its contents to distribute data more evenly, at any moment the cluster can only direct insert operations at a single shard. This can limit the throughput of inserts. If most of your write operations are updates, this limitation should not impact your performance. However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:351
# 5d05dbb9a31449eeb80a230ffd3b78ab
msgid "To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys <sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:355
# 670590f5fbf641fcb98560779046cc05
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:357
# 2cc2983943834670b9e5363ddd5139d6
msgid "At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the :term:`shard` must connect to the :term:`config database` to update the chunk's record in the cluster metadata. If the :term:`shard` fails to connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:368
# a7323dd49f9a4a9bab77a6b0728114f0
msgid "When this happens, the :term:`primary` member of the shard's replica set then terminates to protect data consistency. If a :term:`secondary` member can access the config database, data on the shard becomes accessible again after an election."
msgstr ""

#: ../source/faq/sharding.txt:373
# f11ee423b93c4be58133859bbff1e823
msgid "The user will need to resolve the chunk migration failure independently. If you encounter this issue, contact the `MongoDB User Group <http://groups.google.com/group/mongodb-user>`_ or :about:`MongoDB Support </support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:379
# b051cd42b1094c3d81aaa3f93123652c
msgid "How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:381
# 241e2e6361fe4837929af206b10f76a6
msgid "The sharded cluster balancing process controls both migrating chunks from decommissioned shards (i.e. draining) and normal cluster balancing activities. Consider the following behaviors for different versions of MongoDB in situations where you remove a shard in a cluster with an uneven chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:387
# 7d20af10a91049df90bfa4fdda1ba01b
msgid "After MongoDB 2.2, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:391
# 893afba10b624c8e938e47a51ab5b839
msgid "Before MongoDB 2.2, the balancer handles the uneven chunk distribution and *then* removes the chunks from the draining shard."
msgstr ""

