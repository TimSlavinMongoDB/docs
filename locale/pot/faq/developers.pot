# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/developers.txt:5
# f902d9e5dbe34cc5890b4677e083d710
msgid "FAQ: MongoDB for Application Developers"
msgstr ""

#: ../source/faq/developers.txt:0
# c393e5f3f65d4ae09d0ce288ba3beeb5
msgid "Frequently Asked Questions:"
msgstr ""

#: ../source/faq/developers.txt:14
# 2a393c25b766414c96eb84ad893530dc
msgid "This document answers common questions about application development using MongoDB."
msgstr ""

#: ../source/faq/developers.txt:17
# e557e81eb1bb4c068302a7325deffdc9
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/developers.txt:24
# 28a45e60694844e6b10fe0b037ac53e3
msgid "What is a namespace in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:26
# 0e19c0c440bd48c085d8b046e9f8e445
msgid "A \"namespace\" is the concatenation of the :term:`database` name and the :term:`collection` names [#indexes-are-namespaces]_ with a period character in between."
msgstr ""

#: ../source/faq/developers.txt:30
# 81d80cf275a24713a04342a79471a267
msgid "Collections are containers for documents that share one or more indexes. Databases are groups of collections stored on disk using a single set of data files. [#ns-limit]_"
msgstr ""

#: ../source/faq/developers.txt:34
# 88f894e9afb44850bc609569728c100f
msgid "For an example ``acme.users`` namespace, ``acme`` is the database name and ``users`` is the collection name. Period characters **can** occur in collection names, so that ``acme.user.history`` is a valid namespace, with ``acme`` as the database name, and ``user.history`` as the collection name."
msgstr ""

#: ../source/faq/developers.txt:40
# 8dee7385beb047f7a87f54ca3a06916c
msgid "While data models like this appear to support nested collections, the collection namespace is flat, and there is no difference from the perspective of MongoDB between ``acme``, ``acme.users``, and ``acme.records``."
msgstr ""

#: ../source/faq/developers.txt:45
# e1e1a159f13f4097849e920aac4311a6
msgid "Each index also has its own namespace."
msgstr ""

#: ../source/faq/developers.txt:47
# 95023fbd2cbc4b1d996d94b3926e787a
msgid "MongoDB database have a configurable limit on the :limit:`number of namespaces <Number of Namespaces>` in a database."
msgstr ""

#: ../source/faq/developers.txt:51
# 464c609aef6349a89b10a94e98b4293f
msgid "How do you copy all objects from one collection to another?"
msgstr ""

#: ../source/faq/developers.txt:53
# 8324ade8292146249f8062b637f5e32c
msgid "In the :program:`mongo` shell, you can use the following operation to duplicate the entire collection:"
msgstr ""

#: ../source/includes/warning-copyto-loss-of-type-fidelity.rst:3
# b125e6980a84483a9ce85fb09d4a7283
msgid "When using :method:`db.collection.copyTo()` check field types to ensure that the operation does not remove type information from documents during the translation from :term:`BSON` to :term:`JSON`. Consider using :method:`~db.cloneCollection()` to maintain type fidelity."
msgstr ""

#: ../source/faq/developers.txt:62
# 024e3a75712e4c7e868737fcd805b809
msgid "Also consider the :dbcommand:`cloneCollection` :term:`command <database command>` that may provide some of this functionality."
msgstr ""

#: ../source/faq/developers.txt:66
# 9e156895f6e443d3a7e262a616f2aced
msgid "If you remove a document, does MongoDB remove it from disk?"
msgstr ""

#: ../source/faq/developers.txt:68
#: ../source/faq/developers.txt:145
# 02db7080b94c42b59eb487d3fbd01dcf
# 8557b841be1b45119589987b5e1d218b
msgid "Yes."
msgstr ""

#: ../source/faq/developers.txt:70
# 720d11a5dd684701b41d17634a1b9aac
msgid "When you use :method:`~db.collection.remove()`, the object will no longer exist in MongoDB's on-disk data storage."
msgstr ""

#: ../source/faq/developers.txt:74
# f5835724d8d641318dd5cf75e1c33d0c
msgid "When does MongoDB write updates to disk?"
msgstr ""

#: ../source/faq/developers.txt:76
# de68c1bba83742ca8d683d0e00177340
msgid "MongoDB flushes writes to disk on a regular interval. In the default configuration, MongoDB writes data to the main data files on disk every 60 seconds and commits the :term:`journal` roughly every 100 milliseconds. These values are configurable with the :setting:`journalCommitInterval` and :setting:`syncdelay`."
msgstr ""

#: ../source/faq/developers.txt:82
# 2c7d4b5eec2048bab15cf7fdfd92dd03
msgid "These values represent the *maximum* amount of time between the completion of a write operation and the point when the write is durable in the journal, if enabled, and when MongoDB flushes data to the disk. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/developers.txt:89
# 079c0e3f713c4053ab5cf43a15da58c2
msgid "However, by default, MongoDB uses a \"lazy\" strategy to write to disk. This is advantageous in situations where the database receives a thousand increments to an object within one second, MongoDB only needs to flush this data to disk once. In addition to the aforementioned configuration options, you can also use :dbcommand:`fsync` and :dbcommand:`getLastError` to modify this strategy."
msgstr ""

#: ../source/faq/developers.txt:97
# 32043cf1436a4703806ed998e2651764
msgid "How do I do transactions and locking in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:99
# 8573ff0b8bd5430a870f27b631ada7fc
msgid "MongoDB does not have support for traditional locking or complex transactions with rollback. MongoDB aims to be lightweight, fast, and predictable in its performance. This is similar to the MySQL MyISAM autocommit model. By keeping transaction support extremely simple, MongoDB can provide greater performance especially for :term:`partitioned <partition>` or :term:`replicated <replication>` systems with a number of database server processes."
msgstr ""

#: ../source/faq/developers.txt:107
# d41511e1b17d489bad55699403a7373c
msgid "MongoDB *does* have support for atomic operations *within* a single document. Given the possibilities provided by nested documents, this feature provides support for a large number of use-cases."
msgstr ""

#: ../source/faq/developers.txt:111
# fbcae040516649c7bb923e1eecb37db9
msgid "The :doc:`/tutorial/isolate-sequence-of-operations` page."
msgstr ""

#: ../source/faq/developers.txt:114
# 0da987b6f51e4dbca0d51057ae503ea7
msgid "How do you aggregate data with MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:116
# a51c31fa0c1d4fefb535bd3c40102155
msgid "In version 2.1 and later, you can use the new :doc:`aggregation framework </core/aggregation>`, with the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/faq/developers.txt:120
# d68020c56a7d44879acc84d2fc8a369e
msgid "MongoDB also supports :term:`map-reduce` with the :dbcommand:`mapReduce` command, as well as basic aggregation with the :dbcommand:`group`, :dbcommand:`count`, and :dbcommand:`distinct`. commands."
msgstr ""

#: ../source/faq/developers.txt:125
# 3ae8a0e4f400419ebb2c460b4a8fbac5
msgid "The :doc:`/aggregation` page."
msgstr ""

#: ../source/faq/developers.txt:128
# e2ef346d7b5a4c9aaa8e7dc6ee9a233c
msgid "Why does MongoDB log so many \"Connection Accepted\" events?"
msgstr ""

#: ../source/faq/developers.txt:130
# bb420c8ca0c948b2ab6d8f7937bf22b8
msgid "If you see a very large number connection and re-connection messages in your MongoDB log, then clients are frequently connecting and disconnecting to the MongoDB server. This is normal behavior for applications that do not use request pooling, such as CGI. Consider using FastCGI, an Apache Module, or some other kind of persistent application server to decrease the connection overhead."
msgstr ""

#: ../source/faq/developers.txt:137
# 8400fed47c1045dbaef4f568576a1f2d
msgid "If these connections do not impact your performance you can use the run-time :setting:`quiet` option or the command-line option :option:`--quiet <mongod --quiet>` to suppress these messages from the log."
msgstr ""

#: ../source/faq/developers.txt:143
# 9b0ef53473784b0bac778bbea3b9b319
msgid "Does MongoDB run on Amazon EBS?"
msgstr ""

#: ../source/faq/developers.txt:147
# 5ce383ae41694c0295bc19b2f78c2b61
msgid "MongoDB users of all sizes have had a great deal of success using MongoDB on the EC2 platform using EBS disks."
msgstr ""

#: ../source/faq/developers.txt:150
# 031bd993f2224b01a81c5a37f456fd32
msgid ":ecosystem:`Amazon EC2 </platforms/amazon-ec2>`"
msgstr ""

#: ../source/faq/developers.txt:153
# 7e4e0bdaa9764cc9a46cd7335b77c597
msgid "Why are MongoDB's data files so large?"
msgstr ""

#: ../source/faq/developers.txt:155
# cbb510dd3aed4f6884d6e6d80f0943c2
msgid "MongoDB aggressively preallocates data files to reserve space and avoid file system fragmentation. You can use the :setting:`smallfiles` setting to modify the file preallocation strategy."
msgstr ""

#: ../source/faq/developers.txt:159
# b9a5956ee0634a4b83a979e9d1d37e3d
msgid ":ref:`faq-disk-size`"
msgstr ""

#: ../source/faq/developers.txt:164
# 12f08e09b6f34d70a991349b79f3e430
msgid "How do I optimize storage use for small documents?"
msgstr ""

#: ../source/faq/developers.txt:166
# bde8f89f5bec4acaa8fbc726b3d39e45
msgid "Each MongoDB document contains a certain amount of overhead. This overhead is normally insignificant but becomes significant if all documents are just a few bytes, as might be the case if the documents in your collection only have one or two fields."
msgstr ""

#: ../source/faq/developers.txt:171
# d991b36d6771432299116d11bbc0d34a
msgid "Consider the following suggestions and strategies for optimizing storage utilization for these collections:"
msgstr ""

#: ../source/faq/developers.txt:174
# 357315a4751d47a08e7ad344f7932764
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/faq/developers.txt:176
# 2b97685281504264943ac9bf1e3c5167
msgid "MongoDB clients automatically add an ``_id`` field to each document and generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents this may account for a significant amount of space."
msgstr ""

#: ../source/faq/developers.txt:182
# 60d30945ec6d4cd3a380459f53052f90
msgid "To optimize storage use, users can specify a value for the ``_id`` field explicitly when inserting documents into the collection. This strategy allows applications to store a value in the ``_id`` field that would have occupied space in another portion of the document."
msgstr ""

#: ../source/faq/developers.txt:187
# 5ffb8dbd33dc4791aa419839445368a6
msgid "You can store any value in the ``_id`` field, but because this value serves as a primary key for documents in the collection, it must uniquely identify them. If the field's value is not unique, then it cannot serve as a primary key as there would be collisions in the collection."
msgstr ""

#: ../source/faq/developers.txt:193
# 3088514ad4794a51b3114fac60130c03
msgid "Use shorter field names."
msgstr ""

#: ../source/faq/developers.txt:195
# 973d654f8a894759b6c25813409328cf
msgid "MongoDB stores all field names in every document. For most documents, this represents a small fraction of the space used by a document; however, for small documents the field names may represent a proportionally large amount of space. Consider a collection of documents that resemble the following:"
msgstr ""

#: ../source/faq/developers.txt:205
# 868bf5ac94514a2a821f3b4b2150267a
msgid "If you shorten the filed named ``last_name`` to ``lname`` and the field name ``best_score`` to ``score``, as follows, you could save 9 bytes per document."
msgstr ""

#: ../source/faq/developers.txt:213
# 715b881f83b5444a9657d6751137a002
msgid "Shortening field names reduces expressiveness and does not provide considerable benefit on for larger documents and where document overhead is not significant concern. Shorter field names do not reduce the size of indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/faq/developers.txt:219
# 02fcff663eff47c7862398d23ebd90b2
msgid "In general it is not necessary to use short field names."
msgstr ""

#: ../source/faq/developers.txt:221
# 39e6c797eb3e492f88914508549ce7a7
msgid "Embed documents."
msgstr ""

#: ../source/faq/developers.txt:223
# 52105fc1944948f8a4bae4b490ee95bf
msgid "In some cases you may want to embed documents in other documents and save on the per-document overhead."
msgstr ""

#: ../source/faq/developers.txt:229
# e1e03b4f5d1c448b894e887cec7e8f24
msgid "When should I use GridFS?"
msgstr ""

#: ../source/faq/developers.txt:231
# 4fb2da1fd37343f28477f5e1a781399b
msgid "For documents in a MongoDB collection, you should always use :term:`GridFS` for storing files larger than 16 MB."
msgstr ""

#: ../source/faq/developers.txt:234
# e2b5fd4a6e374d55ba1331aaf32822f0
msgid "In some situations, storing large files may be more efficient in a MongoDB database than on a system-level filesystem."
msgstr ""

#: ../source/faq/developers.txt:237
# a7eeb7f5290844ef87d71b0e2bd79fb4
msgid "If your filesystem limits the number of files in a directory, you can use GridFS to store as many files as needed."
msgstr ""

#: ../source/faq/developers.txt:240
# 1e0ed5cbf5eb42bd9d8688d86f9edc59
msgid "When you want to keep your files and metadata automatically synced and deployed across a number of systems and facilities.  When using :ref:`geographically distributed replica sets <replica-set-geographical-distribution>` MongoDB can distribute files and their metadata automatically to a number of :program:`mongod` instances and facilities."
msgstr ""

#: ../source/faq/developers.txt:247
# 1ccfa04a9cdb4ff7ab2131ced681ef7a
msgid "When you want to access information from portions of large files without having to load whole files into memory, you can use GridFS to recall sections of files without reading the entire file into memory."
msgstr ""

#: ../source/faq/developers.txt:252
# 0abddd5f5b22420abf7736220023dd5b
msgid "Do not use GridFS if you need to update the content of the entire file atomically. As an alternative you can store multiple versions of each file and specify the current version of the file in the metadata. You can update the metadata field that indicates \"latest\" status in an atomic update after uploading the new version of the file, and later remove previous versions if needed."
msgstr ""

#: ../source/faq/developers.txt:259
# cf33115fad2e425e866936cf72fe0dc9
msgid "Furthermore, if your files are all smaller the 16 MB :limit:`BSON Document Size` limit, consider storing the file manually within a single document. You may use the BinData data type to store the binary data. See your :doc:`drivers </applications/drivers>` documentation for details on using BinData."
msgstr ""

#: ../source/faq/developers.txt:265
# 85e1d8d732a84607a27f76c45d551f6f
msgid "For more information on GridFS, see :doc:`/core/gridfs`."
msgstr ""

#: ../source/faq/developers.txt:268
# 37ba8dc6f3ac40e8a30af020e83d29a5
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/developers.txt:271
# 24b0f48f3ef546eb8fafbbb8905f90db
msgid "BSON"
msgstr ""

#: ../source/faq/developers.txt:273
# 70c0ce10fd09422ebd216b8289c1fd80
msgid "As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/developers.txt:277
# d60ff7f2e9d240e8a67de06b54bcd994
msgid "MongoDB represents queries as :term:`BSON` objects. Typically :doc:`client libraries </applications/drivers>` provide a convenient, injection free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/developers.txt:287
# 8c34ab24f0644a519e2d7691f4c0b4a0
msgid "Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If ``my_query`` contained special characters, for example ``,``, ``:``, and ``{``, the query simply wouldn't match any documents. For example, users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/developers.txt:294
# daf60a6825ae4a2fab316ff24bb6c1a2
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
# 02d9f9418d0d4b4faf3632bb281b92ca
msgid "You can disable all server-side execution of JavaScript, by passing the :option:`--noscripting <mongod --noscripting>` option on the command line or setting :setting:`noscripting` in a configuration file."
msgstr ""

#: ../source/faq/developers.txt:300
# e39bfa8b99ad4ba088b78e203d873e4f
msgid "All of the following MongoDB operations permit you to run arbitrary JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/developers.txt:303
# b9bf4f083b91445897c9afcc763ade0c
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/developers.txt:304
# 552121ed81fb475eb661edacf16acc21
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/faq/developers.txt:305
# 926c5d32cf4e4071bf8b9a5f969224c9
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/developers.txt:306
# c38135d1854245e799a9b5f6d56dffa8
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/developers.txt:308
# fcd7f565242f4d05adad3835e06f0f41
msgid "You must exercise care in these cases to prevent users from submitting malicious JavaScript."
msgstr ""

#: ../source/faq/developers.txt:311
# c21dbc1082dd4e019416a41137e5789b
msgid "Fortunately, you can express most queries in MongoDB without JavaScript and for queries that require JavaScript, you can mix JavaScript and non-JavaScript in a single query. Place all the user-supplied fields directly in a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/developers.txt:317
# 1991329c9b654eeeafd6321cc89d1785
msgid "If you need to pass user-supplied values in a :query:`$where` clause, you may escape these values with the ``CodeWScope`` mechanism. When you set user-submitted values as variables in the scope document,  you can avoid evaluating them on the database server."
msgstr ""

#: ../source/faq/developers.txt:323
# e374c7080ec64b548a7a4c8d914df689
msgid "If you need to use :method:`db.eval()` with user supplied values, you can either use a ``CodeWScope`` or you can supply extra arguments to your function. For instance:"
msgstr ""

#: ../source/faq/developers.txt:332
# 43433d26e5c04193b7799b06fb19a75f
msgid "This will ensure that your application sends ``user_value`` to the database server as data rather than code."
msgstr ""

#: ../source/faq/developers.txt:338
# e6d1f53eb85f47099133accdf18105eb
msgid "Dollar Sign Operator Escaping"
msgstr ""

#: ../source/faq/developers.txt:340
# cc9a9ad13eb7433787d400ae1652f599
msgid "Field names in MongoDB's query language have semantic meaning. The dollar sign (i.e ``$``) is a reserved character used to represent :doc:`operators </reference/operator>` (i.e. :update:`$inc`.) Thus, you should ensure that your application's users cannot inject operators into their inputs."
msgstr ""

#: ../source/faq/developers.txt:346
# 99737f5fd8f845bfa0ef2f4d14ddcab9
msgid "In some cases, you may wish to build a BSON object with a user-provided key.  In these situations, keys will need to substitute the reserved ``$`` and ``.`` characters. Any character is sufficient, but consider using the Unicode full width equivalents: ``U+FF04`` (i.e. \"＄\") and ``U+FF0E`` (i.e. \"．\")."
msgstr ""

#: ../source/faq/developers.txt:352
# 378a0deb725a44e78bd994598e84558c
msgid "Consider the following example:"
msgstr ""

#: ../source/faq/developers.txt:358
# a3ec1a0b6d344685b2e475f6cf84f28a
msgid "The user may have supplied a ``$`` value in the ``a_key`` value. At the same time, ``my_object`` might be ``{ $where : \"things\" }``. Consider the following cases:"
msgstr ""

#: ../source/faq/developers.txt:362
# 1c453c408d9d4f8f9058af29396859db
msgid "**Insert**. Inserting this into the database does no harm. The insert process does not evaluate the object as a query."
msgstr ""

#: ../source/faq/developers.txt:367
# c8f32cf67d714b9cb7d22077e88fa2a9
msgid "MongoDB client drivers, if properly implemented, check for reserved characters in keys on inserts."
msgstr ""

#: ../source/faq/developers.txt:370
# 75af1b701c71429b8067d205492a8872
msgid "**Update**.  The :method:`~db.collection.update()` operation permits ``$`` operators in the update argument but does not support the :query:`$where` operator. Still, some users may be able to inject operators that can manipulate a single document only. Therefore your application should escape keys, as mentioned above, if reserved characters are possible."
msgstr ""

#: ../source/faq/developers.txt:377
# 2e389769bc7a4409b0496ae2848e19ec
msgid "**Query** Generally this is not a problem for queries that resemble ``{ x : user_obj }``: dollar signs are not top level and have no effect. Theoretically it may be possible for the user to build a query themselves. But checking the user-submitted content for ``$`` characters in key names may help protect against this kind of injection."
msgstr ""

#: ../source/faq/developers.txt:385
# 55aa3e789ee24ab88a8254c9bbe0176f
msgid "Driver-Specific Issues"
msgstr ""

#: ../source/faq/developers.txt:387
# 5d44bf6deb864ce09acc163b92b7f2ef
msgid "See the \"`PHP MongoDB Driver Security Notes <http://us.php.net/manual/en/mongo.security.php>`_\" page in the PHP driver documentation for more information"
msgstr ""

#: ../source/faq/developers.txt:394
# 260c6a0f34f54d1591db0dd5358b0b7b
msgid "How does MongoDB provide concurrency?"
msgstr ""

#: ../source/faq/developers.txt:396
# 6cd3aecbe0d34f51875fa83f45708aff
msgid "MongoDB implements a readers-writer lock. This means that at any one time, only one client may be writing or any number of clients may be reading, but that reading and writing cannot occur simultaneously."
msgstr ""

#: ../source/faq/developers.txt:401
# bc14941645084528bc6a66a26f55f9c0
msgid "In standalone and :term:`replica sets <replica set>` the lock's scope applies to a single :program:`mongod` instance or :term:`primary` instance. In a sharded cluster, locks apply to each individual shard, not to the whole cluster."
msgstr ""

#: ../source/faq/developers.txt:406
# 8e84f791272c42d5a0b32052b40b9a38
msgid "For more information, see :doc:`/faq/concurrency`."
msgstr ""

#: ../source/faq/developers.txt:411
# d8c339d57a564aad95ef78fbd5b2a0a9
msgid "What is the compare order for BSON types?"
msgstr ""

#: ../source/faq/developers.txt:413
# c57c1d0b5a004d21b762ba1f8a85e8c1
msgid "MongoDB permits documents within a single collection to have fields with different :term:`BSON` types. For instance, the following documents may exist within a single collection."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# 965563dddfee4828a6efd450853a65ef
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# 3e31ab23aa8c4edaa1b2b8dbe3bd1a4e
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# 0fcb8449cd14493792965ca8c0a950ac
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# ab109c62526044f1a516f25524a09820
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# 6078e160b63d451b9cf70ad9a1361c06
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 554ad9943ee248228b1753c9a1567440
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# 1358b7c8f3644a6a820729560bad634e
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# 8151b9b574b0401e8f99e81ca69da952
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# 29d0d5a2c0504baea4d84a0559c07557
msgid "ObjectID"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# 355a78f992a44c15bd40a2f79bfac22b
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# b99336601dc3425cbf82acc74fb09d9c
msgid "Date, Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# e45d090df75742739a3c74463141d978
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# b42b96f83c394188a70465063764c7c9
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:19
# 5b5bbe95cfee4259a01f551a9f6fc937
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/faq/developers.txt:424
# 13ba0e58b6f543f4804e4f7359d08df2
msgid "Consider the following :program:`mongo` example:"
msgstr ""

#: ../source/faq/developers.txt:439
# 32296566114f429992986a2c6e13a284
msgid "The :query:`$type` operator provides access to :term:`BSON type <BSON types>` comparison in the MongoDB query syntax. See the documentation on :term:`BSON types` and the :query:`$type` operator for additional information."
msgstr ""

#: ../source/includes/warning-mixing-types.rst:3
# 340e9bb8c9fd401181c251c0da34660c
msgid "Storing values of the different types in the same field in a collection is *strongly* discouraged."
msgstr ""

#: ../source/faq/developers.txt:448
# ae7a3885f1b54bd6962493d7c13e3e0e
msgid "The :doc:`Tailable Cursors </tutorial/create-tailable-cursor>` page for an example of a C++ use of ``MinKey``."
msgstr ""

#: ../source/faq/developers.txt:460
# 9bf9f3e1ed0a47029523854bf491dea0
msgid "When multiplying values of mixed types, what type conversion rules apply?"
msgstr ""

#: ../source/faq/developers.txt:462
# 46fb728cee284da2956e80f6d86b1334
msgid "The :update:`$mul` multiplies the numeric value of a field by a number. For multiplication with values of mixed numeric types (32-bit integer, 64-bit integer, float), the following type conversion rules apply:"
msgstr ""

#: ../source/faq/developers.txt:471
# bd3de280021045a1b37d62ebc602876c
msgid "32-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:472
#: ../source/faq/developers.txt:477
#: ../source/faq/developers.txt:481
#: ../source/faq/developers.txt:482
# dff88494923f48ff95ce58027d1a03e3
# de72098c65be46f8a76cc3c526dd7e43
# c0cdede956d24ad4a647c87d06aa2b6f
# eb0ba303835949ffa58647697cd6b6d0
msgid "64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:473
#: ../source/faq/developers.txt:478
#: ../source/faq/developers.txt:483
#: ../source/faq/developers.txt:486
#: ../source/faq/developers.txt:487
#: ../source/faq/developers.txt:488
# 77e3ac85386442cca153f9cc4d8c0a66
# 55d3a0ae838d4aec8bd5f58c02732495
# 9c151cb6c4374b4eba4283b8a01b0e69
# 4b3ea9d8eeca48e58f84097cfa23a336
# cbbf4442e595492cb78c067f9531d593
# 3a6cdc92574245c081c3db358b8dbdf3
msgid "Float"
msgstr ""

#: ../source/faq/developers.txt:475
# 69375dbabde04283b74df3c015a491d2
msgid "**32-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:476
# ee850c7fecfa4c20bc96cea8d92eb539
msgid "32-bit or 64-bit Integer"
msgstr ""

#: ../source/faq/developers.txt:480
# e79591968b834556aded0e571e0fda34
msgid "**64-bit Integer**"
msgstr ""

#: ../source/faq/developers.txt:485
# e6e9d6a75cd54b76be9fd06866551c6c
msgid "**Float**"
msgstr ""

#: ../source/faq/developers.txt:492
# 13d73e2c4268487b81705480f46098ac
msgid "If the product of two 32-bit integers exceeds the maximum value for a 32-bit integer, the result is a 64-bit integer."
msgstr ""

#: ../source/faq/developers.txt:495
# fc5b5abe91f24e11ad11aade3c4dd2f7
msgid "Integer operations of any type that exceed the maximum value for a 64-bit integer produce an error."
msgstr ""

#: ../source/faq/developers.txt:501
# 6db2f42f95ae4e518d9bcfd088b8c958
msgid "How do I query for fields that have null values?"
msgstr ""

#: ../source/faq/developers.txt:503
# b89eb405e38a4218ba1bcb0d890fa9b7
msgid "Fields in a document may store ``null`` values, as in a notional collection, ``test``, with the following documents:"
msgstr ""

#: ../source/faq/developers.txt:511
# 621e4758990945f1b71604511deab88a
msgid "Different query operators treat ``null`` values differently:"
msgstr ""

#: ../source/faq/developers.txt:513
# b11a88fdbd46494a9a1a52dcf8930ddb
msgid "The ``{ cancelDate : null }`` query matches documents that either contains the ``cancelDate`` field whose value is ``null`` *or* that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:521
# c58db2254588445eae2a328081b8eaf1
msgid "The query returns both documents:"
msgstr ""

#: ../source/faq/developers.txt:528
# ce0e88da71524d77a4c8a6a1f2224c54
msgid "The ``{ cancelDate : { $type: 10 } }`` query matches documents that contains the ``cancelDate`` field whose value is ``null`` *only*; i.e. the value of the ``cancelDate`` field is of BSON Type ``Null`` (i.e. ``10``) :"
msgstr ""

#: ../source/faq/developers.txt:537
# 7d44124788d445128bada0a34909a03d
msgid "The query returns only the document that contains the ``null`` value:"
msgstr ""

#: ../source/faq/developers.txt:543
# ffed9366f8704757a660d86f63b6d510
msgid "The ``{ cancelDate : { $exists: false } }`` query matches documents that do not contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:550
# 9b6d0121fe0b449a89933a979f57642f
msgid "The query returns only the document that does *not* contain the ``cancelDate`` field:"
msgstr ""

#: ../source/faq/developers.txt:557
# 2a259d55d47e4fc9aaf90af2d4b81831
msgid "The reference documentation for the :query:`$type` and :query:`$exists` operators."
msgstr ""

#: ../source/faq/developers.txt:563
# c7ba1d57c82843f4935da809ee833529
msgid "Are there any restrictions on the names of Collections?"
msgstr ""

#: ../source/faq/developers.txt:565
# d0106eb919dc482c8e3a59018fce230a
msgid "Collection names can be any UTF-8 string with the following exceptions:"
msgstr ""

#: ../source/faq/developers.txt:568
# 2d0bec48ce824ee79eddd6a1e9fc6a09
msgid "A collection name should begin with a letter or an underscore."
msgstr ""

#: ../source/faq/developers.txt:570
# caf95ec56a5049eaa0126dc676c3b592
msgid "The empty string (``\"\"``) is not a valid collection name."
msgstr ""

#: ../source/faq/developers.txt:572
# 846a08732d5a4a2183360c3fd430e16a
msgid "Collection names cannot contain the ``$`` character. (version 2.2 only)"
msgstr ""

#: ../source/faq/developers.txt:574
# a0f0de01e9b74415ab3960f99cb48cb1
msgid "Collection names cannot contain the null character: ``\\0``"
msgstr ""

#: ../source/faq/developers.txt:576
# 8b15534b673f4065a5381b38270cd3e3
msgid "Do not name a collection using the ``system.`` prefix. MongoDB reserves ``system.`` for system collections, such as the ``system.indexes`` collection."
msgstr ""

#: ../source/faq/developers.txt:581
# fe73e9535d3a4b14a2d4eea8bc66773e
msgid "The maximum size of a collection name is 128 characters, including the name of the database. However, for maximum flexibility, collections should have names less than 80 characters."
msgstr ""

#: ../source/faq/developers.txt:585
# 46b9c68558584c14a8927c42d4d5f70c
msgid "If your collection name includes special characters, such as the underscore character, then to access the collection use the :method:`db.getCollection()` method or a :api:`similar method for your driver <>`."
msgstr ""

#: ../source/faq/developers.txt:0
# b8a1da1d033342168f93e9c69eb058fa
msgid "Example"
msgstr ""

#: ../source/faq/developers.txt:597
# 412dce9e5c2b4fc593310ff5f0025fce
msgid "To perform a query, use the :method:`~db.collection.find()` method, in as the following:"
msgstr ""

#: ../source/faq/developers.txt:607
# 218682d896c14750aea88367104ccb25
msgid "How do I isolate cursors from intervening write operations?"
msgstr ""

#: ../source/faq/developers.txt:609
# 54a585f4d2ba4af888bc13586bcafe2a
msgid "MongoDB cursors can return the same document more than once in some situations. [#duplicate-document-in-result-set]_ You can use the :method:`~cursor.snapshot()` method on a cursor to isolate the operation for a very specific case."
msgstr ""

#: ../source/faq/developers.txt:614
# 8a115207cf1e4fb7a00a7c835bff81f4
msgid ":method:`~cursor.snapshot()` traverses the index on the ``_id`` field and guarantees that the query will return each document (with respect to the value of the ``_id`` field) no more than once. [#id-is-immutable]_"
msgstr ""

#: ../source/faq/developers.txt:618
# 048ac1d2908d4d7cbde7076df1f153f0
msgid "The :method:`~cursor.snapshot()` does not guarantee that the data returned by the query will reflect a single moment in time *nor* does it provide isolation from insert or delete operations."
msgstr ""

#: ../source/faq/developers.txt:624
# e4d630404ec94a3bb6b29d3f3552cc1d
msgid "You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded collections <sharding>`."
msgstr ""

#: ../source/faq/developers.txt:627
# f7d29957c68a4021850255a0dcd526be
msgid "You **cannot** use :method:`~cursor.snapshot()` with :method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/faq/developers.txt:631
# ef4af4dcdabc45f4b2752e0b3476e483
msgid "As an alternative, if your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields to achieve a similar result as the :method:`~cursor.snapshot()`. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/faq/developers.txt:637
# 5ffed3c5d6af49e3b6fbbad8dbb7b316
msgid "As a cursor returns documents other operations may interleave with the query: if some of these operations are :doc:`updates </core/write-operations>` that cause the document to move (in the case of a table scan, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:645
# ecbd8bfe81cb4dee8226c9390fd5e4b1
msgid "MongoDB does not permit changes to the value of the ``_id`` field; it is not possible for a cursor that transverses this index to pass the same document more than once."
msgstr ""

#: ../source/faq/developers.txt:652
# 34bc439354c343c98f496ae4b7150a49
msgid "When should I embed documents within other documents?"
msgstr ""

#: ../source/faq/developers.txt:654
# 1572009bcb39441abf760c72982e6546
msgid "When :doc:`modeling data in MongoDB </core/data-models>`, embedding is frequently the choice for:"
msgstr ""

#: ../source/faq/developers.txt:657
# d15690f39e1f475d888cefc9045cb6d5
msgid "\"contains\" relationships between entities."
msgstr ""

#: ../source/faq/developers.txt:659
# 82c9dc66031a4791bda000613e46da49
msgid "one-to-many relationships when the \"many\" objects *always* appear with or are viewed in the context of their parents."
msgstr ""

#: ../source/faq/developers.txt:662
# a55f65079f0e4d2f9d3c0475c99a321c
msgid "You should also consider embedding for performance reasons if you have a collection with a large number of small documents. Nevertheless, if small, separate documents represent the natural model for the data, then you should maintain that model."
msgstr ""

#: ../source/faq/developers.txt:667
# 2ab6156c0e234907b80e20409e4f278f
msgid "If, however, you can group these small documents by some logical relationship *and* you frequently retrieve the documents by this grouping, you might consider \"rolling-up\" the small documents into larger documents that contain an array of subdocuments. Keep in mind that if you often only need to retrieve a subset of the documents within the group, then \"rolling-up\" the documents may not provide better performance."
msgstr ""

#: ../source/faq/developers.txt:675
# 7ab2982d39314c2384f51f0a7a52482f
msgid "\"Rolling up\" these small documents into logical groupings means that queries to retrieve a group of documents involve sequential reads and fewer random disk accesses."
msgstr ""

#: ../source/faq/developers.txt:681
# 271e2303e07c4f7f8dee80b4c2895424
msgid "Additionally, \"rolling up\" documents and moving common fields to the larger document benefit the index on these fields. There would be fewer copies of the common fields *and* there would be fewer associated key entries in the corresponding index. See :doc:`/core/indexes` for more information on indexes."
msgstr ""

#: ../source/faq/developers.txt:695
# 16a378ae44b246ada73d4d1c40dcba69
msgid "Where can I learn more about data modeling in MongoDB?"
msgstr ""

#: ../source/faq/developers.txt:697
# 345356164720415eb83492dc65169b2e
msgid "Begin by reading the documents in the :doc:`/data-modeling` section. These documents contain a high level introduction to data modeling considerations in addition to practical examples of data models targeted at particular issues."
msgstr ""

#: ../source/faq/developers.txt:702
# c4f5498990de44c181b601ff2f92a465
msgid "Additionally, consider the following external resources that provide additional examples:"
msgstr ""

#: ../source/faq/developers.txt:713
# 8e832aa8f2384810a0c3d40cb0357c67
msgid "`Schema Design by Example <http://www.10gen.com/presentations/mongodb-melbourne-2012/schema-design-example>`_"
msgstr ""

#: ../source/faq/developers.txt:715
# 4802f6ec3ad64dee9690e2705aad1a55
msgid "`Dynamic Schema Blog Post <http://dmerr.tumblr.com/post/6633338010/schemaless>`_"
msgstr ""

#: ../source/faq/developers.txt:718
# 8f8d7cb27a2f4001960a7e444f6f00b8
msgid ":ecosystem:`MongoDB Data Modeling and Rails </tutorial/model-data-for-ruby-on-rails/>`"
msgstr ""

#: ../source/faq/developers.txt:721
# e8a3958fd5c9440fb13721e49697fe31
msgid "`Ruby Example of Materialized Paths <http://github.com/banker/newsmonger/blob/master/app/models/comment.rb>`_"
msgstr ""

#: ../source/faq/developers.txt:724
# d2cb51c3f8e44f809ddf34d2547d73ca
msgid "`Sean Cribs Blog Post <http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database>`_ which was the source for much of the :ref:`data-modeling-trees` content."
msgstr ""

#: ../source/faq/developers.txt:732
# 3de0eac5085b4befb61b82837a7b1b34
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/developers.txt:734
# 1bc43b9b59134733813b23f3f094e1da
msgid "An update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :ref:`padding <write-operations-padding-factor>`."
msgstr ""

#: ../source/faq/developers.txt:738
# ab3b2ecc04564523afa03c5317e60402
msgid "You should not have to pad manually because MongoDB adds :ref:`padding automatically <write-operations-padding-factor>` and can adaptively adjust the amount of padding added to documents to prevent document relocations following updates. You can change the default :data:`~collStats.paddingFactor` calculation by using the :dbcommand:`collMod` command with the :collflag:`usePowerOf2Sizes` flag. The :collflag:`usePowerOf2Sizes` flag ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation."
msgstr ""

#: ../source/faq/developers.txt:749
# 096a8c13104a49b087a8908377c07e2b
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/developers.txt:753
# 0485f76da10f4bb8a350cb3ce2d77b36
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/developers.txt:777
# a650ee5026fc41e6ae83ec78cb3ac0d2
msgid ":ref:`write-operations-padding-factor`"
msgstr ""

