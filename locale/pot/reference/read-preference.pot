# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-preference.txt:3
# 9c976fa5251e4065a19a0b714c4842b5
msgid "Read Preference Reference"
msgstr ""

#: ../source/includes/introduction-read-preference.rst:1
# 174f7ff5985348cfa1cb3adce02a70a3
msgid "Read preference describes how MongoDB clients route read operations to members of a :term:`replica set`."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:4
# b1dea5bdd114449dbb14d022d31b18f4
msgid "By default, an application directs its read operations to the :term:`primary` member in a :term:`replica set`. Reading from the primary guarantees that read operations reflect the latest version of a document. However, by distributing some or all reads to secondary members of the replica set, you can improve read throughput or reduce latency for an application that does not require fully up-to-date data."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:5
# 0bef199acc624cb0bff9061fc96e4a31
msgid "Read Preference Mode"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:6
# f5f867348ba74abdbf9c4d5f79c8a00b
msgid "Description"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:7
# 0c67ef58a45a4cb38a124dcf83e3a2d5
msgid ":readmode:`primary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:8
# 3e7f793cdedc47b9821348d3fcdd8232
msgid "Default mode. All operations read from the current replica set :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:10
# 4633f3c2c26f4f88830b17d8143ec229
msgid ":readmode:`primaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:11
# ab2c99fab189414a822c2e5013f3037e
msgid "In most situations, operations read from the :term:`primary` but if it is unavailable, operations read from :term:`secondary` members."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:14
# 0b84ff6b14fb480ea925c318901f8a13
msgid ":readmode:`secondary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:15
# 08f6e18cf83b414db93f210f1f033ec4
msgid "All operations read from the :term:`secondary` members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:17
# c400c8c302b24738b41184c49f451a06
msgid ":readmode:`secondaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:18
# cad8755480c648d18cba0c20df3e5531
msgid "In most situations, operations read from :term:`secondary` members but if no :term:`secondary` members are available, operations read from the :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:21
# 4a6017150dff4ed0a5765bd6a10a1723
msgid ":readmode:`nearest`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:22
# 9836fcb6582641299f531c1c667c8987
msgid "Operations read from the *nearest* member of the :term:`replica set`, irrespective of the member's type."
msgstr ""

#: ../source/reference/read-preference.txt:17
# c9dad37db6954cc988aa2a1e154c96cf
msgid "Read Preference Modes"
msgstr ""

#: ../source/reference/read-preference.txt:21
# 4267e280fe384b858e49289d4aa7d103
msgid "All read operations use only the current replica set :term:`primary`. This is the default. If the primary is unavailable, read operations produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:25
# 1f021c1ea26c44e98ae5d380c614f565
msgid "The :readmode:`primary` read preference mode is not compatible with read preference modes that use :ref:`tag sets <replica-set-read-preference-tag-sets>`. If you specify a tag set with :readmode:`primary`, the driver will produce an error."
msgstr ""

#: ../source/reference/read-preference.txt:32
# cca67e89645840d395b2b2c40db98bea
msgid "In most situations, operations read from the :term:`primary` member of the set. However, if the primary is unavailable, as is the case during :term:`failover` situations, operations read from secondary members."
msgstr ""

#: ../source/reference/read-preference.txt:37
# b6493c7394bc4191b12edd6d8dc2262d
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client reads first from the primary, if available, and then from :term:`secondaries <secondary>` that match the specified tags. If no secondaries have matching tags, the read operation produces an error."
msgstr ""

#: ../source/reference/read-preference.txt:43
# 9a459288b3504767a0fe57b290468c8a
msgid "Since the application may receive data from a secondary, read operations using the :readmode:`primaryPreferred` mode may return stale data in some situations."
msgstr ""

#: ../source/reference/read-preference.txt:49
# 0cc7ac29e9914a71bb4a5fc96d824dfa
msgid ":program:`mongos` added full support for read preferences."
msgstr ""

#: ../source/reference/read-preference.txt:52
# f1141903af59405d93b72344f978d98a
msgid "When connecting to a :program:`mongos` instance older than 2.2, using a client that supports read preference modes, :readmode:`primaryPreferred` will send queries to secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:58
# 7a18cf29d1234ffebbafda5291732219
msgid "Operations read *only* from the :term:`secondary` members of the set. If no secondaries are available, then this read operation produces an error or exception."
msgstr ""

#: ../source/reference/read-preference.txt:62
# d9875a3139134800a4db55a552b8f473
msgid "Most sets have at least one secondary, but there are situations where there may be no available secondary. For example, a set with a primary, a secondary, and an :term:`arbiter` may not have any secondaries if a member is in recovering state or unavailable."
msgstr ""

#: ../source/reference/read-preference.txt:67
# 261af5809d644d9e9888db6ebdec4b92
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find secondary members that match the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the read operation produces an error. [#capacity-planning]_"
msgstr ""

#: ../source/reference/read-preference.txt:75
# df68eb1eefdd4d80870afb943866c5b1
msgid "Read operations using the :readmode:`secondary` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:79
# 380634e14dde412fa070a5cc7766ffa4
msgid "In most situations, operations read from :term:`secondary` members, but in situations where the set consists of a single :term:`primary` (and no other members), the read operation will use the set's primary."
msgstr ""

#: ../source/reference/read-preference.txt:84
# 71294fbdbd9a4cb4870af939ef6b8e9a
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a secondary member that matches the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the client ignores tags and reads from the primary."
msgstr ""

#: ../source/reference/read-preference.txt:91
# b0d99e7caf234f47a41d349f1c62716a
msgid "Read operations using the :readmode:`secondaryPreferred` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:96
# b4f5ec1100014dc3a7859bce2acd177e
msgid "The driver reads from the *nearest* member of the :term:`set <replica set>` according to the :ref:`member selection <replica-set-read-preference-behavior-nearest>` process. Reads in the :readmode:`nearest` mode do not consider the member's *type*. Reads in :readmode:`nearest` mode may read from both primaries and secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:103
# 83879122abf140af8c141c67442adde5
msgid "Set this mode to minimize the effect of network latency on read operations without preference for current or stale data."
msgstr ""

#: ../source/reference/read-preference.txt:106
# 1612c5d5716d4d369b4ac6e424e48018
msgid "If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a replica set member that matches the specified tag set and directs reads to an arbitrary member from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/reference/read-preference.txt:112
# 22e17225e6544e25ac31dc6223891f70
msgid "Read operations using the :readmode:`nearest` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:117
# 83a15e150c234ca29252db575ce7e9f5
msgid "All operations read from a member of the nearest group of the replica set that matches the specified read preference mode. The :readmode:`nearest` mode prefers low latency reads over a member's :term:`primary` or :term:`secondary` status."
msgstr ""

#: ../source/reference/read-preference.txt:122
# 8e22859956c941e5bca4e32b283f920e
msgid "For :readmode:`nearest`, the client assembles a list of acceptable hosts based on tag set and then narrows that list to the host with the shortest ping time and all other members of the set that are within the \"local threshold,\" or acceptable latency. See :ref:`replica-set-read-preference-behavior-nearest` for more information."
msgstr ""

#: ../source/reference/read-preference.txt:129
# 73b1b05bbd7246a0a72c96cd0ad66e78
msgid "If your set has more than one secondary, and you use the :readmode:`secondary` read preference mode, consider the following effect. If you have a :ref:`three member replica set <replica-set-three-members>` with a primary and two secondaries, and if one secondary becomes unavailable, all :readmode:`secondary` queries must target the remaining secondary. This will double the load on this secondary. Plan and provide capacity to support this as needed."
msgstr ""

#: ../source/reference/read-preference.txt:139
# 1fcbc4e5c2144dd0a3db695d47ab12dd
msgid "Use Cases"
msgstr ""

#: ../source/reference/read-preference.txt:141
# b1c706486187445783e979304113c024
msgid "Depending on the requirements of an application, you can configure different applications to use different read preferences, or use different read preferences for different queries in the same application. Consider the following applications for different read preference strategies."
msgstr ""

#: ../source/reference/read-preference.txt:148
# 5afdcfead30f432b846248188ce9b530
msgid "Maximize Consistency"
msgstr ""

#: ../source/reference/read-preference.txt:150
# d9f1bdcf623a432c97e8cb6558b5a4f4
msgid "To avoid *stale* reads under all circumstances, use :readmode:`primary`. This prevents all queries when the set has no :term:`primary`, which happens during elections, or when a majority of the replica set is not accessible."
msgstr ""

#: ../source/reference/read-preference.txt:156
# 2f16303085974c79bb2b3d11d559d750
msgid "Maximize Availability"
msgstr ""

#: ../source/reference/read-preference.txt:158
# b310946ed8db47d09a81299dbaebffa1
msgid "To permit read operations when possible, Use :readmode:`primaryPreferred`. When there's a primary you will get consistent reads, but if there is no primary you can still query :term:`secondaries <secondary>`."
msgstr ""

#: ../source/reference/read-preference.txt:164
# 5797653a28a54f5baf37ab500f360601
msgid "Minimize Latency"
msgstr ""

#: ../source/reference/read-preference.txt:166
# eb2143f1a0654f699a5e5e372bc592c6
msgid "To always read from a low-latency node, use :readmode:`nearest`. The driver or :program:`mongos` will read from the fastest member and those no more than 15 milliseconds [#secondary-acceptable-latency]_ further away than the fastest member."
msgstr ""

#: ../source/reference/read-preference.txt:171
# 8d1bf351f1ea47a7bb4c1cd342c4103c
msgid ":readmode:`nearest` does *not* guarantee consistency. If the nearest member to your application server is a secondary with some replication lag, queries could return stale data. :readmode:`nearest` only reflects network distance and does not reflect I/O or CPU load."
msgstr ""

#: ../source/reference/read-preference.txt:176
# 513705c53b544259a9361efa3b6a9427
msgid "This threshold is configurable. See :setting:`localThreshold` for :program:`mongos` or your driver documentation for the appropriate setting."
msgstr ""

#: ../source/reference/read-preference.txt:182
# 10201471ffd540d082cd3de444a714a1
msgid "Query From Geographically Distributed Members"
msgstr ""

#: ../source/reference/read-preference.txt:184
# 64fa6972c7dd4e4ba5f45a254f453f3a
msgid "If the members of a replica set are geographically distributed, you can create replica tags based that reflect the location of the instance and then configure your application to query the members nearby."
msgstr ""

#: ../source/reference/read-preference.txt:188
# b88b86521167493f871b82b1e6ebcbaa
msgid "For example, if members in \"east\" and \"west\" data centers are :ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and ``{'dc': 'west'}``, your application servers in the east data center can read from nearby members with the following read preference:"
msgstr ""

#: ../source/reference/read-preference.txt:198
# 973a8caf3955488abb2d0cb8e3c8bc2e
msgid "Although :readmode:`nearest` already favors members with low network latency, including the tag makes the choice more predictable."
msgstr ""

#: ../source/reference/read-preference.txt:202
# 00c8358a26ff44a0acc28822ade6baee
msgid "Maximize throughput"
msgstr ""

#: ../source/reference/read-preference.txt:204
# 710bf2442d784fd2a3454d73778b2d73
msgid "If disk I/O is the limiting fact for throughput, scale reads capacity using :readmode:`nearest` and by setting the nearest threshold [#nearest-threshold]_ very high. This will distribute the query load equally among all members."
msgstr ""

#: ../source/reference/read-preference.txt:209
# 2b51c444e0924127ac3498543f8768f2
msgid "See :setting:`localThreshold` for :program:`mongos` or your driver documentation for the appropriate *secondaryAcceptableLatencyMS* setting."
msgstr ""

#: ../source/reference/read-preference.txt:214
# d5411ad1948f45fc9b27e255636b7e1c
msgid "Reduce load on the primary"
msgstr ""

#: ../source/reference/read-preference.txt:216
# b5e57f555386443188169dc00b9a5b89
msgid "To shift read load from the primary, use mode :readmode:`secondary`. Although :readmode:`secondaryPreferred` is tempting for this use case, it carries some risk: if all secondaries are unavailable and your set has enough :term:`arbiters <arbiter>` to prevent the primary from stepping down, then the primary will receive all traffic from clients. If the primary is unable to handle this load, queries will compete with writes. For this reason, use :readmode:`secondary` to distribute read load to replica sets, not :readmode:`secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:226
# acce386e670a41ecb7650ed8620664a7
msgid "Read Preferences for Database Commands"
msgstr ""

#: ../source/reference/read-preference.txt:228
# 2382c3f65da34107962a6aa4f0666481
msgid "Because some :term:`database commands <database command>` read and return data from the database, all of the official drivers support full :ref:`read preference mode semantics <replica-set-read-preference-modes>` for the following commands:"
msgstr ""

#: ../source/reference/read-preference.txt:233
# 2fbfde9131ca472b8a87bbf25c2763de
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-preference.txt:234
# b7d917f884c2412f97762009e58e302c
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

#: ../source/reference/read-preference.txt:235
# d3889a67e5944b8c9d1186bf42676910
msgid ":dbcommand:`aggregate`"
msgstr ""

#: ../source/reference/read-preference.txt:236
# 290deaf135f74d41b98195871a434da1
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/reference/read-preference.txt:237
# 3dd99c4ce47c4cf1a8a012788f745cc3
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/reference/read-preference.txt:238
# 57d5f07a061d457c908b2b9d749f6f9b
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-preference.txt:239
# b742a45d3aa6470ea19533658a89b57a
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-preference.txt:240
# 027d2f49a2e04679862f34df5d0987f9
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-preference.txt:241
# 638199ed6bb741ecb381b58797af3f97
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-preference.txt:242
# ec30cf5616ca4d99884de7a5317bb48e
msgid ":dbcommand:`geoWalk`"
msgstr ""

#: ../source/reference/read-preference.txt:244
# f9fd393c6ee94fd3a74962d14ba5c6f6
msgid ":program:`mongos` adds support for routing commands to shards using read preferences. Previously :program:`mongos` sent all commands to shards' primaries."
msgstr ""

#: ../source/reference/read-preference.txt:249
# 69545a91299248feb4287d6746cda49b
msgid "Only \"inline\" :dbcommand:`mapReduce` operations that do not write data support read preference, otherwise these operations must run on the :term:`primary` members."
msgstr ""

#: ../source/reference/read-preference.txt:11
#: ../source/reference/read-preference.txt:13
# 25e7c1b0ae8b4c489f312ca1d9de04cc
# 432559276c354852a961a1236732a431
msgid "read preference"
msgstr ""

#: ../source/reference/read-preference.txt:11
# 25e7c1b0ae8b4c489f312ca1d9de04cc
msgid "semantics"
msgstr ""

#: ../source/reference/read-preference.txt:13
# 432559276c354852a961a1236732a431
msgid "modes"
msgstr ""

