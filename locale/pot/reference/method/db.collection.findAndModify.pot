# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/method/db.collection.findAndModify.txt:3
# 13d3b8a908e84f49b99556c5d0ab464f
msgid "db.collection.findAndModify()"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:12
# 9004adf57c944c63a9e33f8343500113
msgid "Definition"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:16
# 553bd15835d44ca2a656d7c743fe0f9a
msgid "Atomically modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the ``new`` option. The :method:`~db.collection.findAndModify()` method is a shell helper around the :dbcommand:`findAndModify` command."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:23
# c2d8c73d523442e0a1dd0208cd601dcb
msgid "The :method:`~db.collection.findAndModify()` method has the following form:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:38
# 66f19ff1557a4e15aa83398296416320
msgid "The :method:`db.collection.findAndModify()` method takes a document parameter with the following subdocument fields:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:44
# 832a9f5353b34a26b3ee786d7993fb73
msgid "Return Data"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:46
# 882d0e8e9d644411927cd4904a98bde8
msgid "The :method:`~db.collection.findAndModify()` method returns either: the pre-modification document or, if ``new: true`` is set, the modified document."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:52
# 9721551219ca419b888e62f94ba04769
msgid "If the query finds no document for ``update`` or ``remove`` operations, :method:`~db.collection.findAndModify()` returns ``null``."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:56
# 8b8e3ff3c49c4f9ebc20a362b1a7ede1
msgid "If the query finds no document for an ``upsert``, operation, :method:`~db.collection.findAndModify()` performs an insert. If ``new`` is ``false``, **and** the ``sort`` option is **NOT** specified, the method returns ``null``."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:61
# 3384de3783b446d8991925d136c619b2
msgid "Previously returned an empty document ``{}``. See :ref:`the 2.2 release notes <2.2-findandmodify-returns-null>` for more information."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:66
# b318b6af811b4644815ce9f864406ce8
msgid "If the query finds no document for an ``upsert``, :method:`~db.collection.findAndModify()` performs an insert. If ``new`` is ``false``, **and** a ``sort`` option, the method returns an empty document ``{}``."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:72
# bc6134f46c214619ab5519faab1a6287
msgid "Behaviors"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:77
# f8116807a8e24fee887a7ee2e5f4215c
msgid "Upsert and Unique Index"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:79
# 6d088071102649feb381630e016cff1e
msgid "When :method:`~db.collection.findAndModify()` includes the ``upsert: true`` option **and** the query field(s) is not uniquely indexed, the method could insert a document multiple times in certain circumstances. For instance, if multiple clients each invoke the method with the same ``query`` condition and these methods complete the ``find`` phase before any of methods perform the ``modify`` phase, these methods could insert the same document."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:87
# 951ef2fd6d9f4564a034c236c6e0d651
msgid "In the following example, no document with the name ``Andy`` exists, and multiple clients issue the following command:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:99
# f786586d372346bdba61863c6a7ec9aa
msgid "Then, if these clients' :method:`~db.collection.findAndModify()` methods finish the ``query`` phase before any command starts the ``modify`` phase, **and** there is no unique index on the ``name`` field, the commands may all perform an upsert. To prevent this condition, create a :ref:`unique index <index-type-unique>` on the ``name`` field. With the unique index in place, the multiple methods would observe one of the following behaviors:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:107
# e86ce1cf848347d882eda17ecb9c3a94
msgid "Exactly one :method:`~db.collection.findAndModify()` would successfully insert a new document."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:110
# 767f64f0ad2143538c5c0862881e7068
msgid "Zero or more :method:`~db.collection.findAndModify()` methods would update the newly inserted document."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:113
# ca22f9cab31447c5a91dd4ea19913b5d
msgid "Zero or more :method:`~db.collection.findAndModify()` methods would fail when they attempted to insert a duplicate. If the method fails due to a unique index constraint violation, you can retry the method. Absent a delete of the document, the retry should not fail."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:120
# 4c52edfaa28542eba78430d0396bed77
msgid "Sharded Collections"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:122
# 9f0883bf0c4e4b8f996aac320dab7a4c
msgid "When using :dbcommand:`findAndModify` in a :term:`sharded <sharding>` environment, the ``query`` **must** contain the :term:`shard key` for all operations against the shard cluster for the *sharded* collections."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:126
# 8fbcd46417534025bd5c8e30b4b1b228
msgid ":dbcommand:`findAndModify` operations issued against :program:`mongos` instances for *non-sharded* collections function normally."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:130
# 08b5adb648b341e6b33d9365a2137e36
msgid "Examples"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:133
# 1a1f7a470b6a49cf85e8c56d3aeaf198
msgid "Update and Return"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:135
# 70eae265ac5c4b45a27137c6816f2943
msgid "The following method updates and returns an existing document in the people collection where the document matches the query criteria:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:146
# 21dc31180c8749df8609b8fdcae19b75
msgid "This method performs the following actions:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:148
# e5e5690d62774292bdf9d534f1a5644c
msgid "The ``query`` finds a document in the ``people`` collection where the ``name`` field has the value ``Tom``, the ``state`` field has the value ``active`` and the ``rating`` field has a value :operator:`greater than <$gt>` 10."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:153
# 4a8c4fc9ca2b486ead09edb68329b934
msgid "The ``sort`` orders the results of the query in ascending order. If multiple documents meet the ``query`` condition, the method will select for modification the first document as ordered by this ``sort``."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:158
# c2eec6171e014722a3a9e8e2545c6868
msgid "The update :operator:`increments <$inc>` the value of the ``score`` field by 1."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:161
# a8cb49863da44c6ba3ec8b72125801cd
msgid "The method returns the original (i.e. pre-modification) document selected for this update:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:174
# ea98bfaaaa0948c09c20b1d6b69d3f63
msgid "To return the modified document, add the ``new:true`` option to the method."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:177
# 12c6bdca01aa4944acd9fe73d9b420cc
msgid "If no document matched the ``query`` condition, the method returns ``null``:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:185
# 7ffa012d9a66491ca48955ee3c3f8a00
msgid "Update and Insert"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:187
# 7c93eaeb8abb4598a3dae8cc9c8bb4bc
msgid "The following method includes the ``upsert: true`` option to insert a new document if no document matches the ``query`` condition:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:200
# a7ffbb1afa424188afdb2fea6aed7b80
msgid "If the method does **not** find a matching document, the method performs an upsert. Because the method included the ``sort`` option, it returns an empty document ``{ }`` as the original (pre-modification) document:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:209
# 97cb0bc8a0dd4e6caef42fce0ab0ca39
msgid "If the method did **not** include a ``sort`` option, the method returns ``null``."
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:217
# db5e188b2cde42ee8c9adf0c91759036
msgid "Update, Insert and Return New Document"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:219
# fcdcb0c7297a411ba93ae2085da15108
msgid "The following method includes both the ``upsert: true`` option and the ``new:true`` option to return the newly inserted document if a document matching the ``query`` is not found:"
msgstr ""

#: ../source/reference/method/db.collection.findAndModify.txt:233
# 638f3a990dba40148f25c7476a650a95
msgid "The method returns the newly inserted document:"
msgstr ""

