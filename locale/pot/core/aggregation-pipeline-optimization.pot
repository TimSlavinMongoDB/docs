# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline-optimization.txt:3
# c5545e19cf594f999c57a917d4ec2de5
msgid "Aggregation Pipeline Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:9
# 466e601a4679473b87d200b748fa020c
msgid "Aggregation pipeline operations have an optimization phase which attempts to rearrange the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:15
# 50f45e844b994ea9ae5583a58fc23597
msgid "Pipeline Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:18
# 45004d31ef1d4230a428a11163581d02
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:20
# c4b28a6cf4694fb88e81c94762efae9f
msgid "When you have a sequence with :pipeline:`$sort` followed by a :pipeline:`$skip` followed by a :pipeline:`$limit`, an optimization occurs that moves the :pipeline:`$limit` operator before the :pipeline:`$skip` operator. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:32
# e4fe9b5c08ff405cb23e68c63d8343a8
msgid "During the optimization phase, the optimizer transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:43
# f4258a98c29f4e3bafdd07bb05e7082d
msgid "The :pipeline:`$limit` value has increased to the sum of the initial value and the :pipeline:`$skip` value."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:46
# 93adbd49c91d4b5c8d46517fc8ad0081
msgid "The optimized sequence now has :pipeline:`$sort` immediately preceding the :pipeline:`$limit`. See :pipeline:`$sort` for information on the behavior of the :pipeline:`$sort` operation when it immediately precedes :pipeline:`$limit`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:52
# 9825879f0d8e43a7a4124e0afa911adb
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:54
# 96d12236a54f4bd19194f118fe27f3bf
msgid "When you have a continuous sequence of a :pipeline:`$limit` pipeline stage followed by a :pipeline:`$skip` pipeline stage, the optimization phase attempts to arrange the pipeline stages to combine the limits and skips. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:67
# 39e9bcf95bd749cda1bb79005003ae2c
msgid "During the intermediate step, the optimizer reverses the position of the :pipeline:`$skip` followed by a :pipeline:`$limit` to :pipeline:`$limit` followed by the :pipeline:`$skip`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:78
# f5a6a52ec1824642871ba6b0a855e5e7
msgid "The :pipeline:`$limit` value has increased to the sum of the initial value and the :pipeline:`$skip` value. Then, for the final :pipeline:`$limit` value, the optimizer selects the minimum between the adjacent :pipeline:`$limit` values. For the final :pipeline:`$skip` value, the optimizer adds the adjacent :pipeline:`$skip` values, to transform the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:94
# dc22f55e1f0541ad8114f28991cb96cf
msgid "Projection Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:96
# 80bb204be4704bcbb0728a76a7d52a75
msgid "If the aggregation pipeline contains a :pipeline:`$project` stage that specifies the fields to **include**, then MongoDB applies the projection to the head of the pipeline. This reduces the amount of data passing through the pipeline from the start. In the following example, the :pipeline:`$project` stage specifies that the results of this stage return only the ``_id`` and the ``amount`` fields. The optimization phase applies the projection to the head of the pipeline such that only the ``_id`` and the ``amount`` fields return in the resulting documents from the :pipeline:`$match` stage as well."
msgstr ""

