# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-introduction.txt:3
# fe08403635874567a614d215063e29dd
msgid "Sharding Introduction"
msgstr ""

#: ../source/core/sharding-introduction.txt:7
# 2c0bfff58cbe44c48f58fd847c944657
msgid "Sharding is a method for storing data across multiple machines. MongoDB uses sharding to support deployments with very large data sets and high throughput operations."
msgstr ""

#: ../source/core/sharding-introduction.txt:12
# d709c08da6c84620a6fbe3fb7fe6a35c
msgid "Purpose of Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:14
# 30ce13042a9c47c18cb5dcaac31c3451
msgid "Database systems with large data sets and high throughput applications can challenge the capacity of a single server. High query rates can exhaust the CPU capacity of the server. Larger data sets exceed the storage capacity of a single machine. Finally, working set sizes larger than the system's RAM stress the I/O capacity of disk drives."
msgstr ""

#: ../source/core/sharding-introduction.txt:20
# d610738a5ced4af691ae620deba98771
msgid "To address these issues of scales, database systems have two basic approaches: **vertical scaling** and **sharding**."
msgstr ""

#: ../source/core/sharding-introduction.txt:23
# d9a0bf2009c44157b52f50477731aa60
msgid "**Vertical scaling** adds more CPU and storage resources to increase capacity. Scaling by adding capacity has limitations: high performance systems with large numbers of CPUs and large amount of RAM are disproportionately *more expensive* than smaller systems. Additionally, cloud-based providers may only allow users to provision smaller instances.  As a result there is a *practical maximum* capability for vertical scaling."
msgstr ""

#: ../source/core/sharding-introduction.txt:31
# 61ef814f27654b4b91200352ca4f1a5e
msgid "**Sharding**, or *horizontal scaling*, by contrast, divides the data set and distributes the data over multiple servers, or **shards**. Each shard is an independent database, and collectively, the shards make up a single logical database."
msgstr ""

#: ../source/core/sharding-introduction.txt:38
# a32102f534d349b98fa80c1130694427
msgid "Sharding addresses the challenge of scaling to support high throughput and large data sets:"
msgstr ""

#: ../source/core/sharding-introduction.txt:41
# 41ac8e99033640c1b6d57ba5e966c415
msgid "Sharding reduces the number of operations each shard handles. Each shard processes fewer operations as the cluster grows. As a result, shared clusters can increase capacity and throughput *horizontally*."
msgstr ""

#: ../source/core/sharding-introduction.txt:45
# 6f0b4d85ae7342e7a7dbf0cca93446c6
msgid "For example, to insert data, the application only needs to access the shard responsible for that records."
msgstr ""

#: ../source/core/sharding-introduction.txt:48
# c2b72bc72f0d45fcbaa4cb1689104ba1
msgid "Sharding reduces the amount of data that each server needs to store. Each shard stores less data as the cluster grows."
msgstr ""

#: ../source/core/sharding-introduction.txt:51
# ba7df05e04274634be2183ea058c85d7
msgid "For example, if a database has a 1 terabyte data set, and there are 4 shards, then each shard might hold only 256GB of data. If there are 40 shards, then each shard might hold only 25GB of data."
msgstr ""

#: ../source/core/sharding-introduction.txt:56
# 135fdeddedcc4d7894a74756229cc118
msgid "Sharding in MongoDB"
msgstr ""

#: ../source/core/sharding-introduction.txt:58
# 85a21eb6642f495b987f81c53b227f82
msgid "MongoDB supports sharding through the configuration of a :term:`sharded clusters <sharded cluster>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:63
# a50c6066997846808937519c1ae1de13
msgid "Sharded cluster has the following components: :term:`shards <shard>`, :term:`query routers <mongos>` and :term:`config servers <config server>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:66
# 9662a3da06404a2282e1a663c4350dd1
msgid "**Shards** store the data. To provide high availability and data consistency, in a production sharded cluster, each shard is a :term:`replica set` [#dev-only-shard-deployment]_. For more information on replica sets, see :doc:`Replica Sets </core/replication>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:72
# 5dbe99e72d4e4daba4f4d39d5cbd7737
msgid "**Query Routers**, or :program:`mongos` instances, interface with client applications and direct operations to the appropriate shard or shards. The query router processes and targets operations to shards and then returns results to the clients. A sharded cluster can contain more than one query router to divide the client request load. A client sends requests to one query router. Most sharded cluster have many query routers."
msgstr ""

#: ../source/core/sharding-introduction.txt:79
# bda52132909c4de693b101adebf23bb8
msgid "**Config servers** store the cluster's metadata. This data contains a mapping of the cluster's data set to the shards. The query router uses this metadata to target operations to specific shards. Production sharded clusters have *exactly* 3 config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:84
# 773d89abe64f4b2dbaef7b86784a7d43
msgid "For development and testing purposes only, each **shard** can be a single :program:`mongod` instead of a replica set. Do **not** deploy production clusters without 3 config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:92
# 5735d155d4584365974d290c87f97d1b
msgid "Data Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:94
# aead2fd92d4f42b19b3ea34f6af647c5
msgid "MongoDB distributes data, or shards, at the collection level. Sharding partitions a collection's data by the **shard key**."
msgstr ""

#: ../source/core/sharding-introduction.txt:98
# b74877afa7e9452bb276e6cf9da47e52
msgid "Shard Keys"
msgstr ""

#: ../source/core/sharding-introduction.txt:100
# 72499859229c4b10a674606a2b2f03b7
msgid "To shard a collection, you need to select a **shard key**. A :term:`shard key` is either an indexed field or an indexed compound field that exists in every document in the collection. MongoDB divides the shard key values into **chunks** and distributes the :term:`chunks <chunk>` evenly across the shards. To divide the shard key values into chunks, MongoDB uses either **range based partitioning** and **hash based partitioning**. See :doc:`/core/sharding-shard-key` for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:110
# 8b9e83c6e69d4082a4e86fd0740ae3e6
msgid "Range Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:112
# 840ea63675a54328bd56b3c071d647a8
msgid "For *range-based sharding*, MongoDB divides the data set into ranges determined by the shard key values to provide **range based partitioning**. Consider a numeric shard key: If you visualize a number line that goes from negative infinity to positive infinity, each value of the shard key falls at some point on that line. MongoDB partitions this line into smaller, non-overlapping ranges called **chunks** where a chunk is range of values from some minimum value to some maximum value."
msgstr ""

#: ../source/core/sharding-introduction.txt:121
# 354baf54bc584b4c8fcacc869e3b45b8
msgid "Given a range based partitioning system, documents with \"close\" shard key values are likely to be in the same chunk, and therefore on the same shard."
msgstr ""

#: ../source/core/sharding-introduction.txt:128
# 151a7bd12dc9431090777bf5bf8469e8
msgid "Hash Based Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:130
# 15f6b95aaeca4e02b8ad5d36101d3d7f
msgid "For *hash based partitioning*, MongoDB computes a hash of a field's value, and then uses these hashes to create chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:133
# 64f2cbd0a1f543faa26ef1907b1d51e6
msgid "With hash based partitioning, two documents with \"close\" shard key values are *unlikely* to be part of the same chunk. This ensures a more random distribution of a collection in the cluster."
msgstr ""

#: ../source/core/sharding-introduction.txt:140
# aae7c27892754a5fbcd98baf89faabc8
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr ""

#: ../source/core/sharding-introduction.txt:142
# 1483e0fbaa8e46e9a2aff69938cf2139
msgid "Range based partitioning supports more efficient range queries. Given a range query on the shard key, the query router can easily determine which chunks overlap that range and route the query to only those shards that contain these chunks."
msgstr ""

#: ../source/core/sharding-introduction.txt:147
# bfce866e0df6418191b9fa603624a795
msgid "However, range based partitioning can result in an uneven distribution of data, which may negate some of the benefits of sharding. For example, if the shard key is a linearly increasing field, such as time, then all requests for a given time range will map to the same chunk, and thus the same shard. In this situation, a small set of shards may receive the majority of requests and the system would not scale very well."
msgstr ""

#: ../source/core/sharding-introduction.txt:155
# cb2efac4b50c45a6954e854f5021188f
msgid "Hash based partitioning, by contrast, ensures an even distribution of data at the expense of efficient range queries. Hashed key values results in random distribution of data across chunks and therefore shards. But random distribution makes it more likely that a range query on the shard key will not be able to target a few shards but would more likely query every shard in order to return a result."
msgstr ""

#: ../source/core/sharding-introduction.txt:163
# adab16cf5b72476fa00356d977bf1720
msgid "Maintaining a Balanced Data Distribution"
msgstr ""

#: ../source/core/sharding-introduction.txt:165
# c654a03ef3264e04a451b0c5cd332458
msgid "The addition of new data or the addition of new servers can result in data distribution imbalances within the cluster, such as a particular shard contains significantly more chunks than another shard or a size of a chunk is significantly greater than other chunk sizes."
msgstr ""

#: ../source/core/sharding-introduction.txt:170
# 9480cf0c4b6943e088698a922b407866
msgid "MongoDB ensures a balanced cluster using two background process: splitting and the balancer."
msgstr ""

#: ../source/core/sharding-introduction.txt:174
# 8d96084e561b4b0ca6fa400d51fa8769
msgid "Splitting"
msgstr ""

#: ../source/core/sharding-introduction.txt:176
# dc9632819b86479ba3382219b92bec35
msgid "Splitting is a background process that keeps chunks from growing too large. When a chunk grows beyond a :ref:`specified chunk size <sharding-chunk-size>`, MongoDB splits the chunk in half. Inserts and updates triggers splits. Splits are a efficient meta-data change. To create splits, MongoDB does *not* migrate any data or affect the shards."
msgstr ""

#: ../source/core/sharding-introduction.txt:186
# 744f398af2444a70a2fc765c369ece21
msgid "Balancing"
msgstr ""

#: ../source/core/sharding-introduction.txt:188
# 04180ac0cf924c4388667e2cc25efa42
msgid "The :ref:`balancer <sharding-balancing-internals>` is a background process that manages chunk migrations. The balancer runs in all of the query routers in a cluster."
msgstr ""

#: ../source/core/sharding-introduction.txt:192
# d6a69cd2c19d4cb3a1d51f9bd541da20
msgid "When the distribution of a sharded collection in a cluster is uneven, the balancer process migrates chunks from the shard that has the largest number of chunks to the shard with the least number of chunks until the collection balances. For example: if collection ``users`` has 100 chunks on *shard 1* and 50 chunks on *shard 2*, the balancer will migrate chunks from *shard 1* to *shard 2* until the collection achieves balance."
msgstr ""

#: ../source/core/sharding-introduction.txt:200
# 144a2de960a04312bfbe19e7ae8e9541
msgid "The shards manage *chunk migrations* as a background operation. During migration, all requests for a chunk's data address the \"origin\" shard."
msgstr ""

#: ../source/core/sharding-introduction.txt:203
# 5c249e1fdeff472f91726273fe9acf12
msgid "In a chunk migration, the *destination shard* receives all the documents in the chunk from the *origin shard*. Then, the destination shard captures and applies all changes made to the data during migration process. Finally, the destination shard updates the metadata regarding the location of the chunk on *config server*."
msgstr ""

#: ../source/core/sharding-introduction.txt:209
# 3913639754754c0e9cceafed3fdb6ef4
msgid "If there's an error during the migration, the balancer aborts the process leaving the chunk on the origin shard. MongoDB removes the chunk's data from the origin shard **after** the migration completes successfully."
msgstr ""

#: ../source/core/sharding-introduction.txt:217
# a39ac2437664442faeec2bd2836fd133
msgid "Adding and Removing Shards from the Cluster"
msgstr ""

#: ../source/core/sharding-introduction.txt:219
# c3a3918e74874bffbb3c8293830145ad
msgid "Adding a shard to a cluster creates an imbalance  since the new shard has no chunks. While MongoDB begins migrating data to the new shard immediately, it can take some time before the cluster balances."
msgstr ""

#: ../source/core/sharding-introduction.txt:223
# 6fa7cf7aa3704e7d8517a6ba84df11fa
msgid "When removing a shard, the balancer migrates all chunks from to other shards. After migrating all data and updating the meta data, you can safely remove the shard."
msgstr ""

