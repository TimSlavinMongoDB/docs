# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/index-compound.txt:7
# f8022863ec7f43ddb970ed25deb74be9
msgid "Compound Indexes"
msgstr ""

#: ../source/core/index-compound.txt:11
# ec4b3eceb1194d418a3efdfb17ee5b8e
msgid "MongoDB supports *compound indexes*, where a single index structure holds references to multiple fields [#compound-index-field-limit]_ within a collection's documents. The following diagram illustrates an example of a compound index on two fields:"
msgstr ""

#: ../source/core/index-compound.txt:19
# e45242128606434eae961da8bd4fa8b9
msgid "MongoDB imposes a :limit:`limit of 31 fields for any compound index <Number of Indexed Fields in a Compound Index>`."
msgstr ""

#: ../source/core/index-compound.txt:22
# 26ec19c45db84e4bba273e5bd3ff84ba
msgid "Compound indexes can support queries that match on multiple fields."
msgstr ""

#: ../source/core/index-compound.txt:0
# d0784e18f3814c2f96ec15b6bb497d13
msgid "Example"
msgstr ""

#: ../source/core/index-compound.txt:26
# 1b44fc385ee64d339355825dd4f5a898
msgid "Consider a collection named ``products`` that holds documents that resemble the following document:"
msgstr ""

#: ../source/core/index-compound.txt:42
# 0603ab1f9131493b9af09f1499d52de8
msgid "If applications query on the ``item`` field as well as query on both the ``item`` field and the ``stock`` field, you can specify a single compound index to support both of these queries:"
msgstr ""

#: ../source/core/index-compound.txt:50
# 5be05c36740e409b9cfc097737558597
msgid "You may not create compound indexes that have ``hashed`` index fields. You will receive an error if you attempt to create a compound index that includes :doc:`a hashed index </core/index-hashed>`."
msgstr ""

#: ../source/core/index-compound.txt:55
# 0159a9fbbabb40d2b1c6193a6e975a1d
msgid "The order of the fields in a compound index is very important. In the previous example, the index will contain references to documents sorted first by the values of the ``item`` field and, within each value of the ``item`` field, sorted by values of the ``stock`` field. See :ref:`index-ascending-and-descending` for more information."
msgstr ""

#: ../source/core/index-compound.txt:61
# c5f439ba7493409389b5ab99e74eca53
msgid "In addition to supporting queries that match on all the index fields, compound indexes can support queries that match on the prefix of the index fields. For details, see :ref:`compound-index-prefix`."
msgstr ""

#: ../source/core/index-compound.txt:69
# e26b0b69c80d42bbbf67c5df94eff13e
msgid "Sort Order"
msgstr ""

#: ../source/core/index-compound.txt:71
# 2d0dbf1b2ea246f0829efa8045b263f2
msgid "Indexes store references to fields in either ascending (``1``) or descending (``-1``) sort order. For single-field indexes, the sort order of keys doesn't matter because MongoDB can traverse the index in either direction. However, for :ref:`compound indexes <index-type-compound>`, sort order can matter in determining whether the index can support a sort operation."
msgstr ""

#: ../source/core/index-compound.txt:78
# 523032ad65694886868963189b82564a
msgid "Consider a collection ``events`` that contains documents with the fields ``username`` and ``date``. Applications can issue queries that return results sorted first by ascending ``username`` values and then by descending (i.e. more recent to last) ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:87
# f0b5fd24d29f489b8c6f0c44f60e48bd
msgid "or queries that return results sorted first by descending ``username`` values and then by ascending ``date`` values, such as:"
msgstr ""

#: ../source/core/index-compound.txt:94
# 12344471e69e4adf980b5b8e6e1fcb2e
msgid "The following index can support both these sort operations:"
msgstr ""

#: ../source/core/index-compound.txt:100
# 96ec76b8c730416d8f963fb01bfc140c
msgid "However, the above index **cannot** support sorting by ascending ``username`` values and then by ascending ``date`` values, such as the following:"
msgstr ""

#: ../source/core/index-compound.txt:111
# c5c259d3a9254eaba8cc91f648f5ef15
msgid "Prefixes"
msgstr ""

#: ../source/core/index-compound.txt:113
# f3246a8975e044948ba5fae4dc40d0d8
msgid "Compound indexes support queries on any prefix of the index fields. Index prefixes are the beginning subset of indexed fields. For example, given the index ``{ a: 1, b: 1, c: 1 }``, both ``{ a: 1 }`` and ``{ a: 1, b: 1 }`` are prefixes of the index."
msgstr ""

#: ../source/core/index-compound.txt:118
# 12998c9594fa48819720ab6a774da0f2
msgid "If you have a collection that has a compound index on ``{ a: 1, b: 1 }``, as well as an index that consists of the prefix of that index, i.e. ``{ a: 1 }``, assuming none of the index has a sparse or unique constraints, then you can drop the ``{ a: 1 }`` index. MongoDB will be able to use the compound index in all of situations that it would have used the ``{ a: 1 }`` index."
msgstr ""

#: ../source/core/index-compound.txt:125
# 0d0ea45201b14c04b2bcc386d34c49c7
msgid "For example, given the following index:"
msgstr ""

#: ../source/core/index-compound.txt:131
# c2aca12f0a064c7d886328f4f2ff67a5
msgid "MongoDB **can** use this index to support queries that include:"
msgstr ""

#: ../source/core/index-compound.txt:133
# c9ebc4b5c4d7469398b77f6ed4ac4987
msgid "the ``item`` field,"
msgstr ""

#: ../source/core/index-compound.txt:134
# 6b0986d2a63747fdbab94bac58722309
msgid "the ``item`` field *and* the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:135
# 6ce66a40b0c648fea619ab6f60796b80
msgid "the ``item`` field *and* the ``location`` field *and* the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:137
# 756fa351fcbe4f85b2b1b8530fda3c3c
msgid "only the ``item`` *and* ``stock`` fields; however, this index would be less efficient than an index on only ``item`` and ``stock``."
msgstr ""

#: ../source/core/index-compound.txt:141
# 1d540c5851514323b4aa8ed6cca7e0e6
msgid "MongoDB **cannot** use this index to support queries that include:"
msgstr ""

#: ../source/core/index-compound.txt:143
# 6db1ddbbbb0b4727b5abb823168687ee
msgid "only the ``location`` field,"
msgstr ""

#: ../source/core/index-compound.txt:144
# d0296d1c2a2143608212aed777c9a1e7
msgid "only the ``stock`` field, or"
msgstr ""

#: ../source/core/index-compound.txt:145
# afd99456334d491985b778ac6473d3cb
msgid "only the ``location`` *and* ``stock`` fields."
msgstr ""

#: ../source/core/index-compound.txt:148
# 484e5b3040be4760af59a78a9397bfc0
msgid "Index Intersection"
msgstr ""

#: ../source/includes/fact-index-intersection-vs-compound-indexes.rst:1
# cc482098172d428a96e7d1087fcc8890
msgid "Starting in version 2.5.5, MongoDB can use :doc:`index intersection</core/index-intersection>` to fulfill queries. The choice between creating compound indexes that support your queries or relying on index intersection depends on the specifics of your system. See :ref:`index-intersection-compound-indexes` for more details."
msgstr ""

#: ../source/core/index-compound.txt:1
#: ../source/core/index-compound.txt:65
# da5248208ed043c4b1b3acaa3ca0282e
# 7d1086547a5543afbe7d7f2301d7f31c
msgid "index"
msgstr ""

#: ../source/core/index-compound.txt:1
# da5248208ed043c4b1b3acaa3ca0282e
msgid "compound"
msgstr ""

#: ../source/core/index-compound.txt:2
# 471c3d307a814a6899bc17eb83f6eee0
msgid "compound index"
msgstr ""

#: ../source/core/index-compound.txt:65
# 7d1086547a5543afbe7d7f2301d7f31c
msgid "sort order"
msgstr ""

