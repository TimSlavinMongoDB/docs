# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/geospatial-indexes.txt:3
# b0900217157649c39983b9b8d368e67c
msgid "``2d`` Index Internals"
msgstr ""

#: ../source/core/geospatial-indexes.txt:7
# 6c91efdc46174b75a24190078576d5de
msgid "This document provides a more in-depth explanation of the internals of MongoDB's ``2d`` geospatial indexes. This material is not necessary for normal operations or application development but may be useful for troubleshooting and for further understanding."
msgstr ""

#: ../source/core/geospatial-indexes.txt:15
# 63c3824d255c4e9dba1610113d1eca02
msgid "Calculation of Geohash Values for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:17
# 307f897b6fc64a9c8b869f966ceddc77
msgid "When you create a geospatial index on :term:`legacy coordinate pairs <legacy coordinate pairs>`, MongoDB computes :term:`geohash` values for the coordinate pairs within the specified :ref:`location range <geospatial-indexes-range>` and then indexes the geohash values."
msgstr ""

#: ../source/core/geospatial-indexes.txt:22
# 5a0296ab65764dbbb7c9a6bffac77468
msgid "To calculate a geohash value, recursively divide a two-dimensional map into quadrants. Then assign each quadrant a two-bit value. For example, a two-bit representation of four quadrants would be:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:32
# fb5cc327bb6046d8a7a3e9904b1c8207
msgid "These two-bit values (``00``, ``01``, ``10``, and ``11``) represent each of the quadrants and all points within each quadrant. For a geohash with two bits of resolution, all points in the bottom left quadrant would have a geohash of ``00``. The top left quadrant would have the geohash of ``01``. The bottom right and top right would have a geohash of ``10`` and ``11``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:39
# 39483b3eacf546f182027cb64b5a0290
msgid "To provide additional precision, continue dividing each quadrant into sub-quadrants. Each sub-quadrant would have the geohash value of the containing quadrant concatenated with the value of the sub-quadrant. The geohash for the upper-right quadrant is ``11``, and the geohash for the sub-quadrants would be (clockwise from the top left): ``1101``, ``1111``, ``1110``, and ``1100``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:56
# baa74d8c6c674f56911493f80007af11
msgid "Multi-location Documents for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:58
# 2cd2b00e39034aefa91a63a8869eac6b
msgid "Support for multiple locations in a document."
msgstr ""

#: ../source/core/geospatial-indexes.txt:61
# 66fd49b7cbd943958ef64dadcab3df72
msgid "While ``2d`` geospatial indexes do not support more than one set of coordinates in a document, you can use a :ref:`multi-key index <index-type-multi-key>` to index multiple coordinate pairs in a single document. In the simplest example you may have a field (e.g. ``locs``) that holds an array of coordinates, as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:76
# d5f3b4355875430eb6b79e1e76f8642a
msgid "The values of the array may be either arrays, as in ``[ 55.5, 42.3 ]``, or embedded documents, as in ``{ lng : 55.5 , lat : 42.3 }``."
msgstr ""

#: ../source/core/geospatial-indexes.txt:79
# 02c17a9f605d4a099053de983dff4cd6
msgid "You could then create a geospatial index on the ``locs`` field, as in the following:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:86
# f1f8721f75394a72b4110d90d9775efe
msgid "You may also model the location data as a field inside of a sub-document. In this case, the document would contain a field (e.g. ``addresses``) that holds an array of documents where each document has a field (e.g. ``loc:``) that holds location coordinates. For example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:107
# 8db1b199b8af435c9fdc159bcf0f4853
msgid "You could then create the geospatial index on the ``addresses.loc`` field as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:114
# 7ab38f163f6840349d0237db586b7979
msgid "For documents with multiple coordinate values, queries may return the same document multiple times if more than one indexed coordinate pair satisfies the query constraints. Use the ``uniqueDocs`` parameter to :dbcommand:`geoNear` or the :query:`$uniqueDocs` operator with :query:`$geoWithin`."
msgstr ""

#: ../source/core/geospatial-indexes.txt:120
# 4267ea61de964f1d85f1be41c18d0a78
msgid "To include the location field with the distance field in multi-location document queries, specify ``includeLocs: true`` in the :dbcommand:`geoNear` command."
msgstr ""

