# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/import-export.txt:3
# e868543f0f5b443896fb1cb83a16f662
msgid "Import and Export MongoDB Data"
msgstr ""

#: ../source/core/import-export.txt:7
# eb8163f971964b5084b1d968a1b76a37
msgid "This document provides an overview of the import and export programs included in the MongoDB distribution. These tools are useful when you want to backup or export a portion of your data without capturing the state of the entire database, or for simple data ingestion cases. For more complex data migration tasks, you may want to write your own import and export scripts using a client :term:`driver` to interact with the database itself. For disaster recovery protection and routine database backup operation, use full :doc:`database instance backups </core/backups>`."
msgstr ""

#: ../source/core/import-export.txt:19
# b6c91fd7cf194623a28ff4c7917926b8
msgid "Because these tools primarily operate by interacting with a running :program:`mongod` instance, they can impact the performance of your running database."
msgstr ""

#: ../source/core/import-export.txt:23
# ce9c9eb0c245426aa3ea635245ffb990
msgid "Not only do these processes create traffic for a running database instance, they also force the database to read all data through memory. When MongoDB reads infrequently used data, it can supplant more frequently accessed data, causing a deterioration in performance for the database's regular workload."
msgstr ""

#: ../source/core/import-export.txt:29
# 9073d844970d40ce9f4d53c9a31cb30a
msgid ":program:`mongoimport` and :program:`mongoexport` do not reliably preserve all rich :term:`BSON` data types, because :term:`BSON` is a superset of :term:`JSON`. Thus, :program:`mongoimport` and :program:`mongoexport` cannot represent :term:`BSON` data accurately in :term:`JSON`. As a result data exported or imported with these tools may lose some measure of fidelity. See :doc:`/reference/mongodb-extended-json` for more information about MongoDB Extended JSON."
msgstr ""

#: ../source/core/import-export.txt:38
# 7e76413113484c89af436e93768536a1
msgid "See the :doc:`/core/backups` document for more information on backing up MongoDB instances. Additionally, consider the following references for commands addressed in this document:"
msgstr ""

#: ../source/core/import-export.txt:43
# 9ae5d51bdbac4689a222737c2bd7e61b
msgid ":doc:`/reference/program/mongoexport`"
msgstr ""

#: ../source/core/import-export.txt:44
# d27b9a821caa405fa2aaebb72afa364b
msgid ":doc:`/reference/program/mongorestore`"
msgstr ""

#: ../source/core/import-export.txt:45
# e9281e22afeb4c20b7d4b0fc8a9d0117
msgid ":doc:`/reference/program/mongodump`"
msgstr ""

#: ../source/core/import-export.txt:47
# a2db6ca6c3b54328907ff551fc07fee1
msgid "If you want to transform and process data once you've imported it in MongoDB consider the documents in the :doc:`/aggregation` section, including:"
msgstr ""

#: ../source/core/import-export.txt:51
# c563dce697524371b192519a95b3ecc2
msgid ":doc:`/core/map-reduce` and"
msgstr ""

#: ../source/core/import-export.txt:52
# f3baa2c9bcb643be87e2c23d66b1016c
msgid ":doc:`/core/aggregation`."
msgstr ""

#: ../source/core/import-export.txt:57
# 3a1495e599a749da9cc16e7ec4086aef
msgid "Data Type Fidelity"
msgstr ""

#: ../source/core/import-export.txt:59
# 4de22830543f4a0e9605c12f96b847b5
msgid ":term:`JSON` does not have the following data types that exist in :term:`BSON` documents: ``data_binary``, ``data_date``, ``data_timestamp``, ``data_regex``, ``data_oid`` and ``data_ref``. As a result using any tool that decodes BSON :term:`documents <document>` into JSON will suffer some loss of fidelity."
msgstr ""

#: ../source/core/import-export.txt:65
# 1ced12f80e614463b91ec4468ef89f97
msgid "If maintaining type fidelity is important, consider writing a data import and export system that does not force BSON documents into JSON form as part of the process. The following list of types contain examples for how MongoDB will represent how BSON documents render in JSON."
msgstr ""

#: ../source/core/import-export.txt:71
# d00034136ef747abb78e53625de3d2bd
msgid "``data_binary``"
msgstr ""

#: ../source/core/import-export.txt:77
# 2dc1db39cb32461c93f692e4af50639e
msgid "``<bindata>`` is the base64 representation of a binary string. ``<t>`` is the hexadecimal representation of a single byte indicating the data type."
msgstr ""

#: ../source/core/import-export.txt:81
# c5152a02b55b46989c7338e21a084d47
msgid "``data_date``"
msgstr ""

#: ../source/core/import-export.txt:87
# a7290e173333449788d75ba578a9ce33
msgid "``<date>`` is the JSON representation of a 64-bit signed integer for milliseconds since epoch."
msgstr ""

#: ../source/core/import-export.txt:90
# 8000abe1d7884cba80ecdab4829bc8c8
msgid "``data_timestamp``"
msgstr ""

#: ../source/core/import-export.txt:96
# 3f290180f5634fb0a41c589a9c38c967
msgid "``<t>`` is the JSON representation of a 32-bit unsigned integer for milliseconds since epoch. ``<i>`` is a 32-bit unsigned integer for the increment."
msgstr ""

#: ../source/core/import-export.txt:100
# 4e2fdfbaaf0c4e89b7c558c09a8786cc
msgid "``data_regex``"
msgstr ""

#: ../source/core/import-export.txt:106
# 07890bd5313c4535b0f300b378ee11c3
msgid "``<jRegex>`` is a string that may contain valid JSON characters and unescaped double quote (i.e. ``\"``) characters, but may not contain unescaped forward slash (i.e. ``/``) characters. ``<jOptions>`` is a string that may contain only the characters ``g``, ``i``, ``m``, and ``s``."
msgstr ""

#: ../source/core/import-export.txt:112
# 772e976cc09a49a6a620d522a42ee0b8
msgid "``data_oid``"
msgstr ""

#: ../source/core/import-export.txt:118
# bd838c5422f244bf84228ea48550519f
msgid "``<id>`` is a 24 character hexadecimal string. These representations require that ``data_oid`` values have an associated field named \":term:`_id`.\""
msgstr ""

#: ../source/core/import-export.txt:122
# f0ff72175f5649fb911a139ad73ec652
msgid "``data_ref``"
msgstr ""

#: ../source/core/import-export.txt:128
# 3c1999e708fe422bacf090a5851fe499
msgid "``<name>`` is a string of valid JSON characters. ``<id>`` is a 24 character hexadecimal string."
msgstr ""

#: ../source/core/import-export.txt:131
# e5c41754b3a54d00b26c1f3bd80b279a
msgid ":doc:`MongoDB Extended JSON </reference/mongodb-extended-json>`"
msgstr ""

#: ../source/core/import-export.txt:134
# e847877a0e554a808e05faa624ebc3a2
msgid "Data Import and Export and Backups Operations"
msgstr ""

#: ../source/core/import-export.txt:136
# d9c835eb397640488b8a765988e215da
msgid "For resilient and non-disruptive backups, use a file system or block-level disk snapshot function, such as the methods described in the :doc:`/core/backups` document. The tools and operations discussed provide functionality that's useful in the context of providing some kinds of backups."
msgstr ""

#: ../source/core/import-export.txt:142
# 293d0f557e8c4043953736283675deb2
msgid "By contrast, use import and export tools to backup a small subset of your data or to move data to or from a 3rd party system. These backups may capture a small crucial set of data or a frequently modified section of data, for extra insurance, or for ease of access. No matter how you decide to import or export your data, consider the following guidelines:"
msgstr ""

#: ../source/core/import-export.txt:148
# bd1ad26ff40e4d60854b28999fe999f7
msgid "Label files so that you can identify what point in time the export or backup reflects."
msgstr ""

#: ../source/core/import-export.txt:151
# 0be72478bbbf4004b310bb106efb9b64
msgid "Labeling should describe the contents of the backup, and reflect the subset of the data corpus, captured in the backup or export."
msgstr ""

#: ../source/core/import-export.txt:154
# 98119735f3d54f4a95427d6ebea21570
msgid "Do not create or apply exports if the backup process itself will have an adverse effect on a production system."
msgstr ""

#: ../source/core/import-export.txt:157
# d70368cf14cd4905b8a0f9fc65a5f016
msgid "Make sure that they reflect a consistent data state. Export or backup processes can impact data integrity (i.e. type fidelity) and consistency if updates continue during the backup process."
msgstr ""

#: ../source/core/import-export.txt:161
# 87952c848e0d49b5a8cd7b44c737bb44
msgid "Test backups and exports by restoring and importing to ensure that the backups are useful."
msgstr ""

#: ../source/core/import-export.txt:165
# 7be7b8edf6644401aa8e691e698e1c40
msgid "Human Intelligible Import/Export Formats"
msgstr ""

#: ../source/core/import-export.txt:167
# c79ac0fcbec44ce891467028605d4ec7
msgid "This section describes a process to import/export your database, or a portion thereof, to a file in a :term:`JSON` or :term:`CSV` format."
msgstr ""

#: ../source/core/import-export.txt:170
# 8ee2ac8789794d06b0185b48ae71b43c
msgid "The :doc:`/reference/program/mongoimport` and :doc:`/reference/program/mongoexport` documents contain complete documentation of these tools. If you have questions about the function and parameters of these tools not covered here, please refer to these documents."
msgstr ""

#: ../source/core/import-export.txt:176
# bb8660d6f6264cc79b234a1e92c132dd
msgid "If you want to simply copy a database or collection from one instance to another, consider using the :dbcommand:`copydb`, :dbcommand:`clone`, or :dbcommand:`cloneCollection` commands, which may be more suited to this task. The :program:`mongo` shell provides the :method:`db.copyDatabase()` method."
msgstr ""

#: ../source/core/import-export.txt:182
# cba620a428af4e3b834eadf9e21b47f0
msgid "These tools may also be useful for importing data into a MongoDB database from third party applications."
msgstr ""

#: ../source/core/import-export.txt:186
# 7ee823dae01145cea2ff64deeda00680
msgid "Collection Export with :program:`mongoexport`"
msgstr ""

#: ../source/core/import-export.txt:188
# c0a7785650ae41d6889e15f7fb44f48f
msgid "With the :program:`mongoexport` utility you can create a backup file. In the most simple invocation, the command takes the following form:"
msgstr ""

#: ../source/core/import-export.txt:196
# 5e8fa5d21e604291a27dbfa03d96c968
msgid "This will export all documents in the collection named ``collection`` into the file ``collection.json``. Without the output specification (i.e. \":option:`--out collection.json <mongoexport --out>`\"), :program:`mongoexport` writes output to standard output (i.e. \"stdout\"). You can further narrow the results by supplying a query filter using the \":option:`--query <mongoexport --query>`\" and limit results to a single database using the \":option:`--db <mongoexport --db>`\" option. For instance:"
msgstr ""

#: ../source/core/import-export.txt:209
# 0335a7fec400437d9236f7bef4411c87
msgid "This command returns all documents in the ``sales`` database's ``contacts`` collection, with a field named ``field`` with a value of ``1``. Enclose the query in single quotes (e.g. ``'``) to ensure that it does not interact with your shell environment. The resulting documents will return on standard output."
msgstr ""

#: ../source/core/import-export.txt:215
# cd51a8681002424ead590d0743863f22
msgid "By default, :program:`mongoexport` returns one :term:`JSON document` per MongoDB document. Specify the \":option:`--jsonArray <mongoexport --jsonArray>`\" argument to return the export as a single :term:`JSON` array. Use the \":option:`--csv <mongoexport --csv>`\" file to return the result in CSV (comma separated values) format."
msgstr ""

#: ../source/core/import-export.txt:222
# d9a84e37020d484ab74370bd0307a54b
msgid "If your :program:`mongod` instance is not running, you can use the \":option:`--dbpath <mongoexport --dbpath>`\" option to specify the location to your MongoDB instance's database files. See the following example:"
msgstr ""

#: ../source/core/import-export.txt:231
# 240b04764eea498c85b6952851d3d7a1
msgid "This reads the data files directly. This locks the data directory to prevent conflicting writes. The :program:`mongod` process must *not* be running or attached to these data files when you run :program:`mongoexport` in this configuration."
msgstr ""

#: ../source/core/import-export.txt:236
# af7e8601bcec4c2cb122d5dc088af0b3
msgid "The \":option:`--host <mongoexport --host>`\" and \":option:`--port <mongoexport --port>`\" options allow you to specify a non-local host to connect to capture the export. Consider the following example:"
msgstr ""

#: ../source/core/import-export.txt:244
# 39a50e820e84424f86dc697484f86021
msgid "On any :program:`mongoexport` command you may, as above specify username and password credentials as above."
msgstr ""

#: ../source/core/import-export.txt:248
# 71cc43dc61944c78bfd243e24d3abc0c
msgid "Collection Import with :program:`mongoimport`"
msgstr ""

#: ../source/core/import-export.txt:250
# faddd17a0df14599ba128312325e592a
msgid "To restore a backup taken with :program:`mongoexport`. Most of the arguments to :program:`mongoexport` also exist for :program:`mongoimport`. Consider the following command:"
msgstr ""

#: ../source/core/import-export.txt:258
# 99081f2712ae448c92076039360197f8
msgid "This imports the contents of the file ``collection.json`` into the collection named ``collection``. If you do not specify a file with the \":option:`--file <mongoimport --file>`\" option, :program:`mongoimport` accepts input over standard input (e.g. \"stdin.\")"
msgstr ""

#: ../source/core/import-export.txt:264
# 810f427a365e42d6af9e73d3275a162e
msgid "If you specify the \":option:`--upsert <mongoimport --upsert>`\" option, all of :program:`mongoimport` operations will attempt to update existing documents in the database and insert other documents. This option will cause some performance impact depending on your configuration."
msgstr ""

#: ../source/core/import-export.txt:270
# 89e9ca486b034c4eb845c8e76e6a1e6e
msgid "You can specify the database option :option:`--db <mongoimport --db>` to import these documents to a particular database. If your MongoDB instance is not running, use the \":option:`--dbpath <mongoimport --dbpath>`\" option to specify the location of your MongoDB instance's database files. Consider using the \":option:`--journal <mongoimport --journal>`\" option to ensure that :program:`mongoimport` records its operations in the journal. The ``mongod`` process must *not* be running or attached to these data files when you run :program:`mongoimport` in this configuration."
msgstr ""

#: ../source/core/import-export.txt:280
# 7e424f012dca4c1680c41b29d6baf15c
msgid "Use the \":option:`--ignoreBlanks <mongoimport --ignoreBlanks>`\" option to ignore blank fields. For :term:`CSV` and :term:`TSV` imports, this option provides the desired functionality in most cases: it avoids inserting blank fields in MongoDB documents."
msgstr ""

