# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-concern.txt:7
# ea8280e49e6045548b7ff81b174fd997
msgid "Write Concern"
msgstr ""

#: ../source/includes/introduction-write-concern.rst:1
# 1cd813d09679443195fc79760a2795cd
msgid ":term:`Write concern` describes the guarantee that MongoDB provides when reporting on the success of a write operation. The strength of the write concerns determine the level of guarantee. When inserts, updates and deletes have a *weak* write concern, write operations return quickly. In some failure cases, write operations issued with weak write concerns may not persist. With *stronger* write concerns, clients wait after sending a write operation for MongoDB to confirm the write operations."
msgstr ""

#: ../source/includes/introduction-write-concern.rst:10
# 8be625058b1545f5bb1ee24273f1b2ae
msgid "MongoDB provides different levels of write concern to better address the specific needs of applications. Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment. For other less critical operations, clients can adjust the write concern to ensure faster performance rather than ensure persistence to the entire deployment."
msgstr ""

#: ../source/core/write-concern.txt:13
# 8032345f03ed4a7682359035e84f0b88
msgid ":doc:`/reference/write-concern` for a reference of specific write concern configuration. Also consider :doc:`/core/write-operations` for a general overview of write operations with MongoDB and :doc:`/core/replica-set-write-concern` for considerations specific to replica sets."
msgstr ""

#: ../source/core/write-concern.txt:19
# 1fc74abf42924857b9845425ec4a45d3
msgid "The :doc:`driver write concern </release-notes/drivers-write-concern>` change created a new connection class in all of the MongoDB drivers. The new class, called ``MongoClient`` change the default write concern. See the :doc:`release notes </release-notes/drivers-write-concern>` for this change and the release notes for your driver."
msgstr ""

#: ../source/core/write-concern.txt:27
# 45ef9c306aa844a489ed5b9486b9343f
msgid "Write Concern Levels"
msgstr ""

#: ../source/core/write-concern.txt:29
# f9eca5764bb44a0aae3b2809dad9cbe5
msgid "Clients issue write operations with some level of :term:`write concern`.  MongoDB has the following levels of conceptual write concern, listed from weakest to strongest:"
msgstr ""

#: ../source/core/write-concern.txt:36
# 34723bac2f6e42759826f230a57dbfaf
msgid "Errors Ignored"
msgstr ""

#: ../source/core/write-concern.txt:38
# 69586f16f6bb443893540ab64fe34edf
msgid "With an *errors ignored* write concern, MongoDB does not acknowledge write operations. With this level of write concern, the client cannot detect failed write operations. These errors include connection errors and :program:`mongod` exceptions such as duplicate key exceptions for :ref:`unique indexes <index-type-unique>`. Although the *errors ignored* write concern provides fast performance, this performance gain comes at the cost of significant risks for data persistence and durability."
msgstr ""

#: ../source/core/write-concern.txt:47
# a1e807b0d2c94232b5e76bb2f0bd5a4f
msgid "To set *errors ignored* write concern, specify ``w`` values of ``-1`` to your driver."
msgstr ""

#: ../source/core/write-concern.txt:50
# 3d984f8aaf6d4d3993ca2850ba32efa3
msgid "Do not use *errors ignored* write concern in normal operation."
msgstr ""

#: ../source/core/write-concern.txt:56
# 085228f9f5ee403bba489e06f8b091c7
msgid "Unacknowledged"
msgstr ""

#: ../source/core/write-concern.txt:58
# bad380a8eee34a9984a3503c5e70a71d
msgid "With an *unacknowledged* write concern, MongoDB does not acknowledge the receipt of write operation. *Unacknowledged* is similar to *errors ignored*; however, drivers attempt to receive and handle network errors when possible. The driver's ability to detect network errors depends on the system's networking configuration."
msgstr ""

#: ../source/core/write-concern.txt:64
# 72d19a92f4254127919360b7ac8b0c2a
msgid "To set *unacknowledged* write concern, specify ``w`` values of ``0`` to your driver."
msgstr ""

#: ../source/core/write-concern.txt:67
# 29c68153715844df8cf3c8a86ec1797b
msgid "Before the releases outlined in :ref:`driver-write-concern-change`, this was the default write concern."
msgstr ""

#: ../source/core/write-concern.txt:75
# 90c315bfab564ec5a57e487321b8ea34
msgid "Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:77
# b33c86411a7e4674b38095ba33b3b4da
msgid "With a receipt *acknowledged* write concern, the :program:`mongod` confirms the receipt of the write operation. *Acknowledged* write concern allows clients to catch network, duplicate key, and other errors."
msgstr ""

#: ../source/core/write-concern.txt:82
# 3950fb242c7a4ebfad3710ad6435019c
msgid "To set *acknowledged* write concern, specify ``w`` values of ``1`` to your driver."
msgstr ""

#: ../source/core/write-concern.txt:85
# 3219aec0505d4515a25311a08ab92e26
msgid "MongoDB uses *acknowledged* write concern by default, after the releases outlined in :ref:`driver-write-concern-change`."
msgstr ""

#: ../source/core/write-concern.txt:90
# 8d5809680c934e6fba0a19dc2dd339e5
msgid "Internally, the default write concern calls :dbcommand:`getLastError` with no arguments. For replica sets, you can define the default write concern settings in the :data:`~local.system.replset.settings.getLastErrorDefaults`. When :data:`~local.system.replset.settings.getLastErrorDefaults` does not define a default write concern setting, :dbcommand:`getLastError` defaults to basic receipt acknowledgment."
msgstr ""

#: ../source/core/write-concern.txt:101
# 31484c6ab17f4b2b9eaef058359a642a
msgid "Journaled"
msgstr ""

#: ../source/core/write-concern.txt:103
# b19f5eb940a745bba3f21404b8bded21
msgid "With a *journaled* write concern, the :program:`mongod` acknowledges the write operation only after committing the data to the :term:`journal`. This write concern ensures that MongoDB can recover the data following a shutdown or power interruption."
msgstr ""

#: ../source/core/write-concern.txt:108
# af077ddc42ef4313abe173f69cbd5236
msgid "To set a *journaled* write concern, specify ``w`` values of ``1`` and set the ``journal`` or ``j`` option to ``true`` for your driver. You must have journaling enabled to use this write concern."
msgstr ""

#: ../source/core/write-concern.txt:112
# 040089f88fea499f9f9461fba2800831
msgid "With a *journaled* write concern, write operations must wait for the next journal commit. To reduce latency for these operations, MongoDB also increases the frequency that it commits operations to the journal. See :setting:`journalCommitInterval` for more information."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
#: ../source/includes/note-write-concern-journaled-replication.rst:1
# fd13d4279e7845d3829dbd2d1ea50176
# fd13d4279e7845d3829dbd2d1ea50176
msgid "Requiring *journaled* write concern in a replica set only requires a journal commit of the write operation to the :term:`primary` of the set regardless of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/core/write-concern.txt:125
# bfa1c3021f5f4070ae1a6831acb8cf3d
msgid "Replica Acknowledged"
msgstr ""

#: ../source/core/write-concern.txt:127
# f54781ac74894fc88eff4349efb9223b
msgid ":term:`Replica sets <replica set>` add several considerations for write concern. Basic write concerns affect write operations on only one :program:`mongod` instance. The ``w`` argument to :dbcommand:`getLastError` provides *replica acknowledged* write concerns. With *replica acknowledged* you can guarantee that the write operation propagates to the members of a replica set. See :doc:`/reference/write-concern` document for the values for ``w`` and :doc:`Write Concern for Replica Sets <replica-set-write-concern>` for more information."
msgstr ""

#: ../source/core/write-concern.txt:137
# 5d015816c52d4a5a88d5576e63b38034
msgid "To set *replica acknowledged* write concern, specify ``w`` values greater than ``1`` to your driver."
msgstr ""

#: ../source/core/write-concern.txt:1
# 115a652ef52a4c6ca8b504ea6542c047
msgid "write concern"
msgstr ""

