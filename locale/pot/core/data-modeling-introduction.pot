# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-modeling-introduction.txt:3
# 8de51998e83e49839ea23644f8b47d68
msgid "Data Modeling Introduction"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:7
# 7e2011696db1482684ae08ef78c5f279
msgid "Data in MongoDB has a *flexible schema*. Unlike SQL databases, where you must determine and declare a table's schema before inserting data, MongoDB's :term:`collections <collection>` do not enforce :term:`document` structure. This flexibility facilitates the mapping of documents to an entity or an object. Each document can match the data fields of the represented entity, even if the data has substantial variation. In practice, however, the documents in a collection share a similar structure."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:16
# f91dfa5915844445b47d037d43e764ed
msgid "The key challenge in data modeling is balancing the needs of the application, the performance characteristics of the database engine, and the data retrieval patterns. When designing data models, always consider the application usage of the data (i.e. queries, updates, and processing of the data) as well as the inherent structure of the data itself."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:24
# 7b5693c8195c4f8084eb9e88348b2fdc
msgid "Document Structure"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:26
# d675d53055374dcdb9f9b05a1ac521ba
msgid "The key decision in designing data models for MongoDB applications revolves around the structure of documents and how the application represents relationships between data. There are two tools that allow applications to represent these relationships: *references* and *embedded documents*."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:33
# 945aa509712b4d9395f22b07c5c5ad8a
msgid "References"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:35
# e9960f76377a4a0abe9ecce178a8d26f
msgid "References store the relationships between data by including links or *references* from one document to another. Applications can resolve these :doc:`references </reference/database-references>` to access the related data. Broadly, these are *normalized* data models."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:42
# 92475f7a1ed2463284d8a5ee6fc94726
msgid "See :ref:`data-modeling-referencing` for the strengths and weaknesses of using references."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:46
# 99a4272ed00c47e182cf7ea621cfc290
msgid "Embedded Data"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:48
# 19c9dd0fed9e4014a69521e9d92215eb
msgid "Embedded documents capture relationships between data by storing related data in a single document structure. MongoDB documents make it possible to embed document structures as sub-documents in a field or array within a document. These *denormalized* data models allow applications to retrieve and manipulate related data in a single database operation."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:57
# 7b2076a0d78447f48e0035c0435a0b05
msgid "See :ref:`data-modeling-embedding` for the strengths and weaknesses of embedding sub-documents."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:61
# 829dff639fc14132a0085e95daa01248
msgid "Atomicity of Write Operations"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:63
# 2b5f7fa06c134d58a21f05d851353ee4
msgid "In MongoDB, write operations are atomic at the :term:`document` level, and no single write operation can atomically affect more than one document or more than one collection. A denormalized data model with embedded data combines all related data for a represented entity in a single document. This facilitates atomic write operations since a single write operation can insert or update the data for an entity. Normalizing the data would split the data across multiple collections and would require multiple write operations that are not atomic collectively."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:73
# c788e32b24d642119a3f5ca77f9dc541
msgid "However, schemas that facilitate atomic writes may limit ways that applications can use the data or may limit ways to modify applications. The :ref:`Atomicity Considerations <data-model-atomicity>` documentation describes the challenge of designing a schema that balances flexibility and atomicity."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:80
# 71c31994a8594d10b099624f9add25b7
msgid "Document Growth"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:82
# fc8af3c261cb49c1b34ca27063935b21
msgid "Some updates, such as pushing elements to an array or adding new fields, increase a :term:`document's <document>` size. If the document size exceeds the allocated space for that document, MongoDB relocates the document on disk. The growth consideration can affect the decision to normalize or denormalize data. See :ref:`Document Growth Considerations <data-model-document-growth>` for more about planning for and managing document growth in MongoDB."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:91
# 684d182ac56b42089ec4720c0a339d3d
msgid "Data Use and Performance"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:93
# 16fa21ba225a4d929e040e73acad9638
msgid "When designing a data model, consider how applications will use your database. For instance, if your application only uses recently inserted documents, consider using :doc:`/core/capped-collections`. Or if your application needs are mainly read operations to a collection, adding indexes to support common queries can improve performance."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:99
# 86d9a18cf4fc43e8b8fb0b000e741b33
msgid "See :doc:`/core/data-model-operations` for more information on these and other operational considerations that affect data model designs."
msgstr ""

