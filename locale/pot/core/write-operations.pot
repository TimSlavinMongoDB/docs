# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2013, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-16 16:05-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations.txt:6
# de88f79271a443cfa194f0397747ee4e
msgid "Write Operations"
msgstr ""

#: ../source/core/write-operations.txt:10
# 8c2e08d24bb24604a9cc306c81157a50
msgid "A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single :term:`collection`. All write operations in MongoDB are atomic on the level of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations.txt:15
# 01a3f6a4bf684e2fbf30665c373ee987
msgid "There are three classes of write operations in MongoDB: insert, update, and remove. Insert operations add new data to a collection. Update operations modify existing data, and remove operations delete data from a collection. No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations.txt:21
# ecb8b59eedff409495b3f8d5995a9f55
msgid "For the update and remove operations, you can specify criteria, or conditions, that identify the documents to update or remove. These operations use the same query syntax to specify the criteria as :doc:`read operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations.txt:26
# 41a46ec81c10491aac087ac12020dcb2
msgid "After issuing these modification operations, MongoDB allows applications to determine the level of acknowledgment returned from the database. See :doc:`/core/write-concern`."
msgstr ""

#: ../source/core/write-operations.txt:32
# e07fa5dd9ce7424e80b69cd694742889
msgid "Create"
msgstr ""

#: ../source/core/write-operations.txt:34
# 51695ba4d28547fab595b89bcf579e16
msgid "Create operations add new :term:`documents <document>` to a collection. In MongoDB, the :method:`db.collection.insert()` method perform create operations."
msgstr ""

#: ../source/core/write-operations.txt:38
# 0bec39a151644c23811d2f996902bae6
msgid "The following diagram highlights the components of a MongoDB insert operation:"
msgstr ""

#: ../source/core/write-operations.txt:43
#: ../source/core/write-operations.txt:111
#: ../source/core/write-operations.txt:166
# c72937db45604d2d85ad8257b6b34a48
# 88ff1e412f5647c19fdb155c6cd09bf6
# 84acb586abab49b2a448efaf43caef8c
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations.txt:49
# 6ea901d713724794820d03ea74e65127
msgid "The following operation inserts a new documents into the ``users`` collection. The new document has four fields ``name``, ``age``, and ``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations.txt:64
# 5eef86d2fec3479785b9b16d435faa49
msgid "For more information, see :method:`db.collection.insert()` and :doc:`/tutorial/insert-documents`."
msgstr ""

#: ../source/core/write-operations.txt:67
# cc9e5112832c49e991a96b4f73e11b82
msgid "Some updates also create records. If an update operation specifies the :term:`upsert` flag *and* there are no documents that match the query portion of the update operation, then MongoDB will convert the update into an insert."
msgstr ""

#: ../source/core/write-operations.txt:72
# e17a24dd7ef64143b6a1a026fb4e5cf5
msgid "With an :term:`upsert`, applications can decide between performing an update or an insert operation using just a single call. Both the :method:`~db.collection.update()` method and the :method:`~db.collection.save()` method can perform an :term:`upsert`. See :method:`~db.collection.update()` and :method:`~db.collection.save()` for details on performing an :term:`upsert` with these methods."
msgstr ""

#: ../source/core/write-operations.txt:84
# c4f1d309b63c4301942c39fc036d2aae
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations.txt:86
# 3aa159f802264b84a0815e1d776b5382
msgid "If you add a new document *without* the :term:`_id` field, the client library or the :program:`mongod` instance adds an ``_id`` field and populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations.txt:90
# 841b54c66bde42978c75478c7daa49f3
msgid "If you specify the ``_id`` field, the value must be unique within the collection. For operations with :ref:`write concern <write-concern>`, if you try to create a document with a duplicate ``_id`` value, :program:`mongod` returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations.txt:96
# 26dc0265ec6e4b6390e6b2f6b19981de
msgid "Update"
msgstr ""

#: ../source/core/write-operations.txt:98
# 7ffc46b278344f80bd109200ed0f8020
msgid "Update operations modify existing :term:`documents <document>` in a :term:`collection`. In MongoDB, :method:`db.collection.update()` and the :method:`db.collection.save()` methods perform update operations. The :method:`db.collection.update()` method can accept a query criteria to determine which documents to update as well as an option to update multiple rows. The method can also accept options that affect its behavior such as the ``multi`` option to update multiple documents."
msgstr ""

#: ../source/core/write-operations.txt:106
# ac680437908d4b5ba5665eb4781c5b93
msgid "The following diagram highlights the components of a MongoDB update operation:"
msgstr ""

#: ../source/core/write-operations.txt:0
#: ../source/core/write-operations.txt:0
# dc20700a62d54f799d5c59e4a6d797e8
# d41d731557774fbca7e1bc945b913a7e
msgid "Example"
msgstr ""

#: ../source/core/write-operations.txt:125
# 26662484d95c4597ae95320f6ddc09e6
msgid "This update operation on the ``users`` collection sets the ``status`` field to ``A`` for the documents that match the criteria of ``age`` greater than ``18``."
msgstr ""

#: ../source/core/write-operations.txt:129
# 826b2f16a60543e19af746b6e7059253
msgid "For more information, see :method:`db.collection.update()` and :method:`db.collection.save()`, and :doc:`/tutorial/modify-documents` for examples."
msgstr ""

#: ../source/core/write-operations.txt:136
# 461f9ceeec4b4f9885237d89cd58a899
msgid "Update Behavior"
msgstr ""

#: ../source/core/write-operations.txt:138
# c96e1a3b1f5b48b5af6f361c5ef7e45e
msgid "By default, the :method:`db.collection.update()` method updates a **single** document. However, with the ``multi`` option, :method:`~db.collection.update()` can update all documents in a collection that match a query."
msgstr ""

#: ../source/core/write-operations.txt:143
# 323ca303f97a4e2dbf3491c21642e44d
msgid "The :method:`db.collection.update()` method either updates specific fields in the existing document or replaces the document. See :method:`db.collection.update()` for details."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
# c5d1e7116e2242eba9c177ab1520b854
msgid "When performing update operations that increase the document size beyond the allocated space for that document, the update operation relocates the document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
# 265fa37688084b9296d2506cbd053706
msgid "MongoDB preserves the order of the document fields following write operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
# 89ab9f14c1474bc3aa6c8c6c9a90bffc
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
# 7d966eb7e4874cc1982a476a9439bd34
msgid "Updates that include :update:`renaming <$rename>` of field names may result in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
# 300e412984eb45ec99b86f81d2f2359e
msgid "Starting in version 2.6, MongoDB actively attempts to preserve the field order in a document. Before version 2.6, MongoDB did not actively preserve the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations.txt:149
# 3e6903923014483187fbd1467b62ef1f
msgid "The :method:`db.collection.save()` method replaces a document and can only update a single document. See :method:`db.collection.save()` and :doc:`/tutorial/insert-documents` for more information"
msgstr ""

#: ../source/core/write-operations.txt:154
# 3e1759a0790e4558a6db073f0daa807c
msgid "Delete"
msgstr ""

#: ../source/core/write-operations.txt:156
# 6944bec1c6fd488ba4f2c1eca58694ed
msgid "Delete operations remove documents from a collection. In MongoDB, :method:`db.collection.remove()` method performs delete operations. The :method:`db.collection.remove()` method can accept a query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations.txt:161
# 61d0f58edd564f4f95b626652fd0d213
msgid "The following diagram highlights the components of a MongoDB remove operation:"
msgstr ""

#: ../source/core/write-operations.txt:178
# a6f93c9a4d3d41ec9e1e0a8975861672
msgid "This delete operation on the ``users`` collection removes all documents that match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations.txt:181
# ec232303c3654862bf3456247b6d8400
msgid "For more information, see :method:`db.collection.remove()` method and :doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations.txt:185
# e4f84822689c445893fac4a50e3d79cb
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations.txt:187
# 4d43001e476849adbba22fcd376ad6e0
msgid "By default, :method:`db.collection.remove()` method removes all documents that match its query. However, the method can accept a flag to limit the delete operation to a single document."
msgstr ""

#: ../source/core/write-operations.txt:194
# fb3cafea5dec4ca59462fd9880949f1d
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations.txt:196
# 049243b6811443928b8e53f3b1b2dc03
msgid "The modification of a single document is always atomic, even if the write operation modifies multiple sub-documents *within* that document. For write operations that modify multiple documents, the operation as a whole is not atomic, and other operations may interleave."
msgstr ""

#: ../source/core/write-operations.txt:202
# 7918ce0cf73e47d38647d08d4eada44a
msgid "No other operations are atomic. You can, however, attempt to isolate a write operation that affects multiple documents using the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations.txt:206
# 5ae108b600f9475e8c023a70894383a5
msgid "To isolate a sequence of write operations from other read and write operations, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations.txt:210
# e0ddd33a6e884cec9efee6845334e3a6
msgid "Related Concepts"
msgstr ""

#: ../source/core/write-operations.txt:212
# 0b452c1991ed4adca8fa4afe698cd976
msgid "The following documents further describe write operations:"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:4
# 0171fb5c717a4c2da2a02ef4c1ec3495
msgid ":doc:`/core/write-concern`"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:4
# bbc5b39cca094b868452eea225aa2159
msgid "Describes the kind of guarantee MongoDB provides when reporting on the success of a write operation."
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:10
# 695857d6a5b141c99f5482c7038e4cf8
msgid ":doc:`/core/distributed-write-operations`"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:7
# 4cf5e6028da7491081bd40b944b61bba
msgid "Describes how MongoDB directs write operations on :term:`sharded clusters <sharded cluster>` and :term:`replica sets <replica set>` and the performance characteristics of these operations."
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:13
# 77cca988e74842da9f84ee2f6430e4d1
msgid ":doc:`/core/write-performance`"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:13
# a4d73bcc855f425b9032c0d5b70948df
msgid "Introduces the performance constraints and factors for writing data to MongoDB deployments."
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:16
# f31a3c213cf74540836a107ca14f6731
msgid ":doc:`/core/bulk-inserts`"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:16
# e352675485b245b9853092be480bf10a
msgid "Describe behaviors associated with inserting an array of documents."
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:18
# 72f73b6fa8ce448bb0aea8a7d13ecf8d
msgid ":doc:`/core/record-padding`"
msgstr ""

#: ../source/includes/toc/dfn-list-crud-write-operations.rst:19
# f9ea406856864becb0fcf6c82f5b40a2
msgid "When storing documents on disk, MongoDB reserves space to allow documents to grow efficiently during subsequent updates."
msgstr ""

#: ../source/core/write-operations.txt:1
#: ../source/core/write-operations.txt:2
# 4647960d3eed4407839f40457960605f
# 63ad4f04ea6c4d78bd592583f76e3de4
msgid "write operations"
msgstr ""

#: ../source/core/write-operations.txt:2
# 63ad4f04ea6c4d78bd592583f76e3de4
msgid "crud"
msgstr ""

