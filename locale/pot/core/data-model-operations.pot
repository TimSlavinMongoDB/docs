# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-24 10:20-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-operations.txt:3
# 76a55502a6c84cd991e7478789e25317
msgid "Operational Factors and Data Models"
msgstr ""

#: ../source/core/data-model-operations.txt:7
# a13951fb92c645d9b17ebc3df89df91f
msgid "Modeling application data for MongoDB depends on both the data itself, as well as the characteristics of MongoDB itself. For example, different data models may allow applications to use more efficient queries, increase the throughput of insert and update operations, or distribute activity to a sharded cluster more effectively."
msgstr ""

#: ../source/core/data-model-operations.txt:13
# 8c8428a419234d9c80f72a80ebcf7f33
msgid "These factors are *operational* or address requirements that arise outside of the application but impact the performance of MongoDB based applications. When developing a data model, analyze all of your application's :doc:`read operations </core/read-operations>` and :doc:`write operations </core/write-operations>` in conjunction with the following considerations."
msgstr ""

#: ../source/core/data-model-operations.txt:23
# 51ef969068fd442cb7561b4fb98a6f6e
msgid "Document Growth"
msgstr ""

#: ../source/core/data-model-operations.txt:25
# a8644586f2f6493fa790b0855d2af430
msgid "Some updates to documents can increase the size of documents. These updates include pushing elements to an array (i.e. :update:`$push`) and adding new fields to a document. If the document size exceeds the allocated space for that document, MongoDB will relocate the document on disk. Relocating documents takes longer than *in place updates* and can lead to fragmented storage. Although MongoDB automatically :doc:`adds padding to document allocations </core/record-padding>` to minimize the likelihood of relocation, data models should avoid document growth when possible."
msgstr ""

#: ../source/core/data-model-operations.txt:35
# cc05de6b2cc641738f92541699253b12
msgid "For instance, if your applications require updates that will cause document growth, you may want to refactor your data model to use references between data in distinct documents rather than a denormalized data model."
msgstr ""

#: ../source/core/data-model-operations.txt:40
# 419a2200cdc242deadbe162bd7e73f25
msgid "MongoDB adaptively adjusts the amount of automatic padding to reduce occurrences of relocation. You may also use a *pre-allocation* strategy to explicitly avoid document growth. Refer to the :ecosystem:`Pre-Aggregated Reports Use Case </use-cases/pre-aggregated-reports>` for an example of the *pre-allocation* approach to handling document growth."
msgstr ""

#: ../source/core/data-model-operations.txt:51
# 734667b2cbf94f16993d21d258267cf4
msgid "Atomicity"
msgstr ""

#: ../source/core/data-model-operations.txt:53
# 6b618b2e7246456eb9bed799a337b6a0
msgid "In MongoDB, operations are atomic at the :term:`document` level. No **single** write operation can change more than one document. Operations that modify more than a single document in a collection still operate on one document at a time. [#record-atomicity]_ Ensure that your application stores all fields with atomic dependency requirements in the same document. If the application can tolerate non-atomic updates for two pieces of data, you can store these data in separate documents."
msgstr ""

#: ../source/core/data-model-operations.txt:62
# 484901aef7eb4199898439dbd3380cc5
msgid "A data model that embeds related data in a single document facilitates these kinds of atomic operations. For data models that store references between related pieces of data, the application must issue separate read and write operations to retrieve and modify these related pieces of data."
msgstr ""

#: ../source/core/data-model-operations.txt:68
# 0b8c03ade73847b9a2d545572d07efcd
msgid "See :ref:`data-modeling-atomic-operation` for an example data model that provides atomic updates for a single document."
msgstr ""

#: ../source/core/data-model-operations.txt:71
# 76960027a7e14a40a5c7dc42c4fc2581
msgid "Document-level atomic operations include all operations within a single MongoDB document record: operations that affect multiple sub-documents within that single record are still atomic."
msgstr ""

#: ../source/core/data-model-operations.txt:77
# 638226dc716542629fea943b4154f48a
msgid "Sharding"
msgstr ""

#: ../source/core/data-model-operations.txt:79
# 16fc8dea22e34ff98074633ee3e187d9
msgid "MongoDB uses :term:`sharding` to provide horizontal scaling. These clusters support deployments with large data sets and high-throughput operations. Sharding allows users to :term:`partition` a :term:`collection` within a database to distribute the collection's documents across a number of :program:`mongod` instances or :term:`shards <shard>`."
msgstr ""

#: ../source/core/data-model-operations.txt:86
# 66680211d3204d5689eaa57f81a0acba
msgid "To distribute data and application traffic in a sharded collection, MongoDB uses the :ref:`shard key <shard-key>`. Selecting the proper :ref:`shard key <shard-key>` has significant implications for performance, and can enable or prevent query isolation and increased write capacity. It is important to consider carefully the field or fields to use as the shard key."
msgstr ""

#: ../source/core/data-model-operations.txt:93
# 897ea001dcab4d9ea5d48c9781bc6708
msgid "See :doc:`/core/sharding-introduction` and :doc:`/core/sharding-shard-key` for more information."
msgstr ""

#: ../source/core/data-model-operations.txt:97
# bb780558cb1e4ac195bb9a2aef7e002d
msgid "Indexes"
msgstr ""

#: ../source/core/data-model-operations.txt:99
# 3ca82df98042446cb06ac23df5a1793d
msgid "Use indexes to improve performance for common queries. Build indexes on fields that appear often in queries and for all operations that return sorted results. MongoDB automatically creates a unique index on the ``_id`` field."
msgstr ""

#: ../source/core/data-model-operations.txt:104
# fbd29472898846efbd9880541a1a9af0
msgid "As you create indexes, consider the following behaviors of indexes:"
msgstr ""

#: ../source/core/data-model-operations.txt:106
# e161a9bcffd64db9980e277605405b36
msgid "Each index requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:108
# 69271b65b3484901849dcfc4432465fd
msgid "Adding an index has some negative performance impact for write operations. For collections with high write-to-read ratio, indexes are expensive since each insert must also update any indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:112
# 4211cccf4aa84c5e8789f35d4f9639c4
msgid "Collections with high read-to-write ratio often benefit from additional indexes. Indexes do not affect un-indexed read operations."
msgstr ""

#: ../source/core/data-model-operations.txt:115
# 12a1abca31cd48849c1f63b004764083
msgid "When active, each index consumes disk space and memory. This usage can be significant and should be tracked for capacity planning, especially for concerns over working set size."
msgstr ""

#: ../source/core/data-model-operations.txt:119
# 540fe1a02225426b8eff8942fab8ba51
msgid "See :doc:`/applications/indexes` for more information on indexes as well as :doc:`/tutorial/analyze-query-plan/`. Additionally, the MongoDB :doc:`database profiler </tutorial/manage-the-database-profiler>` may help identify inefficient queries."
msgstr ""

#: ../source/core/data-model-operations.txt:127
# d39ba8ab4ce844098b853e4810165b3d
msgid "Large Number of Collections"
msgstr ""

#: ../source/core/data-model-operations.txt:129
# 5118f3d8228545de9bee2112b44ad6ad
msgid "In certain situations, you might choose to store related information in several collections rather than in a single collection."
msgstr ""

#: ../source/core/data-model-operations.txt:132
# c3641335480d4a29891dc321413119eb
msgid "Consider a sample collection ``logs`` that stores log documents for various environment and applications. The ``logs`` collection contains documents of the following form:"
msgstr ""

#: ../source/core/data-model-operations.txt:141
# f4ef42803528438082b03618928cb4ac
msgid "If the total number of documents is low, you may group documents into collection by type. For logs, consider maintaining distinct log collections, such as ``logs.dev`` and ``logs.debug``. The ``logs.dev`` collection would contain only the documents related to the dev environment."
msgstr ""

#: ../source/core/data-model-operations.txt:147
# 87a3cc8854c849509d8d3ae25be10c49
msgid "Generally, having a large number of collections has no significant performance penalty and results in very good performance. Distinct collections are very important for high-throughput batch processing."
msgstr ""

#: ../source/core/data-model-operations.txt:151
# 8fd73d8e72d8450bb94fc9345642d1b0
msgid "When using models that have a large number of collections, consider the following behaviors:"
msgstr ""

#: ../source/core/data-model-operations.txt:154
# f72f61af7de0477488cf00ab40f427b5
msgid "Each collection has a certain minimum overhead of a few kilobytes."
msgstr ""

#: ../source/core/data-model-operations.txt:156
# b862b498b0764c078d136025e1d30a60
msgid "Each index, including the index on ``_id``, requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:159
# ff4cafc58e4b40f4a09b5678cc1002be
msgid "For each :term:`database`, a single namespace file (i.e. ``<database>.ns``) stores all meta-data for that database, and each index and collection has its own entry in the namespace file. MongoDB places :limit:`limits on the size of namespace files <Size of Namespace File>`."
msgstr ""

#: ../source/core/data-model-operations.txt:165
# 71cff0e4897942feb529403e48c8ffb3
msgid "MongoDB has :limit:`limits on the number of namespaces <Number of Namespaces>`. You may wish to know the current number of namespaces in order to determine how many additional namespaces the database can support. To get the current number of namespaces, run the following in the :program:`mongo` shell:"
msgstr ""

#: ../source/core/data-model-operations.txt:177
# 1bc91ad5885e4fa1b37fae62e40f5561
msgid "The limit on the number of namespaces depend on the ``<database>.ns`` size. The namespace file defaults to 16 MB."
msgstr ""

#: ../source/core/data-model-operations.txt:180
# af2410fcfe5e4cdbb7f1aa1b4c072bb5
msgid "To change the size of the *new* namespace file, start the server with the option :option:`--nssize \\<new size MB\\> <--nssize>`. For existing databases, after starting up the server with :option:`--nssize`, run the :method:`db.repairDatabase()` command from the :program:`mongo` shell. For impacts and considerations on running :method:`db.repairDatabase()`, see :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/core/data-model-operations.txt:189
# c35743e865de4434a4e10cf713bcc3a1
msgid "Data Lifecycle Management"
msgstr ""

#: ../source/core/data-model-operations.txt:191
# 97ac2d4e748d41489153180c2ce3590c
msgid "Data modeling decisions should take data lifecycle management into consideration."
msgstr ""

#: ../source/core/data-model-operations.txt:194
# 509d7118760f4a58aa4b980d558b87a6
msgid "The :doc:`Time to Live or TTL feature </tutorial/expire-data>` of collections expires documents after a period of time. Consider using the TTL feature if your application requires some data to persist in the database for a limited period of time."
msgstr ""

#: ../source/core/data-model-operations.txt:199
# 68d700b7e173417cb394d7e2a14fa337
msgid "Additionally, if your application only uses recently inserted documents, consider :doc:`/core/capped-collections`. Capped collections provide *first-in-first-out* (FIFO) management of inserted documents and efficiently support operations that insert and read documents based on insertion order."
msgstr ""

