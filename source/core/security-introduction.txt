=====================
Security Introduction
=====================

.. default-domain:: mongodb

Maintaining a secure MongoDB deployment requires administrators to
implement controls to ensure that only users and application that need
access to data can access that data. MongoDB provides features that
allow administrators to implement these controls and restrictions for
any MongoDB deployment. 

See :doc:`/core/security-model` for more information on the specific
implementation of MongoDB's security features. If you are already
familiar with security and MongoDB security practices, consider the 
:doc:`/core/security-checklist` for a collection of practices that you
can use to protect your MongoDB deployment. 

User Identity
-------------

Before gaining access to a system all clients should identify
themselves to MongoDB. This ensures that no client can access the data
stored in MongoDB without being explicitly allowed. 

See :doc:`/core/authentication` for more information. 

Least Privilege
---------------

Clients should only be able to perform the operations required to
fulfill their approved functions. This is a policy of "least
privilege," and limits the potential risk of a compromised
application. Administrators should tightly control all access to a
MongoDB system and ensure that access applies as narrowly as
possible.

See :doc:`/core/authorization` for more information.

Auditing
--------

Auditing provides administrators with the ability to verify that the
implemented security policies are controlling activity in the
system. Retaining audit information ensures that administrators have
enough information to perform forensic investigations and comply with
regulations and polices that require audit data.

See :doc:`/core/auditing` for more information. 

Encryption
----------

Deepening on the application requirements, users should encrypt as
much data and network traffic as possible. Encrypting the
*data-at-rest* ensures that only trusted individuals and instances
applications can access the MongoDB data files. By encrypting the *data
in motion*, or the network traffic, you can ensure that MongoDB
network traffic is only readable by the intended client.

Hardening Deployments and Environments
--------------------------------------

In addition to implementing controls within MongoDB, you should also
place controls around MongoDB to reduce the risk exposure of the
entire MongoDB system. This is a *defense in depth*
strategy.

Hardening MongoDB extends the ideas of least privilege, auditing, and
encryption outside of MongoDB. Reducing risk includes: configuring the network
rules to ensure that only trusted hosts have access to MongoDB, and
that the MongoDB process only have access to the parts of the
filesystem required for operation.
