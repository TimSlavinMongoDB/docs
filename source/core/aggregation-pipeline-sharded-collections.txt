.. _aggregation-pipeline-sharded-collection:

============================================
Aggregation Pipeline and Sharded Collections
============================================

.. default-domain:: mongodb

The aggregation pipeline supports operations on :term:`sharded
<sharded cluster>` collections. This section describes behaviors
specific to the :ref:`aggregation pipeline <aggregation-pipeline>` and
sharded collections.

Aggregation Operations in Sharded Clusters
------------------------------------------

When operating on a sharded collection, the aggregation pipeline
is split into two parts. First, the aggregation pipeline pushes
all of the operators up to the first :pipeline:`$group`
or :pipeline:`$sort` operation to each shard [#match-sharding]_.
Then, a second pipeline runs on the :program:`mongos`.
This pipeline consists of the first :pipeline:`$group` or
:pipeline:`$sort` and any remaining pipeline operators, and runs
on the results received from the shards.

The :pipeline:`$group` operator brings in any "sub-totals" from
the shards and combines them: in some cases these may be
structures. For example, the :group:`$avg` expression
maintains a total and count for each shard; :program:`mongos` combines
these values and then divides.

.. [#match-sharding] If an early :pipeline:`$match` can exclude
   shards through the use of the shard key in the predicate, then
   these operators are only pushed to the relevant shards.

Impact of Aggregation Pipelines on ``mongos``
---------------------------------------------

.. versionchanged:: 2.2

Some :dbcommand:`aggregation pipeline <aggregate>` operations will
cause :program:`mongos` instances to require more CPU resources
than in previous versions. This modified performance profile may
dictate alternate architectural decisions if you use the
:ref:`aggregation pipeline <aggregation-pipeline>` extensively in
a sharded environment.
