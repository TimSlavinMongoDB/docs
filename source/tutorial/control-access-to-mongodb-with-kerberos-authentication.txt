===========================================
Deploy MongoDB with Kerberos Authentication
===========================================

.. default-domain:: mongodb

.. versionadded:: 2.4

.. contents::
   :backlinks: none
   :local:

Overview
--------

MongoDB Enterprise supports authentication using a :doc:`Kerberos
service </core/kerberos>`. Kerberos is an industry standard
authentication protocol for large client/server system. Kerberos allows
MongoDB and applications to take advantage of existing authentication
infrastructure and processes.

The examples below assume that ``/opt/mongodb/mongod.keytab`` is a
valid :ref:`keytab file <keytab-files>` that is only accessible to
the user that runs the :program:`mongod` process.

If you encounter problems when trying to start :program:`mongod`
or :program:`mongos`, see the :ref:`troubleshooting section
<kerberos-troubleshooting>`.

Procedures
----------

.. _kerberos-create-users:

Create Users and Privilege Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For every user that you want to be able to authenticate using Kerberos,
you must create a corresponding user document in the
:data:`system.users <admin.system.users>` collection to provision
access for the user.

In the :program:`mongo` shell you can pass the :method:`db.createUser()`
a user privilege document to provision access to users, as in the
following operation:

.. code-block:: javascript

   db = db.getSiblingDB("$external")
   db.createUser(
      {
        user: "application/reporting@EXAMPLE.NET",
        roles: [ { role: "read", db: "records"} ]
      }
   )

This grants the Kerberos user principal
``application/reporting@EXAMPLE.NET`` read-only access to the
``records`` database. Creating a user on the ``$external`` database allows
:program:`mongod` to consult an external source (i.e. Kerberos) to
authenticate this user.

To remove access to a user or to modify a user document, see
:doc:`/administration/security-access-control`.

Start ``mongod`` with Kerberos Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you have provisioned privileges to users in the
:program:`mongod`, *and* obtained a valid keytab file, you must start
:program:`mongod` using a command in the following form:

.. code-block:: sh

   env KRB5_KTNAME=<path to keytab file> <mongod invocation>

For successful operation with :program:`mongod` use the following run
time options in addition to your normal default configuration options:

- :option:`--setParameter <mongod --setParameter>` with the
  ``authenticationMechanisms=GSSAPI`` argument to enable support for
  Kerberos.

- :option:`--auth <mongod --auth>` to enable authentication.

- :option:`--keyFile <mongod --keyFile>` to allow components of a
  single MongoDB deployment to communicate with each other, if needed
  to support replica set and sharded cluster
  operations. :setting:`keyFile` implies :setting:`auth`.

For example, consider the following invocation:

.. code-block:: sh

   env KRB5_KTNAME=/opt/mongodb/mongod.keytab \
       /opt/mongodb/bin/mongod --dbpath /opt/mongodb/data \
       --fork --logpath /opt/mongodb/log/mongod.log \
       --auth --setParameter authenticationMechanisms=GSSAPI

You can also specify these options using the configuration
file. As in the following:

.. code-block:: none

   # /opt/mongodb/mongod.conf, Example configuration file.

   fork = true
   auth = true

   dbpath = /opt/mongodb/data
   logpath = /opt/mongodb/log/mongod.log
   setParameter = authenticationMechanisms=GSSAPI

To use this configuration file, start :program:`mongod` as in the
following:

.. code-block:: sh

   env KRB5_KTNAME=/opt/mongodb/mongod.keytab \
       /opt/mongodb/bin/mongod --config /opt/mongodb/mongod.conf

To start a :program:`mongos` instance using Kerberos, you must create
a Kerberos service principal and deploy a keytab file for this
instance, and then start the :program:`mongos` with the following
invocation:

.. code-block:: sh

   env KRB5_KTNAME=/opt/mongodb/mongos.keytab \
       /opt/mongodb/bin/mongos
       --configdb shard0.example.net,shard1.example.net,shard2.example.net \
       --setParameter authenticationMechanisms=GSSAPI \
       --keyFile /opt/mongodb/mongos.keyfile

.. tip:: If you installed MongoDB Enterprise using one of the official
   ``.deb`` or ``.rpm`` packages *and* are controlling the
   :program:`mongod` instance using the included init/upstart scripts,
   you can set the ``KR5_KTNAME`` variable in the default environment
   settings file. For ``.rpm`` packages this file is located at
   ``/etc/sysconfig/mongod``. For ``.deb`` packages, this file is
   ``/etc/default/mongodb``. Set the value in a line that resembles
   the following:

   .. 2.5.3 -- both default files become mongodb

   .. code-block:: sh

      export KRB5_KTNAME="<setting>"

.. include:: /includes/steps/control-access-to-mongodb-with-kerberos-authentication.rst

Next Steps
----------

Enable the Traditional MongoDB Authentication Mechanism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For testing and development purposes you can enable both the Kerberos
(i.e. ``GSSAPI``) authentication mechanism in combination with the
traditional MongoDB challenge/response authentication mechanism
(i.e. ``MONGODB-CR``), using the following :setting:`setParameter`
run-time option:

.. code-block:: sh

   mongod --setParameter authenticationMechanisms=GSSAPI,MONGODB-CR

All :setting:`keyFile` *internal* authentication between members
of a :term:`replica set` or :term:`sharded cluster` still uses the
``MONGODB-CR`` authentication mechanism, even if ``MONGODB-CR``
is not enabled.

All client authentication uses Kerberos.

