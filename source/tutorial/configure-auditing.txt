================================
Configure System Events Auditing
================================

.. default-domain:: mongodb

.. versionadded:: 2.5.3

MongoDB Enterprise supports :ref:`auditing <auditing>` of various
operations. A complete auditing solution must involve all
:program:`mongod` server and :program:`mongos` router processes.

The audit facility can write audit events to the console, the
:term:`syslog` (option is unavailable on Windows), a JSON file, or a
BSON file. For details on the audited operations and the audit log
formats, see :doc:`/reference/audit-message`.

Enable and Configure Audit Output
---------------------------------

Use the :option:`--auditLog` option to enable
auditing and specify where to output the audit events.

Output to Syslog
~~~~~~~~~~~~~~~~

To enable auditing and print audit events to the syslog (option
is unavailable on Windows) in JSON format, specify ``syslog`` for the
:option:`--auditLog` setting. For example:

.. code-block:: sh

   mongod --dbpath data/db --auditLog syslog

.. warning::

   .. include:: /includes/fact-audit-syslog-message-limit.rst

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=syslog

Output to Console
~~~~~~~~~~~~~~~~~

To enable auditing and print the audit events to standard
output (i.e. ``stdout``), specify ``console`` for the
:option:`--auditLog` setting. For example:

.. code-block:: sh

   mongod --dbpath data/db --auditLog console

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=console

Output to JSON File
~~~~~~~~~~~~~~~~~~~

To enable auditing and print audit events to a file in JSON
format, specify ``jsonfile`` for the :option:`--auditLog` setting and
specify the filename for the :option:`--auditPath`. The
:option:`--auditPath` option accepts either full path name or relative
path name. For example, the following enables auditing and records
audit events to a file with the relative path name of
``data/db/auditLog.json``:

.. code-block:: sh

   mongod --dbpath data/db --auditLog jsonfile --auditPath data/db/auditLog.json

The audit file rotates at the same time as the server log file.

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=jsonfile
   auditPath=data/db/auditLog.json

Output to BSON File
~~~~~~~~~~~~~~~~~~~

To enable auditing and print audit events to a file in BSON binary
format, specify ``bsonfile`` for the :option:`--auditLog` setting and
specify the filename for the :option:`--auditPath`. The
:option:`--auditPath` option accepts either full path name or relative
path name. For example, the ffollowing enables auditing and records
audit events to a BSON file with the relative path name of
``data/db/auditLog.bson``:

.. code-block:: sh

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/auditLog.bson

The audit file rotates at the same time as the server log file.

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/auditLog.bson

To view the contents of the file, pass the file to the MongoDB utility
:program:`bsondump`. For example, the following converts the audit log
into a human-readable form and output to the terminal:

.. code-block:: sh

   bsondump data/db/auditLog.bson

.. _audit-filter:

Filter Events
-------------

By default, the audit facility records all :ref:`auditable operations
<audit-action-details-results>`. The audit feature has an
:option:`--auditFilter` option to determine which events to record. The
:option:`--auditFilter` option takes a document of the form:

.. code-block:: javascript

   { atype: <expression> }

The ``<expression>`` is a :ref:`query condition expression
<query-selectors>` to match on :ref:`various actions
<audit-action-details-results>` .

Filter for a Single Operation Type
----------------------------------

For example, to audit only the :authaction:`createCollection` action, use the
filter ``{ atype: "createCollection" }``:

.. tip::
   To specify the filter as a command-line option, enclose the filter document
   in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/audit1.bson --auditFilter '{ atype: "createCollection" }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/audit1.bson
   auditFilter={ atype: "createCollection" }

Filter for Multiple Operation Types
-----------------------------------

To match on multiple operations, use the :operator:`$in` operator in
the ``<expression>`` as in the following:

.. tip::
   To specify the filter as a command-line option, enclose the filter document
   in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auditLog bsonfile --auditPath data/db/audit2.bson --auditFilter '{ atype: { $in: [ "createCollection", "dropCollection" ] } }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auditLog=bsonfile
   auditPath=data/db/audit2.bson
   auditFilter={ atype: { $in: [ "createCollection", "dropCollection" ] } }

Filter on Authentication Operations on a Single Database
--------------------------------------------------------

For authentication operations, you can also specify a specific
database with the ``param.db`` field:

.. code-block:: javascript

   { atype: <expression>, "param.db": <database> }

For example, to audit only ``authenticate`` operations that occur
against the ``test`` database, use the filter ``{ atype:
"authenticate", "param.db": "test" }``:

.. tip:: To specify the filter as a command-line option, enclose the
   filter document in quotes to pass the document as a string.

.. code-block:: javascript

   mongod --dbpath data/db --auth --auditLog jsonfile --auditPath data/db/auditLog.json --auditFilter '{ atype: "authenticate", "param.db": "test" }'

You may also specify these options in the :doc:`configuration file
</reference/configuration-options>`:

.. code-block:: none

   dbpath=data/db
   auth=true
   auditLog=jsonfile
   auditPath=data/db/auditLog.json
   auditFilter={ atype: "authenticate", "param.db": "test" }

To filter on all :authaction:`authenticate` operations across
databases, use the filter ``{ atype: "authenticate" }``.
