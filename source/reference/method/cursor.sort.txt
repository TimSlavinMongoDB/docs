=============
cursor.sort()
=============

.. default-domain:: mongodb

Definition
----------

.. method:: cursor.sort(sort)

   Specifies the order in which the query returns matching documents.
   You must apply :method:`~cursor.sort()` to the cursor before
   retrieving any documents from the database.

   The :method:`~cursor.sort()` method has the following parameter:

   .. include:: /reference/method/cursor.sort-param.rst

   The ``sort`` parameter contains field and value pairs, in the
   following form:

   .. code-block:: javascript

      { field: value }

   The sort document can specify :ref:`ascending or descending sort on
   existing fields <sort-asc-desc>` or :ref:`sort on computed metadata
   <sort-metadata>`.

Behaviors
---------

.. _sort-asc-desc:

Ascending/Descending Sort
~~~~~~~~~~~~~~~~~~~~~~~~~

Specify in the sort parameter the field or fields to sort by and a
value of ``1`` or ``-1`` to specify an ascending or descending sort
respectively.

The following sample document specifies a descending sort by the
``age`` field and then an ascending sort by the ``posts`` field:

.. code-block:: javascript

   { age : -1, posts: 1 }

.. include:: /includes/fact-sort-order.rst

.. _sort-metadata:

Metadata Sort
~~~~~~~~~~~~~

Specify in the sort parameter a new field name for the
computed metadata and specify the :projection:`$meta` expression as its
value.

The following sample document specifies a descending sort by the
``"textScore"`` metadata:

.. code-block:: javascript

   { score: { $meta: "textScore" } }

The specified metadata determines the sort order. For example, the
``"textScore"`` metadata sorts in descending order. See
:projection:`$meta` for details.

Examples
--------

The following query returns all documents in ``collection`` sorted by
the ``age`` field in descending order.

.. code-block:: javascript

   db.collection.find().sort( { age: -1 } );

The following query specifies the sort order using the fields from a
sub-document ``name``. The query sorts first by the ``last`` field and
then by the ``first`` field. The query sorts both fields in ascending
order:

.. code-block:: javascript

   db.bios.find().sort( { 'name.last': 1, 'name.first': 1 } )

Limit Results
-------------

Unless you have an index for the specified key pattern, use
:method:`~cursor.sort()` in conjunction with :method:`~cursor.limit()` to avoid
requiring MongoDB to perform a large, in-memory
sort. :method:`~cursor.limit()` increases the speed and reduces the amount
of memory required to return this query by way of an optimized
algorithm.

.. warning::

   The sort function requires that the entire sort be able to
   complete within 32 megabytes. When the sort option consumes more
   than 32 megabytes, MongoDB will return an error. Use
   :method:`~cursor.limit()`, or create an index on the field that you're
   sorting to avoid this error.

Return Natural Order
--------------------

The :operator:`$natural` parameter returns items according to their
order on disk. Consider the following query: 

.. code-block:: javascript

   db.collection.find().sort( { $natural: -1 } )

This will return documents in the reverse of the order on
disk. Typically, the order of documents on disks reflects insertion
order, *except* when documents move internal because of document
growth due to update operations.
