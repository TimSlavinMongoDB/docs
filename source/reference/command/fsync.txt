=====
fsync
=====

.. default-domain:: mongodb

.. dbcommand:: fsync

   The :dbcommand:`fsync` command forces the :program:`mongod` process
   to flush all pending writes to the storage layer. :program:`mongod`
   is always writing data to the storage layer as applications write
   more data. MongoDB guarantees that it will write all data to disk
   within the :setting:`syncdelay` interval, which is 60 seconds by
   default.

   .. code-block:: javascript

      { fsync: 1 }

   The :dbcommand:`fsync` operation is synchronous by default, to run
   :dbcommand:`fsync` asynchronously, use the following form:

   .. code-block:: javascript

      { fsync: 1, async: true }

   The connection will return immediately. You can check the output of
   :method:`db.currentOp()` for the status of the :dbcommand:`fsync`
   operation.

   The primary use of :dbcommand:`fsync` is to lock the database
   during backup operations. This will flush all data to the data
   storage layer and block all write operations until you unlock the
   database. Consider the following command form:

   .. code-block:: javascript

      { fsync: 1, lock: true }

   .. note::

      You may continue to perform read operations on a database that
      has a :dbcommand:`fsync` lock. However, after the first
      write operation all subsequent read operations wait until
      you unlock the database.

   To check the state of the fsync lock, use
   :method:`db.currentOp()`. Use the following JavaScript function in
   the shell to test if the database is currently locked:

   .. code-block:: javascript

      serverIsLocked = function () {
                           var co = db.currentOp();
                           if (co && co.fsyncLock) {
                               return true;
                           }
                           return false;
                       }

   After loading this function into your :program:`mongo` shell
   session you can call it as follows:

   .. code-block:: javascript

      serverIsLocked()

   This function will return ``true`` if the :program:`mongod`
   instance is currently
   locked and ``false`` if the :program:`mongod` is not locked. To unlock the
   :program:`mongod`, make a request for an unlock using the following operation:

   .. code-block:: javascript

      db.getSiblingDB("admin").$cmd.sys.unlock.findOne();

   In the :program:`mongo` shell, you may use the
   :method:`db.fsyncLock()` and :method:`db.fsyncUnlock()` wrappers for
   the :dbcommand:`fsync` lock and unlock process:

   .. code-block:: javascript

      db.fsyncLock();
      db.fsyncUnlock();

   .. note::

      An :dbcommand:`fsync` lock is only possible on *individual* shards of
      a sharded cluster, not on the entire cluster. To backup an
      entire sharded cluster, please see
      :doc:`/administration/backup-sharded-clusters` for more
      information.

      If your :program:`mongod` has :term:`journaling <journal>`
      enabled, consider using :ref:`another method
      <backup-with-journaling>` to create a back up of your data.

   .. include:: /includes/note-disable-profiling-fsynclock.rst
