======================
Upgrade MongoDB to 2.6
======================

.. default-domain:: mongodb

.. TODO remove below *test only* blurb when update to 2.6

MongoDB 2.6 is currently in development. While 2.6-release-candidates
are currently available, these versions of MongoDB are for **testing
only and not for production use**.

In the general case, the upgrade from MongoDB 2.4 to 2.6 is a
binary-compatible "drop-in" upgrade: shut down the :program:`mongod`
instances and replace them with :program:`mongod` instances running
2.6. **However**, before you attempt any upgrade, familiarize yourself
with the content of this document, particularly the
:ref:`2.6-upgrade-considerations`, the procedure for :ref:`upgrading
sharded clusters <2.6-upgrade-cluster>`, and the considerations for
:ref:`reverting to 2.4 after running 2.6
<2.6-downgrade-considerations>`.

.. _2.6-upgrade-considerations:

Upgrade Recommendations and Checklist
-------------------------------------

When upgrading, consider the following:

Upgrade/Downgrade Path
~~~~~~~~~~~~~~~~~~~~~~

- MongoDB does not support upgrades from MongoDB 2.2 and earlier
  versions directly to MongoDB 2.6. To upgrade from MongoDB 2.2 to
  2.6, :doc:`upgrade to MongoDB 2.4 </release-notes/2.4-upgrade>`
  *first*, and then follow the procedures to upgrade from MongoDB 2.4
  to 2.6.

- .. include:: /includes/fact-2.6-downgrade-restrictions.rst

- Users of the :mms:`MMS Backup Service </backup>` must run *at least*
  version ``v20131216.1`` of the Backup agent before upgrading
  MongoDB components.

- Sharded clusters *must* follow the :ref:`upgrade procedure
  <2.6-upgrade-cluster>`.

Preparedness
~~~~~~~~~~~~

- Connect the 2.6 :program:`mongo` shell to your MongoDB 2.4 database
  and run the :method:`db.upgradeCheckAllDbs()` for a preliminary check
  of your current data for compatibility.

- Additional 2.6 changes that affect compatibility require manual
  checks and intervention. See :doc:`/release-notes/2.6-compatibility`
  for details.

Authentication
~~~~~~~~~~~~~~

For all deployments using authentication,

- Ensure that at least one user exists in the ``admin`` database before
  upgrading to MongoDB 2.6.

- Upgrade the drivers (i.e. client libraries) **before**
  :program:`mongod` instances.

- .. include:: /includes/important-upgrade-auth-model-prerequisites.rst

- **Recommended**.

  .. include:: /includes/fact-auth-upgrade-recommendation.rst

.. _2.6-upgrade-standalone:

Upgrade Standalone ``mongod`` Instance to MongoDB 2.6
-----------------------------------------------------

The following steps outline the procedure to upgrade a standalone
:program:`mongod` from version 2.4 to 2.6. To upgrade from version
2.2 to 2.6, :doc:`upgrade to version 2.4
</release-notes/2.4-upgrade>` *first*, and then follow the procedure to
upgrade from 2.4 to 2.6.

#. Download binaries of the latest release in the 2.6 series from the
   `MongoDB Download Page`_. See :doc:`/installation` for more
   information.

#. Shut down your :program:`mongod` instance. Replace the existing
   binary with the 2.6 :program:`mongod` binary and restart :program:`mongod`.

.. _`MongoDB Download Page`: http://www.mongodb.org/downloads

.. _2.6-upgrade-replica-set:

Upgrade a Replica Set from MongoDB 2.4 to MongoDB 2.6
-----------------------------------------------------

The following steps outline the procedure to upgrade a replica set from
MongoDB 2.4 to MongoDB 2.6. To upgrade from MongoDB 2.2 to 2.6,
:doc:`upgrade all members of the replica set to version 2.4
</release-notes/2.4-upgrade>` *first*, and then follow the procedure to
upgrade from MongoDB 2.4 to 2.6.

You can upgrade from MongoDB 2.4 to 2.6 using a "rolling" upgrade to
minimize downtime by upgrading the members individually while the other
members are available:

#. Upgrade the :term:`secondary` members of the set one at a time by
   shutting down the :program:`mongod` and replacing the 2.4 binary
   with the 2.6 binary. After upgrading a :program:`mongod` instance,
   wait for the member to recover to ``SECONDARY`` state
   before upgrading the next instance.
   To check the member's state, issue :method:`rs.status()` in the
   :program:`mongo` shell.

#. Use :method:`rs.stepDown()` in the the :program:`mongo` shell to
   step down the :term:`primary` and force the normal :ref:`failover
   <replica-set-failover>` procedure. :method:`rs.stepDown()`
   expedites the failover procedure and is preferable to shutting down
   the primary directly.

   When :method:`rs.status()` shows that the primary has stepped down
   and another member has assumed ``PRIMARY`` state, shut down the
   previous primary and replace the :program:`mongod` binary with the
   2.6 binary and start the new instance.

   .. note:: Replica set failover is not instant but will
      render the set unavailable to read or accept writes
      until the failover process completes. Typically this takes
      10 seconds or more. You may wish to plan the upgrade during
      a predetermined maintenance window.

.. _2.6-upgrade-cluster:

Upgrade a Sharded Cluster from MongoDB 2.4 to MongoDB 2.6
---------------------------------------------------------

.. important::

   Only upgrade sharded clusters to 2.6 if **all** members of the
   cluster are currently running instances of 2.4. The only supported
   upgrade path for sharded clusters running 2.2 is via 2.4.

Upgrading a :term:`sharded cluster` from MongoDB version 2.4 to 2.6
requires that you run a 2.6 :program:`mongos` with the
:option:`--upgrade <mongos --upgrade>` option, as described in this
procedure. The upgrade process does not require downtime.

.. warning::

   - .. include:: /includes/fact-upgrade-sharded-cluster-prereq.rst

   - While the upgrade is in progress, you cannot make changes to the
     collection meta-data. For example, during the upgrade, do **not**
     do any of the following:

     - :method:`sh.enableSharding()`

     - :method:`sh.shardCollection()`

     - :method:`sh.addShard()`

     - :method:`db.createCollection()`

     - :method:`db.collection.drop()`

     - :method:`db.dropDatabase()`

     - any operation that creates a database

     - any other operation that modifies the cluster meta-data in any
       way. See :doc:`/reference/sharding` for a complete list
       of sharding commands. Note, however, that not all commands on
       the :doc:`/reference/sharding` page modifies the
       cluster meta-data.

.. note::

   The upgraded config database will require more storage space than
   before to make backup and working copies of the
   :data:`config.chunks` and :data:`config.collections` collections.
   As always, if storage requirements increase, the :program:`mongod`
   might need to pre-allocate additional data files. See
   :ref:`faq-tools-for-measuring-storage-use` for more information.

Upgrade Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~

#. Turn off the :ref:`balancer <sharding-balancing-internals>` in the
   sharded cluster, as described in
   :ref:`sharding-balancing-disable-temporarily`.

#. Start a single 2.6 :program:`mongos` instance with
   :setting:`configdb` pointing to the sharded cluster's :ref:`config
   servers <sharding-config-server>` and with the :option:`--upgrade
   <mongos --upgrade>` option.  The upgrade process happens before the
   instance becomes a daemon (i.e. before
   :option:`--fork <mongos --fork>`.)

   If you need to avoid reconfiguring a production :program:`mongos`
   instance, you can upgrade an existing :program:`mongos` instance to
   2.6 or start a new `mongos` instance that can reach all config
   servers.

   Start :program:`mongos` instance:

   .. code-block:: sh

      mongos --configdb <config servers> --upgrade

   Invoking :program:`mongos` without the :option:`--upgrade <mongos
   --upgrade>` option will fail to start until the 2.6 upgrade process
   is complete.

   The upgrade will prevent any chunk moves or splits from occurring
   during the upgrade process. If the data files have many sharded
   collections or if failed processes hold stale locks,
   acquiring the locks for all collections can take
   seconds or minutes. Watch the log for progress updates.

#. When the :program:`mongos` instance starts successfully, the upgrade
   of the :program:`mongos` instance is complete. If :program:`mongos`
   fails to start, check the log for more information.

   If the :program:`mongos` instance terminates or loses its connection to the
   config servers during the upgrade, you may always safely retry the
   upgrade.

#. Upgrade and restart other :program:`mongos` instances in the
   sharded cluster, *without* the :option:`--upgrade <mongos --upgrade>`
   option. See :ref:`2.6-finalize-shard-cluster-upgrade` for more information.

.. _2.6-finalize-shard-cluster-upgrade:

Complete Sharded Cluster Upgrade
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you have successfully upgraded *all* :program:`mongos` instances,
you can upgrade the other instances in your MongoDB deployment.

.. warning::

   Do not upgrade :program:`mongod` instances until after you have
   upgraded *all* :program:`mongos` instances.

While the balancer is still disabled, upgrade the components of your
sharded cluster in the following order:

- Upgrade all 3 :program:`mongod` config server instances, leaving
  the *first* system in the :option:`mongos --configdb` argument to upgrade
  *last*.

- Upgrade each shard, one at a time, upgrading the :program:`mongod`
  secondaries before running :dbcommand:`replSetStepDown` and
  upgrading the primary of each shard.

When this process is complete, :ref:`re-enable the
balancer <sharding-balancing-enable>`.

.. _2.6-upgrade-authorization-model:

Upgrade from MongoDB 2.4 User Authorization Model to MongoDB 2.6 Model
----------------------------------------------------------------------

.. important::

   .. include:: /includes/important-upgrade-auth-model-prerequisites.rst

Considerations
~~~~~~~~~~~~~~

- **Recommended**

  .. include:: /includes/fact-auth-upgrade-recommendation.rst

  If you decide to upgrade the user authorization
  model immediately instead of waiting the recommended "burn in"
  period, then for sharded clusters, you must wait at least 10 seconds
  after upgrading the sharded clusters to run the authorization
  upgrade script.

- For a replica set, it is only necessary to run the upgrade process on
  the :term:`primary` as the changes will automatically replicate to
  the secondaries.

- For a sharded cluster, connect to a :program:`mongos` and run the
  upgrade procedure to upgrade the the cluster's authorization data. By
  default, the procedure will upgrade the authorization data of the
  shards as well.

  To override this behavior, run the upgrade command with the
  additional parameter ``upgradeShards: false``. If you choose to
  override, you must run the upgrade procedure on the :program:`mongos`
  first, and then run the procedure on the :term:`primary` members of
  each shard.

- For a sharded cluster, do **not** run the upgrade process directly
  against the :doc:`config servers
  </core/sharded-cluster-config-servers>`.

Procedure
~~~~~~~~~

#. Connect and authenticate to the :program:`mongod` instance for a
   single deployment or a :program:`mongos` for a sharded cluster as an
   ``admin`` database user with the role
   :authrole:`userAdminAnyDatabase`.

#. Run the :dbcommand:`authSchemaUpgrade` command in the ``admin``
   database to update the user data:

   .. code-block:: javascript

      res = db.getSiblingDB("admin").runCommand({authSchemaUpgrade: 1 });

      print(tojson(res));

   In case of error, you may safely rerun the
   :dbcommand:`authSchemaUpgrade` command.

For a sharded cluster, the procedure will upgrade the authorization
data of the shards as well and the upgrade is complete. You can,
however, override this behavior by including ``upgradeShards: false``
in the command. If you override the behavior, after upgrading on
:program:`mongos`, you will need to connect to the primary for each
shard and repeat the upgrade process after upgrading on the
:program:`mongos`.

Result
~~~~~~

The upgrade procedure copies the version 2.4 ``admin.system.users``
collection to ``admin.system.backup_users``.

The upgrade procedure leaves the version 2.4 ``<non-admin
database>.system.users`` collection(s) intact.

.. |action| replace:: Upgrade

.. include:: /includes/2.4-2.6-upgrade-downgrade-procedure.rst
